#!/bin/bash
# diagnose-caddy-setup.sh - Analyze existing Caddy setup for TOR integration

set -euo pipefail

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}Caddy-TOR Integration Diagnostic${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo ""

# Check if running as appropriate user
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}Running as root - will check all files${NC}"
else
    echo -e "${YELLOW}Running as $(whoami) - some checks may be limited${NC}"
fi
echo ""

# Diagnostic results
ISSUES=()
WARNINGS=()
READY_ITEMS=()

# Function to check item
check_item() {
    local description=$1
    local check_command=$2
    local severity=${3:-"issue"}  # issue or warning
    
    echo -n "Checking $description... "
    if eval "$check_command" 2>/dev/null; then
        echo -e "${GREEN}✓${NC}"
        READY_ITEMS+=("$description")
        return 0
    else
        echo -e "${RED}✗${NC}"
        if [ "$severity" = "warning" ]; then
            WARNINGS+=("$description")
        else
            ISSUES+=("$description")
        fi
        return 1
    fi
}

# Section 1: Docker Environment
echo -e "${YELLOW}1. Docker Environment${NC}"
echo "────────────────────"
check_item "Docker installed" "command -v docker"
check_item "Docker Compose installed" "command -v docker-compose"
check_item "Docker daemon running" "docker info"
check_item "User in docker group" "groups | grep -q docker" "warning"
echo ""

# Section 2: Existing Caddy Setup
echo -e "${YELLOW}2. Existing Caddy Analysis${NC}"
echo "──────────────────────────"

# Check if Caddy is running
CADDY_RUNNING=false
CADDY_CONTAINER=""
if docker ps --format "{{.Names}}" | grep -q caddy; then
    CADDY_RUNNING=true
    CADDY_CONTAINER=$(docker ps --format "{{.Names}}" | grep caddy | head -1)
    echo -e "Caddy Status: ${GREEN}Running${NC} (Container: $CADDY_CONTAINER)"
else
    echo -e "Caddy Status: ${RED}Not Running${NC}"
    ISSUES+=("Caddy container not running")
fi

# Check Caddy directory
if [ -d "/opt/caddy" ]; then
    echo -e "Caddy Directory: ${GREEN}Found${NC}"
    echo "  Contents:"
    ls -la /opt/caddy | head -10 | sed 's/^/    /'
else
    echo -e "Caddy Directory: ${RED}Not Found${NC}"
    ISSUES+=("Caddy directory /opt/caddy not found")
fi

# Check Caddy network
if [ "$CADDY_RUNNING" = true ]; then
    CADDY_NETWORK=$(docker inspect "$CADDY_CONTAINER" --format='{{range $net,$v := .NetworkSettings.Networks}}{{$net}}{{end}}' 2>/dev/null | head -1)
    if [ -n "$CADDY_NETWORK" ]; then
        echo -e "Caddy Network: ${GREEN}$CADDY_NETWORK${NC}"
        
        # Check network details
        NETWORK_INFO=$(docker network inspect "$CADDY_NETWORK" 2>/dev/null | jq -r '.[0] | {Driver: .Driver, Subnet: .IPAM.Config[0].Subnet}' 2>/dev/null || echo "Unable to get details")
        echo "  Network Details: $NETWORK_INFO"
    else
        echo -e "Caddy Network: ${YELLOW}Using default bridge${NC}"
        WARNINGS+=("Caddy using default bridge network")
    fi
fi

# Check existing TOR configuration
echo ""
if [ -f "/opt/caddy/Caddyfile-tor" ]; then
    echo -e "TOR Caddyfile: ${GREEN}Already exists${NC}"
    echo "  First few lines:"
    head -5 /opt/caddy/Caddyfile-tor 2>/dev/null | sed 's/^/    /' || echo "    (Unable to read)"
    WARNINGS+=("Existing Caddyfile-tor will need review")
else
    echo -e "TOR Caddyfile: ${YELLOW}Not found${NC} (will be created)"
fi
echo ""

# Section 3: TORSPY Repository
echo -e "${YELLOW}3. TORSPY Repository Status${NC}"
echo "───────────────────────────"

TORSPY_DIR="/opt/github/TORSPY"
if [ -d "$TORSPY_DIR" ]; then
    echo -e "Repository: ${GREEN}Found${NC}"
    
    # Check permissions issues
    echo -n "  Script permissions: "
    if [ -d "$TORSPY_DIR/scripts" ]; then
        SCRIPT_OWNER=$(stat -c %U:%G "$TORSPY_DIR/scripts" 2>/dev/null || echo "unknown")
        if [ "$SCRIPT_OWNER" = "root:root" ]; then
            echo -e "${YELLOW}Need fixing${NC} (owned by root)"
            ISSUES+=("Scripts owned by root - need chown")
        else
            echo -e "${GREEN}OK${NC} ($SCRIPT_OWNER)"
        fi
    else
        echo -e "${RED}Scripts directory missing${NC}"
    fi
    
    # Check for required files
    check_item "  generate-all-scripts.sh" "[ -f $TORSPY_DIR/generate-all-scripts.sh -o -f $TORSPY_DIR/scr.sh ]"
    check_item "  docs directory" "[ -d $TORSPY_DIR/docs ]"
else
    echo -e "Repository: ${RED}Not Found${NC} at $TORSPY_DIR"
    ISSUES+=("TORSPY repository not found")
fi
echo ""

# Section 4: System Resources
echo -e "${YELLOW}4. System Resources${NC}"
echo "───────────────────"
echo "Disk Space:"
df -h / | grep -v Filesystem | awk '{print "  Root: "$4" free ("$5" used)"}'
if [ -d "/var/lib/docker" ]; then
    df -h /var/lib/docker | grep -v Filesystem | awk '{print "  Docker: "$4" free ("$5" used)"}'
fi

echo ""
echo "Memory:"
free -h | grep Mem | awk '{print "  Total: "$2" | Available: "$7}'

echo ""
echo "Docker Resources:"
if command -v docker &> /dev/null; then
    echo "  Containers: $(docker ps -q | wc -l) running, $(docker ps -aq | wc -l) total"
    echo "  Images: $(docker images -q | wc -l)"
    echo "  Volumes: $(docker volume ls -q | wc -l)"
    echo "  Networks: $(docker network ls -q | wc -l)"
fi
echo ""

# Section 5: Port Availability
echo -e "${YELLOW}5. Port Availability Check${NC}"
echo "──────────────────────────"
check_item "TOR SOCKS port 9050" "! netstat -tuln 2>/dev/null | grep -q ':9050 '" "warning"
check_item "TOR Control port 9051" "! netstat -tuln 2>/dev/null | grep -q ':9051 '" "warning"
check_item "Prometheus port 9091" "! netstat -tuln 2>/dev/null | grep -q ':9091 '" "warning"
check_item "Grafana port 3000" "! netstat -tuln 2>/dev/null | grep -q ':3000 '" "warning"
echo ""

# Section 6: Integration Readiness
echo -e "${YELLOW}6. Integration Readiness Summary${NC}"
echo "────────────────────────────────"

# Calculate readiness score
TOTAL_CHECKS=$((${#READY_ITEMS[@]} + ${#ISSUES[@]} + ${#WARNINGS[@]}))
READINESS_SCORE=$((${#READY_ITEMS[@]} * 100 / TOTAL_CHECKS))

echo -e "Overall Readiness: ${BLUE}$READINESS_SCORE%${NC}"
echo ""

if [ ${#READY_ITEMS[@]} -gt 0 ]; then
    echo -e "${GREEN}✓ Ready (${#READY_ITEMS[@]} items):${NC}"
    printf '%s\n' "${READY_ITEMS[@]}" | sed 's/^/  - /'
fi

if [ ${#WARNINGS[@]} -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}⚠ Warnings (${#WARNINGS[@]} items):${NC}"
    printf '%s\n' "${WARNINGS[@]}" | sed 's/^/  - /'
fi

if [ ${#ISSUES[@]} -gt 0 ]; then
    echo ""
    echo -e "${RED}✗ Issues to Fix (${#ISSUES[@]} items):${NC}"
    printf '%s\n' "${ISSUES[@]}" | sed 's/^/  - /'
fi

# Recommendations
echo ""
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}Recommendations${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"

if [ ${#ISSUES[@]} -gt 0 ]; then
    echo ""
    echo "1. Fix critical issues first:"
    echo "   cd /opt/github/TORSPY && sudo ./fix-and-integrate.sh"
fi

if [ "$CADDY_RUNNING" = true ]; then
    echo ""
    echo "2. Your Caddy is running. For safest integration:"
    echo "   - Start with: ./quick-tor-caddy-setup.sh"
    echo "   - This adds .onion without changing existing setup"
else
    echo ""
    echo "2. Start Caddy first before TOR integration:"
    echo "   cd /opt/caddy && docker-compose up -d"
fi

if [ -f "/opt/caddy/Caddyfile-tor" ]; then
    echo ""
    echo "3. You have existing Caddyfile-tor. Options:"
    echo "   - Back it up: cp /opt/caddy/Caddyfile-tor /opt/caddy/Caddyfile-tor.bak"
    echo "   - Review integration docs before proceeding"
fi

echo ""
echo "4. Recommended integration order:"
echo "   a) Run this diagnostic"
echo "   b) Fix any critical issues"
echo "   c) Try minimal integration first"
echo "   d) Gradually add more TOR services"

# Save diagnostic report
REPORT_FILE="/tmp/caddy-tor-diagnostic-$(date +%Y%m%d-%H%M%S).txt"
{
    echo "Caddy-TOR Integration Diagnostic Report"
    echo "Generated: $(date)"
    echo ""
    echo "System: $(hostname)"
    echo "User: $(whoami)"
    echo ""
    echo "Docker Version: $(docker --version 2>/dev/null || echo 'Not installed')"
    echo "Docker Compose: $(docker-compose --version 2>/dev/null || echo 'Not installed')"
    echo ""
    echo "Readiness Score: $READINESS_SCORE%"
    echo "Issues Found: ${#ISSUES[@]}"
    echo "Warnings: ${#WARNINGS[@]}"
    echo ""
    [ ${#ISSUES[@]} -gt 0 ] && printf 'Issues:\n%s\n' "${ISSUES[@]}"
    [ ${#WARNINGS[@]} -gt 0 ] && printf '\nWarnings:\n%s\n' "${WARNINGS[@]}"
} > "$REPORT_FILE"

echo ""
echo -e "${BLUE}Full diagnostic report saved to: $REPORT_FILE${NC}"