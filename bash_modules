#!/usr/bin/env bash
# SENTINEL Module System
# Provides dynamic loading and management of bashrc extensions

# Define colors for prettier output
export RED="\033[0;31m"
export GREEN="\033[0;32m"
export YELLOW="\033[0;33m"
export BLUE="\033[0;34m"
export MAGENTA="\033[0;35m"
export CYAN="\033[0;36m"
export NC="\033[0m" # No Color

# Module directory path
export SENTINEL_MODULES_PATH=${U_MODULES_PATH:-"$HOME/.bash_modules.d"}

# Ensure module directory is properly set and exists
if [[ -z "$SENTINEL_MODULES_PATH" ]]; then
    # Fallback to standard location
    export SENTINEL_MODULES_PATH="$HOME/.bash_modules.d"
    ewarn "SENTINEL_MODULES_PATH was empty, reset to default $SENTINEL_MODULES_PATH"
fi

# Registry of loaded modules
declare -A SENTINEL_LOADED_MODULES

# Initialize modules directory if it doesn't exist
if [[ ! -d "$SENTINEL_MODULES_PATH" ]]; then
    mkdir -p "$SENTINEL_MODULES_PATH"
    echo "Created modules directory: $SENTINEL_MODULES_PATH"
fi

# Check if list of modules file exists
if [[ ! -f "$HOME/.bash_modules" ]]; then
    touch "$HOME/.bash_modules"
fi

# Output functions with verbosity control
emsg() {
    [[ "$SENTINEL_QUIET_MODULES" != "1" ]] && echo "$@"
}

ewarn() {
    # Always show warnings
    echo "$@"
}

eerror() {
    # Always show errors
    echo "$@" >&2
}

# Function to recursively find all modules (including those in subdirectories)
find_all_modules() {
    local search_path="$1"
    local debug_mode="${SENTINEL_DEBUG_MODULES:-0}"
    
    [[ "$debug_mode" == "1" ]] && echo "DEBUG: Searching for modules in $search_path and subdirectories" >&2
    
    # Find all .module and .sh files in the path and subdirectories
    find "$search_path" -type f \( -name "*.module" -o -name "*.sh" \) 2>/dev/null | sort
}

# Function to convert a file path to a module name
get_module_name_from_path() {
    local module_path="$1"
    local module_file=$(basename "$module_path")
    
    # Strip extension and return
    echo "${module_file%.*}"
}

# Module loading function with error handling and dependency resolution
module_enable() {
    local module_name="$1"
    local force="${2:-0}"
    local called_by="${3:-direct}"
    local module_file=""
    local debug_mode="${SENTINEL_DEBUG_MODULES:-0}"
    
    [[ "$debug_mode" == "1" ]] && echo "DEBUG: Attempting to load module '$module_name'" >&2
    
    # First try to find module in root directory
    if [[ -f "$SENTINEL_MODULES_PATH/$module_name.sh" ]]; then
        module_file="$SENTINEL_MODULES_PATH/$module_name.sh"
        [[ "$debug_mode" == "1" ]] && echo "DEBUG: Found .sh module at $module_file" >&2
    elif [[ -f "$SENTINEL_MODULES_PATH/$module_name.module" ]]; then
        module_file="$SENTINEL_MODULES_PATH/$module_name.module"
        [[ "$debug_mode" == "1" ]] && echo "DEBUG: Found .module at $module_file" >&2
    else
        # If not found in root, search in subdirectories
        local subdir_module=$(find "$SENTINEL_MODULES_PATH" -path "*/$module_name.module" -o -path "*/$module_name.sh" 2>/dev/null | head -n 1)
        if [[ -n "$subdir_module" ]]; then
            module_file="$subdir_module"
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: Found module in subdirectory at $module_file" >&2
        fi
    fi
    
    # Check if module is already loaded
    if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" == "1" ]] && [[ "$force" != "1" ]]; then
        [[ "$called_by" == "direct" && "$SENTINEL_QUIET_MODULES" != "1" ]] && emsg "Module '$module_name' is already loaded."
        return 0
    fi
    
    # Check if module file exists
    if [[ -z "$module_file" || ! -f "$module_file" ]]; then
        if [[ "$called_by" == "direct" ]]; then
            eerror "Module '$module_name' not found."
            
            # Check for similar modules as suggestion
            local suggestions=$(find "$SENTINEL_MODULES_PATH" -type f -name "*.sh" -o -name "*.module" | xargs -n1 basename | sed 's/\.sh$//' | sed 's/\.module$//' | grep -i "$module_name" || echo "")
            if [[ -n "$suggestions" ]]; then
                echo "Did you mean one of these?"
                echo "$suggestions" | while IFS= read -r suggestion; do
                    echo "  $suggestion"
                done
            fi
        fi
        return 1
    fi
    
    # Security: Verify module integrity if HMAC verification is enabled
    if [[ "${SENTINEL_VERIFY_MODULES:-0}" == "1" ]] && command -v openssl &>/dev/null; then
        [[ "$debug_mode" == "1" ]] && echo "DEBUG: HMAC verification enabled" >&2
        if [[ -f "$module_file.hmac" ]]; then
            # Use the HMAC key from environment or a default derived from machine-id
            local hmac_key="${SENTINEL_HMAC_KEY:-$(cat /etc/machine-id 2>/dev/null || echo "SENTINEL_DEFAULT_KEY")}"
            local calculated_hmac=$(openssl dgst -sha256 -hmac "$hmac_key" "$module_file" | cut -d' ' -f2)
            local stored_hmac=$(cat "$module_file.hmac" 2>/dev/null)
            
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: HMAC verification - stored=$stored_hmac vs calculated=$calculated_hmac" >&2
            
            if [[ "$calculated_hmac" != "$stored_hmac" ]]; then
                eerror "Security warning: Module '$module_name' failed integrity verification"
                if [[ "$force" != "1" ]]; then
                    return 1
                else
                    ewarn "Loading potentially compromised module due to force flag"
                fi
            else
                [[ "$debug_mode" == "1" ]] && echo "DEBUG: HMAC verification passed" >&2
            fi
        elif [[ "${SENTINEL_REQUIRE_HMAC:-0}" == "1" && "$force" != "1" ]]; then
            eerror "Security warning: Module '$module_name' has no HMAC signature"
            return 1
        else
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: No HMAC signature found, but not required" >&2
        fi
    fi
    
    # Security: Check for suspicious patterns in module
    if [[ "${SENTINEL_CHECK_MODULE_CONTENT:-1}" == "1" ]]; then
        local suspicious_patterns=(
            'curl.*\|.*sh'
            'wget.*\|.*sh'
            '>(bash|sh)'
            'eval.*\$\('
            'base64.*decode'
        )
        
        for pattern in "${suspicious_patterns[@]}"; do
            if grep -qE "$pattern" "$module_file"; then
                ewarn "Security warning: Module '$module_name' contains potentially unsafe patterns"
                ewarn "Review the module before loading or use force flag"
                if [[ "$force" != "1" ]]; then
                    return 1
                fi
                break
            fi
        done
    fi
    
    # Load module source to extract metadata without executing
    local dependencies=""
    if grep -q "SENTINEL_MODULE_DEPENDENCIES=" "$module_file"; then
        dependencies=$(grep "SENTINEL_MODULE_DEPENDENCIES=" "$module_file" | head -n1 | cut -d'"' -f2)
    fi
    
    # Process dependencies if any
    if [[ -n "$dependencies" ]]; then
        for dep in $dependencies; do
            if [[ "${SENTINEL_LOADED_MODULES[$dep]}" != "1" ]]; then
                emsg "Resolving dependency: $dep for $module_name"
                module_enable "$dep" "$force" "$module_name"
                
                # If dependency loading failed, abort
                if [[ $? -ne 0 ]]; then
                    eerror "Failed to load dependency '$dep' required by '$module_name'"
                    return 1
                fi
            fi
        done
    fi
    
    # Actually load the module
    if [[ -x "$module_file" || "$force" == "1" ]]; then
        # Mark as loading to detect circular dependencies
        SENTINEL_LOADED_MODULES["$module_name"]="loading"
        
        # Flag to track loading success
        local module_loaded=0
        
        # Using cached config loading if available
        if type load_cached_config &>/dev/null && [[ "${SENTINEL_CONFIG_CACHE_ENABLED:-1}" == "1" ]]; then
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: Loading module '$module_name' with caching" >&2
            if load_cached_config "$module_file" ${debug_mode:+--debug}; then
                module_loaded=1
            else
                # If caching fails, fall back to direct loading
                [[ "$debug_mode" == "1" ]] && echo "DEBUG: Caching failed, falling back to direct loading" >&2
                if source "$module_file"; then
                    module_loaded=1
                fi
            fi
        else
            # Traditional direct loading
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: Loading module '$module_name' directly" >&2
            if source "$module_file"; then
                module_loaded=1
            fi
        fi
        
        # Process the loading result
        if [[ $module_loaded -eq 1 ]]; then
            SENTINEL_LOADED_MODULES["$module_name"]="1"
            
            # Add to enabled modules list if it's not already there
            if ! grep -q "^${module_name}\$" "$HOME/.bash_modules" && [[ "$called_by" == "direct" ]]; then
                echo "$module_name" >> "$HOME/.bash_modules"
                emsg "Module '$module_name' enabled and will be loaded on startup."
            fi
            
            # Only show success message if direct call and not in quiet mode
            [[ "$called_by" == "direct" && "$SENTINEL_QUIET_MODULES" != "1" ]] && emsg "Module '$module_name' loaded successfully."
            return 0
        else
            SENTINEL_LOADED_MODULES["$module_name"]="failed"
            eerror "Failed to load module '$module_name' - error in module code."
            return 1
        fi
    else
        eerror "Module file '$module_file' is not executable. Run: chmod +x '$module_file'"
        return 1
    fi
}

# Function to load all modules in enabled modules list
_load_enabled_modules() {
    local debug_mode="${SENTINEL_DEBUG_MODULES:-0}"
    
    [[ "$debug_mode" == "1" ]] && echo "DEBUG: Loading enabled modules from $HOME/.bash_modules" >&2
    
    # Load from ~/.bash_modules
    if [[ -f "$HOME/.bash_modules" ]]; then
        while IFS= read -r module_name; do
            # Skip empty lines and comments
            [[ -z "$module_name" || "$module_name" =~ ^# ]] && continue
            
            # Enable the module if it's not already loaded
            if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" != "1" ]]; then
                module_enable "$module_name" "0" "startup"
            fi
        done < "$HOME/.bash_modules"
    fi
}

# Function to recursively load all modules in all subdirectories
_load_all_modules() {
    local debug_mode="${SENTINEL_DEBUG_MODULES:-0}"
    
    [[ "$debug_mode" == "1" ]] && echo "DEBUG: Recursively loading all modules in $SENTINEL_MODULES_PATH" >&2
    
    # Find all modules
    local all_modules=$(find_all_modules "$SENTINEL_MODULES_PATH")
    
    # Load each module if not already loaded
    echo "$all_modules" | while IFS= read -r module_path; do
        [[ -z "$module_path" ]] && continue
        
        local module_name=$(get_module_name_from_path "$module_path")
        
        # Skip if already loaded
        if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" == "1" ]]; then
            [[ "$debug_mode" == "1" ]] && echo "DEBUG: Module $module_name already loaded, skipping" >&2
            continue
        fi
        
        # Load the module
        module_enable "$module_name" "0" "recursive"
    done
}

# Disable a module
module_disable() {
    local module_name="$1"
    
    # Check if module is in the enabled list
    if grep -q "^${module_name}\$" "$HOME/.bash_modules"; then
        # Remove from enabled list
        sed -i "/^${module_name}\$/d" "$HOME/.bash_modules"
        
        # If module is loaded in current session, mark it as unloaded
        # (can't actually unload it without starting a new session)
        if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" == "1" ]]; then
            unset "SENTINEL_LOADED_MODULES[$module_name]"
            emsg "Module '$module_name' disabled. It will not be loaded in future sessions."
            emsg "Note: The module remains active in the current session."
        else
            emsg "Module '$module_name' disabled. It will not be loaded in future sessions."
        fi
        return 0
    else
        ewarn "Module '$module_name' is not enabled."
        return 1
    fi
}

# Sign a module with HMAC for integrity verification
module_sign() {
    local module_name="$1"
    local module_file=""
    
    # Check for both .sh and .module extensions
    if [[ -f "$SENTINEL_MODULES_PATH/$module_name.sh" ]]; then
        module_file="$SENTINEL_MODULES_PATH/$module_name.sh"
    elif [[ -f "$SENTINEL_MODULES_PATH/$module_name.module" ]]; then
        module_file="$SENTINEL_MODULES_PATH/$module_name.module"
    else
        # Search in subdirectories
        local subdir_module=$(find "$SENTINEL_MODULES_PATH" -path "*/$module_name.module" -o -path "*/$module_name.sh" 2>/dev/null | head -n 1)
        if [[ -n "$subdir_module" ]]; then
            module_file="$subdir_module"
        fi
    fi
    
    # Check if module file exists
    if [[ -z "$module_file" || ! -f "$module_file" ]]; then
        eerror "Module '$module_name' not found."
        return 1
    fi
    
    # Check if openssl is available
    if ! command -v openssl &>/dev/null; then
        eerror "openssl command not found. Cannot sign module."
        return 1
    fi
    
    # Use the HMAC key from environment or a default derived from machine-id
    local hmac_key="${SENTINEL_HMAC_KEY:-$(cat /etc/machine-id 2>/dev/null || echo "SENTINEL_DEFAULT_KEY")}"
    
    # Calculate and store HMAC
    local hmac=$(openssl dgst -sha256 -hmac "$hmac_key" "$module_file" | cut -d' ' -f2)
    echo "$hmac" > "$module_file.hmac"
    
    emsg "Module '$module_name' signed successfully."
    
    return 0
}

# List all available and loaded modules, including those in subdirectories
module_list() {
    local debug_mode="${SENTINEL_DEBUG_MODULES:-0}"
    local recursive="${1:-1}"  # Default to recursive
    
    echo "SENTINEL Module Registry"
    echo "======================="
    
    # Find all modules
    local all_modules
    
    if [[ "$recursive" == "1" ]]; then
        all_modules=$(find_all_modules "$SENTINEL_MODULES_PATH")
    else
        # Non-recursive - just list modules in the root directory
        all_modules=$(find "$SENTINEL_MODULES_PATH" -maxdepth 1 -type f \( -name "*.module" -o -name "*.sh" \) 2>/dev/null | sort)
    fi
    
    if [[ -z "$all_modules" ]]; then
        echo "No modules found."
        return 0
    fi
    
    local enabled_modules=0
    local loaded_modules=0
    local total_modules=0
    
    # Process each module file
    echo "$all_modules" | while IFS= read -r module_file; do
        [[ -z "$module_file" ]] && continue
        
        ((total_modules++))
        
        # Extract module name and directory
        local module_name=$(get_module_name_from_path "$module_file")
        local module_dir=$(dirname "$module_file" | sed "s|$SENTINEL_MODULES_PATH||" | sed 's|^/||')
        
        # Get module description
        local description=""
        if grep -q "SENTINEL_MODULE_DESCRIPTION=" "$module_file" 2>/dev/null; then
            description=$(grep "SENTINEL_MODULE_DESCRIPTION=" "$module_file" | head -n1 | cut -d'"' -f2)
        else
            # Try to extract from header comment
            description=$(grep -A1 "# SENTINEL Module:" "$module_file" 2>/dev/null | tail -n1 | sed 's/# //')
            [[ "$description" == *"SENTINEL Module:"* ]] && description=""
        fi
        
        # Determine module status
        local status=" "
        local status_color="${NC}"
        
        # Check if enabled at startup
        if [[ -f "$HOME/.bash_modules" ]] && grep -q "^${module_name}\$" "$HOME/.bash_modules" 2>/dev/null; then
            status="E"
            status_color="${GREEN}"
            enabled_modules=$((enabled_modules + 1))
        fi
        
        # Check if currently loaded
        if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" == "1" ]]; then
            status="L"
            status_color="${BLUE}"
            loaded_modules=$((loaded_modules + 1))
            
            # If both enabled and loaded
            if [[ -f "$HOME/.bash_modules" ]] && grep -q "^${module_name}\$" "$HOME/.bash_modules" 2>/dev/null; then
                status="*"
                status_color="${GREEN}"
            fi
        fi
        
        # Format the output - include directory if in a subdirectory
        if [[ -n "$module_dir" ]]; then
            printf "${status_color}[%s]${NC} %-20s %-20s %s\n" "$status" "$module_name" "($module_dir)" "$description"
        else
            printf "${status_color}[%s]${NC} %-20s %s\n" "$status" "$module_name" "$description"
        fi
    done
    
    # Print statistics
    echo
    echo "Status: [E]=Enabled at startup, [L]=Loaded now, [*]=Both"
    echo "Total modules: $total_modules, Enabled: $enabled_modules, Currently loaded: $loaded_modules"
}

# Function to install a new module
module_install() {
    local source_file="$1"
    local module_name="$2"
    local subdirectory="${3:-}"
    
    # Check if source file exists
    if [[ ! -f "$source_file" ]]; then
        eerror "Source file does not exist: $source_file"
        return 1
    fi
    
    # Determine target path
    local target_path="$SENTINEL_MODULES_PATH"
    if [[ -n "$subdirectory" ]]; then
        target_path="$SENTINEL_MODULES_PATH/$subdirectory"
        mkdir -p "$target_path"
    fi
    
    # Determine module filename based on extension
    local ext="${source_file##*.}"
    if [[ "$ext" != "sh" && "$ext" != "module" ]]; then
        ext="module"  # Default to .module extension
    fi
    
    # Copy file to modules directory
    local target_file="$target_path/${module_name}.${ext}"
    cp "$source_file" "$target_file"
    chmod +x "$target_file"
    
    emsg "Module '$module_name' installed to $target_file"
    
    # Optionally, enable the module
    read -p "Enable this module to load at startup? (y/n): " enable_module
    if [[ "$enable_module" == "y" ]]; then
        echo "$module_name" >> "$HOME/.bash_modules"
        emsg "Module '$module_name' enabled for startup."
        
        # Offer to load it now
        read -p "Load the module now? (y/n): " load_now
        if [[ "$load_now" == "y" ]]; then
            module_enable "$module_name"
        fi
    fi
    
    return 0
}

# Compatibility with old function names
bash_list_modules() {
    ewarn "Using legacy function bash_list_modules(). Consider switching to module_list()."
    module_list
}

# Module configuration
# Configure modules in ~/.bashrc.postcustom, not here
# Example in ~/.bashrc.postcustom:
#   export SENTINEL_OSINT_ENABLED=1       # Enable OSINT module
#   export SENTINEL_OBFUSCATE_ENABLED=0   # Disable obfuscation module

# Ensure compatibility with bashrc module registry
if [[ -n "${SENTINEL_MODULES+x}" ]]; then
    # Update the main SENTINEL_MODULES registry if it exists
    for module_name in "${!SENTINEL_LOADED_MODULES[@]}"; do
        if [[ "${SENTINEL_LOADED_MODULES[$module_name]}" == "1" ]]; then
            SENTINEL_MODULES["$module_name"]=1
        fi
    done
fi

# Load modules on startup
_load_enabled_modules

# Load all modules from all subdirectories
_load_all_modules

# Interactive menu for module management
module_menu() {
    while true; do
        clear
        echo "SENTINEL Module Management"
        echo "=========================="
        echo
        echo "1. List all modules"
        echo "2. Enable a module"
        echo "3. Disable a module"
        echo "4. Sign a module (HMAC)"
        echo "5. Install a new module"
        echo "6. Exit"
        echo
        read -p "Select an option: " choice
        
        case "$choice" in
            1) module_list; read -p "Press Enter to continue..." ;;
            2) 
                module_list
                echo
                read -p "Enter module name to enable: " module
                module_enable "$module"
                read -p "Press Enter to continue..." 
                ;;
            3)
                module_list
                echo
                read -p "Enter module name to disable: " module
                module_disable "$module"
                read -p "Press Enter to continue..." 
                ;;
            4)
                module_list
                echo
                read -p "Enter module name to sign: " module
                module_sign "$module"
                read -p "Press Enter to continue..." 
                ;;
            5)
                echo "Install a new module"
                read -p "Enter path to module file: " source_file
                read -p "Enter module name: " module_name
                read -p "Enter subdirectory (optional): " subdirectory
                module_install "$source_file" "$module_name" "$subdirectory"
                read -p "Press Enter to continue..." 
                ;;
            6) return 0 ;;
            *) echo "Invalid option"; sleep 1 ;;
        esac
    done
}