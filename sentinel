#!/bin/bash
# set -x # Enable for debugging output

# Sentinel - APT Wrapper & Shell Script Utility Module
# Version: 2.0
# Objective: Provides a smart wrapper for APT package installation and a utility
#            for managing shell script permissions.

# --- Configuration ---
LOG_FILE="/tmp/sentinel_apt.log"
# ANSI Color Codes
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_RED='\033[0;31m'
COLOR_NC='\033[0m' # No Color

# --- Function Definitions ---

# --- Logging Function ---
log_message() {
    local message="$1"
    # Append timestamped message to the log file.
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
}

# --- Usage Function ---
usage() {
    echo "Usage: $0 [options] <package1> [package2 ...]"
    echo "       $0 --chmod-sh"
    echo
    echo "Description:"
    echo "  When called with package names, Sentinel attempts to install them, finding"
    echo "  alternatives for missing packages if possible."
    echo
    echo "Options:"
    echo "  --chmod-sh   Recursively find all .sh files in the current directory"
    echo "               and subdirectories, and offer to make them executable (+x)."
    echo "               Warns if files are found deeper than 3 levels."
    echo
    echo "Example (APT wrapper): $0 git curl my-nonexistent-package"
    echo "Example (Chmod util):  $0 --chmod-sh"
}

# --- Chmod Recursive .sh Function ---
chmod_sh_recursive() {
    log_message "chmod_sh_recursive function called."
    echo "Searching for .sh files recursively..."

    local sh_files=()
    # Using an associative array to map file paths to their depth.
    declare -A file_depths
    local max_depth_found=0

    # Use 'find' and process substitution to read file paths.
    # This is robust and handles spaces in filenames.
    while IFS= read -r file_path; do
        sh_files+=("$file_path")

        # Calculate depth by counting slashes in the path relative to '.'
        local relative_path="${file_path#./}"
        local depth=$(echo "$relative_path" | awk -F'/' '{print NF}')
        
        file_depths["$file_path"]=$depth
        log_message "Found: $file_path (Depth: $depth)"

        if [ "$depth" -gt "$max_depth_found" ]; then
            max_depth_found=$depth
        fi
    done < <(find . -type f -name "*.sh")

    if [ ${#sh_files[@]} -eq 0 ]; then
        echo "No .sh files found in the current directory or subdirectories."
        log_message "No .sh files found."
        return
    fi

    echo "Found ${#sh_files[@]} .sh file(s)."
    
    if [ "$max_depth_found" -gt 3 ]; then
        echo -e "${COLOR_YELLOW}Warning: Found .sh files deeper than 3 directory levels.${COLOR_NC}"
        echo -e "${COLOR_YELLOW}The deepest file found is at level $max_depth_found.${COLOR_NC}"
        log_message "Depth warning issued: Max depth found $max_depth_found."
    fi

    echo "The following .sh files were found:"
    for file in "${sh_files[@]}"; do
        echo "  - $file (Depth: ${file_depths["$file"]})"
    done
    echo

    local user_choice
    read -r -p "Do you want to set +x permission on these ${#sh_files[@]} file(s)? [Y/n]: " user_choice
    log_message "User prompt for chmod +x. Choice: '$user_choice'"

    case "$user_choice" in
        [Yy]* )
            log_message "User confirmed chmod +x."
            echo "Applying chmod +x..."
            local success_count=0
            local error_count=0
            for file in "${sh_files[@]}"; do
                if chmod +x "$file"; then
                    echo "  - Successfully set +x on $file"
                    log_message "Successfully set +x on $file"
                    ((success_count++))
                else
                    echo -e "${COLOR_RED}  - Failed to set +x on $file${COLOR_NC}"
                    log_message "Failed to set +x on $file (exit code $?)"
                    ((error_count++))
                fi
            done

            echo
            echo "Summary:"
            echo -e "  ${COLOR_GREEN}Successfully set +x on $success_count file(s).${COLOR_NC}"
            if [ "$error_count" -gt 0 ]; then
                echo -e "  ${COLOR_RED}Failed to set +x on $error_count file(s).${COLOR_NC}"
                echo -e "${COLOR_YELLOW}You may need to run this command with sudo or check file ownership.${COLOR_NC}"
            fi
            ;;
        * )
            echo "Operation cancelled by user."
            log_message "User cancelled chmod +x operation."
            ;;
    esac
}


# --- APT Command Execution Function ---
execute_apt_install() {
    local packages_to_install=("${@}")
    local apt_output
    local apt_exit_code

    log_message "Attempting apt dry-run for packages: ${packages_to_install[*]}"
    echo "Simulating installation (dry run) for: ${packages_to_install[*]}"

    # Use a temporary file to capture combined stdout and stderr.
    local temp_output_file
    temp_output_file=$(mktemp)

    sudo apt install -y --dry-run "${packages_to_install[@]}" > "$temp_output_file" 2>&1
    apt_exit_code=$?
    apt_output=$(cat "$temp_output_file")
    rm "$temp_output_file"

    log_message "APT dry-run exit code: $apt_exit_code"
    
    # Store output in a global variable for the caller to access.
    # This avoids command substitution stripping newlines and other complexities.
    APT_OUTPUT_GLOBAL="$apt_output"

    if [ "$apt_exit_code" -eq 0 ]; then
        log_message "APT dry-run successful for all packages."
        echo -e "${COLOR_GREEN}APT dry-run successful. All specified packages are available.${COLOR_NC}"
        echo "$apt_output"
        log_message "Sentinel script finished successfully after dry-run."
        # If the dry run is perfect, no need to continue. We can exit here.
        exit 0
    else
        log_message "APT dry-run failed or some packages are problematic. Exit code: $apt_exit_code."
        echo -e "${COLOR_YELLOW}APT dry-run indicated issues. Analyzing output...${COLOR_NC}"
        echo "$apt_output"
        return 1 # Indicate that parsing is needed
    fi
}

# --- Error Parsing and Package Analysis Function ---
parse_apt_output() {
    local output="$1"
    # The maps are declared as global in the main script body.
    # This function will populate them.
    failed_packages_map=()
    successful_packages_map=()

    log_message "Parsing APT output."
    local in_new_packages_section=0

    while IFS= read -r line; do
        # Corrected Regex: Matches APT's "Unable to locate" error.
        if [[ "$line" == E:\ Unable\ to\ locate\ package\ * ]]; then
            local pkg_name=$(echo "$line" | sed -E 's/E: Unable to locate package (.*)/\1/')
            failed_packages_map["$pkg_name"]="not_found"
            log_message "Failed package (not_found): $pkg_name"
            continue
        fi
        # Match APT's "no installation candidate" error.
        if [[ "$line" == E:\ Package\ \'*\'\ has\ no\ installation\ candidate ]]; then
            local pkg_name=$(echo "$line" | sed -E "s/E: Package '(.*)' has no installation candidate/\1/")
            failed_packages_map["$pkg_name"]="no_candidate"
            log_message "Failed package (no_candidate): $pkg_name"
            continue
        fi

        # Logic to identify successfully resolved packages from the dry-run output.
        if [[ "$line" == "The following NEW packages will be installed:" ]]; then
            in_new_packages_section=1
            log_message "Found 'The following NEW packages will be installed:' section."
            continue
        fi

        # Define terminators for the "NEW packages" section.
        if [[ "$line" == "The following packages will be upgraded:" || \
              "$line" == "The following packages will be REMOVED:" || \
              "$line" =~ [0-9]+\ upgraded,\ [0-9]+\ newly\ installed, || \
              "$line" == "Suggested packages:" || \
              "$line" == "Recommended packages:" ]]; then
            if [ "$in_new_packages_section" -eq 1 ]; then
                log_message "Exiting 'NEW packages' section due to line: $line"
            fi
            in_new_packages_section=0
        fi

        if [ "$in_new_packages_section" -eq 1 ]; then
            # Extract package names from the line, stripping version/arch info.
            local pkgs_on_line=$(echo "$line" | sed -E 's/^\s+//' | sed -E 's/\s+\{.*\}//g' | sed -E 's/\s+\(.*?\)//g')
            for pkg in $pkgs_on_line; do
                if [[ -n "$pkg" ]]; then
                    successful_packages_map["$pkg"]=1
                    log_message "Potential successful package: $pkg"
                fi
            done
        fi
    done <<< "$output"

    # Sanity check: ensure a package isn't in both success and fail lists.
    for pkg_name in "${!successful_packages_map[@]}"; do
        if [[ -n "${failed_packages_map[$pkg_name]}" ]]; then
            log_message "Correction: Package $pkg_name was listed as successful but also failed. Marking as failed."
            unset successful_packages_map["$pkg_name"]
        fi
    done
}

# --- Dynamic Package Alternative Search Function ---
find_alternatives() {
    local failed_pkgs_to_check=("${@}")
    log_message "Finding alternatives for: ${failed_pkgs_to_check[*]}"
    
    # Update apt cache once per run if needed for better search results.
    if [ -z "$APT_UPDATED_THIS_RUN" ]; then
        echo "Updating apt cache to improve search results (once per run)..."
        if sudo apt update >/dev/null 2>&1; then
            APT_UPDATED_THIS_RUN=true
            log_message "apt update successful."
        else
            log_message "apt update failed. Search results might be stale."
            echo -e "${COLOR_YELLOW}Warning: 'apt update' failed. Search results may be incomplete/stale.${COLOR_NC}"
        fi
    fi

    for failed_pkg in "${failed_pkgs_to_check[@]}"; do
        log_message "Searching alternatives for '$failed_pkg' using apt-cache search."
        local search_output
        search_output=$(apt-cache search "$failed_pkg" 2>&1)
        local best_alternative=""
        local best_score=0
        
        # Heuristic scoring to find the best alternative.
        while IFS= read -r line; do
            local current_pkg_name=$(echo "$line" | awk '{print $1}')
            local current_score=0
            if [ -z "$current_pkg_name" ] || [[ "$current_pkg_name" == "$failed_pkg" ]]; then continue; fi
            log_message "Considering '$current_pkg_name' for '$failed_pkg'"

            # Higher score for exact prefix matches.
            if [[ "$current_pkg_name" == "$failed_pkg"* ]]; then
                current_score=$((current_score + 50))
            fi
            
            # Bonus score for common suffixes like -dev, -utils.
            if [[ "$current_pkg_name" == "$failed_pkg-dev" || \
                  "$current_pkg_name" == "$failed_pkg-utils" || \
                  "$current_pkg_name" == "$failed_pkg-common" ]]; then
                current_score=$((current_score + 30))
            fi
            
            # Compare base names (e.g., 'python3-pip' vs 'python-pip').
            local base_failed_pkg_name=$(echo "$failed_pkg" | sed -E 's/(-dev|-common|-utils|[0-9.-]+)$//')
            local base_current_pkg_name=$(echo "$current_pkg_name" | sed -E 's/(-dev|-common|-utils|[0-9.-]+)$//')
            if [[ "$base_failed_pkg_name" == "$base_current_pkg_name" ]]; then
                 current_score=$((current_score + 40))
            fi

            # Favor closer name lengths.
            local len_diff=$(( ${#failed_pkg} - ${#current_pkg_name} )); len_diff=${len_diff#-}
            if [ "$len_diff" -lt 5 ]; then current_score=$((current_score + (10 - len_diff) )); fi

            if [ "$current_score" -gt "$best_score" ]; then
                best_score=$current_score
                best_alternative="$current_pkg_name"
                log_message "New best alternative for '$failed_pkg': '$best_alternative' (Score: $best_score)"
            fi
        done <<< "$search_output"

        if [ -n "$best_alternative" ]; then
            alternatives_map["$failed_pkg"]="$best_alternative"
            log_message "Found alternative for $failed_pkg: $best_alternative"
        else
            alternatives_map["$failed_pkg"]="NOT_FOUND"
            log_message "No suitable alternative found for $failed_pkg"
        fi
    done
}

# --- Interactive User Prompt and Command Generation ---
present_solution() {
    log_message "Presenting solution to the user."
    local proposed_command_packages=()

    echo -e "\n${COLOR_GREEN}--- Packages that can be installed directly ---${COLOR_NC}"
    if [ "${#SUCCESSFUL_PACKAGES_NAMES[@]}" -gt 0 ]; then
        for pkg in "${SUCCESSFUL_PACKAGES_NAMES[@]}"; do
            echo -e "  - $pkg"
            proposed_command_packages+=("$pkg")
        done
    else echo "  (None)"; fi

    echo -e "\n${COLOR_YELLOW}--- Failed packages with suggested alternatives ---${COLOR_NC}"
    local has_alternatives=false
    for failed_pkg in "${!alternatives_map[@]}"; do
        local alternative="${alternatives_map[$failed_pkg]}"
        if [[ "$alternative" != "NOT_FOUND" && -n "$alternative" ]]; then
            echo -e "  - ${COLOR_RED}$failed_pkg${COLOR_NC} -> ${COLOR_GREEN}$alternative${COLOR_NC}"
            proposed_command_packages+=("$alternative")
            has_alternatives=true
        fi
    done
    if ! $has_alternatives; then echo "  (None)"; fi

    echo -e "\n${COLOR_RED}--- Failed packages with NO alternatives found ---${COLOR_NC}"
    local has_no_alternatives=false
    for failed_pkg in "${!alternatives_map[@]}"; do
        local alternative="${alternatives_map[$failed_pkg]}"
        if [[ "$alternative" == "NOT_FOUND" ]]; then
            echo -e "  - $failed_pkg"
            has_no_alternatives=true
        fi
    done
    if ! $has_no_alternatives; then echo "  (None)"; fi
    
    echo

    if [ "${#proposed_command_packages[@]}" -eq 0 ]; then
        echo -e "${COLOR_RED}No packages to install. Mission aborted.${COLOR_NC}"
        log_message "No packages to install after analysis. Aborting."
        return 1
    fi

    # Deduplicate packages before proposing the command
    local unique_packages=$(echo "${proposed_command_packages[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
    
    local proposed_command="sudo apt install -y $unique_packages"
    echo "Proposed command to execute:"
    echo -e "${COLOR_GREEN}$proposed_command${COLOR_NC}"
    echo

    read -r -p "Do you want to execute this command? [Y/n]: " user_choice
    log_message "User prompt for command execution. Choice: '$user_choice'"
    
    # Store the final packages in the global array if user agrees.
    if [[ "$user_choice" =~ ^[Yy] || -z "$user_choice" ]]; then
        FINAL_PACKAGES_TO_INSTALL=($unique_packages)
        return 0 # Success (user agreed)
    else
        return 1 # Failure (user declined)
    fi
}

# --- Final Execution Function ---
execute_final_command() {
    if [ "${#FINAL_PACKAGES_TO_INSTALL[@]}" -eq 0 ]; then
        log_message "execute_final_command called with no packages."
        echo "No packages were approved for final installation."
        return 1
    fi

    log_message "Executing final apt command for: ${FINAL_PACKAGES_TO_INSTALL[*]}"
    echo -e "${COLOR_GREEN}Executing: sudo apt install -y ${FINAL_PACKAGES_TO_INSTALL[*]}${COLOR_NC}"
    
    if sudo apt install -y "${FINAL_PACKAGES_TO_INSTALL[@]}"; then
        log_message "Final apt command executed successfully."
        echo -e "${COLOR_GREEN}Installation successful.${COLOR_NC}"
        return 0
    else
        local exit_code=$?
        log_message "Final apt command failed with exit code $exit_code."
        echo -e "${COLOR_RED}Installation failed. Please check the output above for details.${COLOR_NC}"
        return $exit_code
    fi
}


# --- Main Script Logic ---

# Initialize log file for this run.
echo "" > "$LOG_FILE"
log_message "Sentinel script started."

# --- Argument Parsing ---
if [ "$#" -eq 0 ]; then
    usage
    log_message "No arguments provided. Displayed usage and exited."
    exit 1
fi

# Mode 1: Chmod Utility
if [[ "$1" == "--chmod-sh" ]]; then
    if [ "$#" -ne 1 ]; then
        echo -e "${COLOR_RED}Error: --chmod-sh does not accept additional arguments.${COLOR_NC}"
        usage
        exit 1
    fi
    chmod_sh_recursive
    log_message "Sentinel script finished after chmod_sh_recursive."
    exit 0
fi

# Mode 2: APT Wrapper
log_message "Starting APT Wrapper Mode."

INITIAL_PACKAGES=("$@")
log_message "Initial packages to process for APT: ${INITIAL_PACKAGES[*]}"

# Declare global variables for package state tracking
declare -gA failed_packages_map
declare -gA successful_packages_map
declare -gA alternatives_map
declare -ga FINAL_PACKAGES_TO_INSTALL=()
declare -g APT_OUTPUT_GLOBAL=""
declare -g APT_UPDATED_THIS_RUN=""

# --- Execution Flow ---
execute_apt_install "${INITIAL_PACKAGES[@]}"
EXECUTE_APT_EXIT_CODE=$?

# Only proceed if the dry-run failed, indicating missing packages.
if [ "$EXECUTE_APT_EXIT_CODE" -ne 0 ]; then
    log_message "Dry-run failed. Proceeding to parse APT output and find alternatives."
    
    parse_apt_output "$APT_OUTPUT_GLOBAL"
    
    # Convert associative map keys to simple arrays for easier handling.
    FAILED_PACKAGES_NAMES=(${!failed_packages_map[@]})
    SUCCESSFUL_PACKAGES_NAMES=(${!successful_packages_map[@]})

    log_message "Parsed failed packages: ${FAILED_PACKAGES_NAMES[*]}"
    log_message "Parsed successful packages: ${SUCCESSFUL_PACKAGES_NAMES[*]}"

    if [ "${#FAILED_PACKAGES_NAMES[@]}" -gt 0 ]; then
        find_alternatives "${FAILED_PACKAGES_NAMES[@]}"
    else
        log_message "No failed packages to find alternatives for."
    fi
    
    # Present the findings to the user and ask for confirmation.
    present_solution
    USER_CHOICE_EXIT_CODE=$?
    
    if [ "$USER_CHOICE_EXIT_CODE" -eq 0 ]; then
        log_message "User approved the command."
        execute_final_command
    else
        echo -e "${COLOR_RED}Mission aborted by user.${COLOR_NC}"
        log_message "User declined the command or no command was proposed."
    fi
else
    # This block should not be reached if execute_apt_install exits on success,
    # but is kept as a safeguard.
    log_message "Dry-run was successful. Script should have exited earlier."
fi

log_message "Sentinel script finished."
exit 0