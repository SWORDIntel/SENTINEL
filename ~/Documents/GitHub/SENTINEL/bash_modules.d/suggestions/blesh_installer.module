#!/usr/bin/env bash
# SENTINEL - BLE.sh Installation and Configuration Module
# This module handles the proper installation and setup of BLE.sh

#===========================================================================
# SENTINEL MODULE METADATA
# version="1.0.0"
# description="Installs and configures BLE.sh (Bash Line Editor) for enhanced autocomplete"
# dependencies=("git" "make")
# author="SENTINEL"
# hmac="auto-generated-on-next-sentinel-verify"
#===========================================================================

# Ensure stderr is preserved for debugging
exec 3>&2

# Logging functions
_blesh_installer_log() {
    local level="$1"
    local message="$2"
    echo "[BLE.sh Installer] ($level) $message" >&3
}

_blesh_installer_debug() {
    [[ "${DEBUG_BLESH:-0}" == "1" ]] && _blesh_installer_log "DEBUG" "$1"
}

_blesh_installer_info() {
    _blesh_installer_log "INFO" "$1"
}

_blesh_installer_error() {
    _blesh_installer_log "ERROR" "$1"
}

# Check dependencies
check_dependencies() {
    _blesh_installer_debug "Checking dependencies"
    local missing_deps=()
    
    if ! command -v git &>/dev/null; then
        missing_deps+=("git")
    fi
    
    if ! command -v make &>/dev/null; then
        missing_deps+=("make")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        _blesh_installer_error "Missing dependencies: ${missing_deps[*]}"
        _blesh_installer_info "Please install the missing dependencies and try again."
        return 1
    fi
    
    return 0
}

# Setup the loader script
setup_loader_script() {
    local loader_dir="${HOME}/.sentinel"
    local loader_path="${loader_dir}/blesh_loader.sh"
    
    _blesh_installer_debug "Setting up loader script at $loader_path"
    
    # Create sentinel directory if it doesn't exist
    mkdir -p "$loader_dir" 2>/dev/null || {
        _blesh_installer_error "Failed to create directory $loader_dir"
        return 1
    }
    
    # Create the loader script
    cat > "$loader_path" << 'EOL'
#!/usr/bin/env bash
# SENTINEL BLE.sh Integration Loader
# Robust loading mechanism with enhanced error recovery

# Configuration
DEBUG_BLESH="${DEBUG_BLESH:-0}"
[[ "$DEBUG_BLESH" == "1" ]] && set -x

# Log function for consistent output
_blesh_log() {
    local level="$1"
    local message="$2"
    echo "[BLE.sh Loader] ($level) $message" >&2
}

# Debug logging wrapper
_blesh_debug() {
    [[ "$DEBUG_BLESH" == "1" ]] && _blesh_log "DEBUG" "$1"
}

# Info logging wrapper
_blesh_info() {
    _blesh_log "INFO" "$1"
}

# Error logging wrapper
_blesh_error() {
    _blesh_log "ERROR" "$1"
}

# Declare function first to ensure availability
function _sentinel_load_attempt() {
    local method="$1"
    _blesh_debug "Attempting to load BLE.sh using $method method"
    
    case "$method" in
        direct)
            if source ~/.local/share/blesh/ble.sh 2>/dev/null; then
                _blesh_debug "Direct source command succeeded"
            else
                _blesh_debug "Direct source command failed with code $?"
            fi
            ;;
        cat)
            if source <(cat ~/.local/share/blesh/ble.sh 2>/dev/null); then
                _blesh_debug "Cat source command succeeded"
            else
                _blesh_debug "Cat source command failed with code $?"
            fi
            ;;
        eval)
            local content
            content=$(cat ~/.local/share/blesh/ble.sh 2>/dev/null) || { 
                _blesh_error "Failed to read BLE.sh content"; 
                return 1; 
            }
            if eval "$content"; then
                _blesh_debug "Eval command succeeded"
            else
                _blesh_debug "Eval command failed with code $?"
            fi
            ;;
    esac
    
    # Check if loading was successful
    if type -t ble-bind &>/dev/null; then
        _blesh_info "BLE.sh loaded successfully using $method method"
        return 0
    fi
    _blesh_debug "Loading failed using $method method"
    return 1
}

# Check for permissions and ownership issues
_check_permissions() {
    local blesh_dir=~/.local/share/blesh
    local cache_dir=~/.cache/blesh
    
    if [[ -d "$blesh_dir" ]]; then
        _blesh_debug "BLE.sh directory permissions: $(ls -ld "$blesh_dir")"
        _blesh_debug "BLE.sh script permissions: $(ls -l "$blesh_dir/ble.sh" 2>/dev/null || echo "File not found")"
    fi
    
    if [[ -d "$cache_dir" ]]; then
        _blesh_debug "Cache directory permissions: $(ls -ld "$cache_dir")"
    fi
}

# Check if file exists and is readable
_check_file_readable() {
    local file="$1"
    if [[ -f "$file" ]]; then
        if [[ -r "$file" ]]; then
            _blesh_debug "File $file exists and is readable"
            return 0
        else
            _blesh_error "File $file exists but is not readable"
            return 1
        fi
    else
        _blesh_error "File $file does not exist"
        return 1
    fi
}

# Print basic system info for debugging
_system_info() {
    _blesh_debug "Bash version: $BASH_VERSION"
    _blesh_debug "Current user: $(whoami)"
    _blesh_debug "Installation path: ~/.local/share/blesh"
    _blesh_debug "Cache path: ~/.cache/blesh"
}

# Make function available to subshells if possible
# This uses BASH_ARGV0 to detect Bash 4.4+ where function exporting works reliably
if [[ -n "${BASH_ARGV0-}" ]]; then
    _blesh_debug "Exporting functions using Bash 4.4+ method"
    export -f _sentinel_load_attempt _blesh_log _blesh_debug _blesh_info _blesh_error 2>/dev/null
else
    _blesh_debug "Using older Bash version, function exporting may be limited"
    export -f _sentinel_load_attempt 2>/dev/null || true
fi

# Display system information if debugging
if [[ "$DEBUG_BLESH" == "1" ]]; then
    _system_info
    _check_permissions
fi

# Ensure critical directories exist with proper permissions
mkdir -p ~/.cache/blesh/decode.readline 2>/dev/null || _blesh_error "Failed to create cache directory"
chmod -R 755 ~/.cache/blesh 2>/dev/null || _blesh_error "Failed to set permissions on cache directory"

# Clean up any stale cache files that might cause issues
_blesh_debug "Cleaning stale cache files"
find ~/.cache/blesh -name "*.part" -type f -delete 2>/dev/null
find ~/.cache/blesh -name "*.lock" -type f -delete 2>/dev/null
find ~/.cache/blesh -name "decode.readline.*.txt*" -type f -delete 2>/dev/null

# Install BLE.sh if not found
if [[ ! -f ~/.local/share/blesh/ble.sh ]]; then
    if [[ "${SENTINEL_BLE_AUTO_INSTALL:-1}" == "1" ]]; then
        _blesh_info "Installing BLE.sh..."
        
        # Create temporary directory for installation
        TMPDIR=$(mktemp -d /tmp/bleinstall.XXXXXX)
        
        if command -v git &>/dev/null; then
            ( cd "$TMPDIR" && \
              git clone --recursive --depth 1 https://github.com/akinomyoga/ble.sh.git . && \
              make install PREFIX=~/.local )
            rm -rf "$TMPDIR"
            _blesh_info "BLE.sh installed successfully."
        else
            _blesh_error "Cannot install BLE.sh - git not available"
            rm -rf "$TMPDIR"
        fi
    else
        _blesh_error "BLE.sh not found at ~/.local/share/blesh/ble.sh"
    fi
fi

# Main loading logic
if [[ -f ~/.local/share/blesh/ble.sh ]]; then
    _check_file_readable ~/.local/share/blesh/ble.sh
    
    # First try direct loading (most reliable method)
    if _sentinel_load_attempt "direct"; then
        export SENTINEL_BLESH_LOADED=1
    # Fall back to alternative methods if direct loading fails
    elif _sentinel_load_attempt "cat"; then
        export SENTINEL_BLESH_LOADED=1
    elif _sentinel_load_attempt "eval"; then
        export SENTINEL_BLESH_LOADED=1
    else
        _blesh_error "All BLE.sh loading methods failed. Using standard completion."
        [[ -f /etc/bash_completion ]] && source /etc/bash_completion
        export SENTINEL_BLESH_LOADED=0
    fi
    
    # Verify loading was successful
    if type -t ble-bind &>/dev/null; then
        _blesh_info "BLE.sh successfully detected in environment"
    else
        _blesh_error "BLE.sh functions not detected in environment despite successful load attempt"
        export SENTINEL_BLESH_LOADED=0
    fi
    
    # Configure BLE.sh if loaded successfully
    if [[ "$SENTINEL_BLESH_LOADED" == "1" ]] && [[ "${SENTINEL_BLE_AUTO_CONFIGURE:-1}" == "1" ]]; then
        _blesh_debug "Configuring BLE.sh options"
        # Use || true to prevent failures in case functions aren't properly defined
        bleopt complete_auto_delay=100 2>/dev/null || true
        bleopt complete_auto_complete=1 2>/dev/null || true
        bleopt highlight_auto_completion='fg=242' 2>/dev/null || true
        ble-bind -m auto_complete -f right 'auto_complete/accept-line' 2>/dev/null || true
    fi
else
    _blesh_error "BLE.sh installation not found at ~/.local/share/blesh/ble.sh"
    [[ -f /etc/bash_completion ]] && source /etc/bash_completion
    export SENTINEL_BLESH_LOADED=0
fi

# Final status verification
if [[ "$SENTINEL_BLESH_LOADED" == "1" ]]; then
    if ! type -t ble-bind &>/dev/null; then
        _blesh_error "Inconsistent state: SENTINEL_BLESH_LOADED=1 but ble-bind not found"
        export SENTINEL_BLESH_LOADED=0
    fi
fi

# Debug output
_blesh_info "BLE.sh loader finished. Status: $SENTINEL_BLESH_LOADED"
EOL

    # Make the loader executable
    chmod +x "$loader_path" || {
        _blesh_installer_error "Failed to make loader script executable"
        return 1
    }
    
    _blesh_installer_info "Loader script created at $loader_path"
    return 0
}

# Install BLE.sh
install_blesh() {
    local install_dir="${HOME}/.local/share/blesh"
    
    _blesh_installer_debug "Installing BLE.sh to $install_dir"
    
    # Create temporary directory for installation
    local tmp_dir
    tmp_dir=$(mktemp -d /tmp/bleinstall.XXXXXX) || {
        _blesh_installer_error "Failed to create temporary directory"
        return 1
    }
    
    # Clone BLE.sh repository
    _blesh_installer_info "Cloning BLE.sh repository..."
    if ! git clone --recursive --depth 1 https://github.com/akinomyoga/ble.sh.git "$tmp_dir"; then
        _blesh_installer_error "Failed to clone BLE.sh repository"
        rm -rf "$tmp_dir"
        return 1
    fi
    
    # Install BLE.sh
    _blesh_installer_info "Installing BLE.sh..."
    (
        cd "$tmp_dir" || exit 1
        if ! make install PREFIX="${HOME}/.local"; then
            _blesh_installer_error "Failed to install BLE.sh"
            return 1
        fi
    )
    
    # Clean up
    rm -rf "$tmp_dir"
    
    # Verify installation
    if [[ ! -f "${install_dir}/ble.sh" ]]; then
        _blesh_installer_error "Installation verification failed"
        return 1
    fi
    
    _blesh_installer_info "BLE.sh installed successfully"
    return 0
}

# Add loader to bashrc postcustom
add_loader_to_bashrc() {
    local postcustom="${HOME}/Documents/GitHub/SENTINEL/bashrc.postcustom"
    
    _blesh_installer_debug "Adding loader to $postcustom"
    
    # Check if the loader is already added
    if grep -q "source.*blesh_loader.sh" "$postcustom"; then
        _blesh_installer_debug "Loader already added to $postcustom"
        return 0
    fi
    
    # Add the loader
    cat >> "$postcustom" << 'EOL'

# Load BLE.sh if available
if [[ -f "${HOME}/.sentinel/blesh_loader.sh" ]]; then
    source "${HOME}/.sentinel/blesh_loader.sh"
fi
EOL
    
    _blesh_installer_info "Loader added to $postcustom"
    return 0
}

# Main function
blesh_installer_main() {
    _blesh_installer_info "Starting BLE.sh installation and setup"
    
    # Check dependencies
    if ! check_dependencies; then
        return 1
    fi
    
    # Setup loader script
    if ! setup_loader_script; then
        return 1
    fi
    
    # Check if BLE.sh is already installed
    if [[ ! -f "${HOME}/.local/share/blesh/ble.sh" ]]; then
        # Install BLE.sh
        if ! install_blesh; then
            return 1
        fi
    else
        _blesh_installer_info "BLE.sh is already installed"
    fi
    
    # Add loader to bashrc postcustom
    if ! add_loader_to_bashrc; then
        return 1
    fi
    
    _blesh_installer_info "BLE.sh installation and setup completed successfully"
    _blesh_installer_info "Please restart your shell or run 'source ~/.sentinel/blesh_loader.sh' to activate"
    
    return 0
}

# Run the installer if not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    blesh_installer_main "$@"
    exit $?
fi

# Export functions
export -f blesh_installer_main 2>/dev/null || true 