#!/usr/bin/env bash
# Load all completion files recursively

# Function to load completion files from a directory recursively
load_completions_recursive() {
	local dir="$1"
	local debug="${2:-0}"  # 0=quiet, 1=debug output
	
	if [[ "$debug" == "1" ]]; then
		echo "DEBUG: Loading completion files from $dir"
	fi
	
	# First, load files in the current directory
	if [[ -d "$dir" ]]; then
		for bashcomp in "$dir"/*; do
			if [[ -f "$bashcomp" && -r "$bashcomp" ]]; then
				[[ "$debug" == "1" ]] && echo "DEBUG: Loading completion file $bashcomp"
				source "$bashcomp"
			fi
		done
		
		# Then recursively process subdirectories
		for subdir in "$dir"/*; do
			if [[ -d "$subdir" ]]; then
				[[ "$debug" == "1" ]] && echo "DEBUG: Processing subdirectory $subdir"
				load_completions_recursive "$subdir" "$debug"
			fi
		done
	else
		[[ "$debug" == "1" ]] && echo "DEBUG: Directory $dir does not exist or is not readable"
	fi
}

# Load all completion files recursively
load_completions_recursive "${HOME}/.bash_completion.d"

# Legacy support for old method
#for bashcomp in ${HOME}/.bash_completion.d/*; do
#	source $bashcomp
#done

unset bashcomp

# Create a backup of both configs
# cp ~/.sentinel/sentinel_config.sh ~/.sentinel/sentinel_config.sh.backup
# cp ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh.backup

# First, verify both files exist
# ls -la ~/.sentinel/sentinel_config.sh
# ls -la ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh

# Remove the secondary config file
# rm ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh

# Create a proper symlink
# ln -sf ~/.sentinel/sentinel_config.sh ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh

# Verify the symlink was created correctly
# ls -la ~/Documents/GitHub/SENTINEL/bash_modules.d/suggestions/sentinel_config.sh

# Create the installation directory if it doesn't exist
# mkdir -p ~/.local/share/blesh

# Clone and install BLE.sh
# git clone --recursive --depth 1 https://github.com/akinomyoga/ble.sh.git /tmp/blesh
# cd /tmp/blesh
# make install PREFIX=~/.local

# Clean up
# cd ~
# rm -rf /tmp/blesh

# First, check if the file exists
# ls -la ~/.sentinel/blesh_loader.sh

# COMMENTED OUT: Make a modification to ensure the function is exposed properly
# This was causing conflicts with the new simpler loader
# cat > ~/.sentinel/blesh_loader.sh << 'EOF'
# #!/usr/bin/env bash
# # SENTINEL ble.sh integration loader with enhanced error recovery
# 
# # Ensure the function is exported and available
# export -f _sentinel_load_attempt 2>/dev/null || true
# 
# # Set error handling and debugging options
# set -o pipefail
# export _ble_suppress_stderr=1
# 
# # Helper function for ble.sh loading attempts (redefine to ensure it's available)
# _sentinel_load_attempt() {
#     local method="$1"
#     echo "Attempting to load BLE.sh using $method method"
#     
#     case "$method" in
#         direct)
#             source ~/.local/share/blesh/ble.sh 2>/dev/null
#             ;;
#         cat)
#             source <(cat ~/.local/share/blesh/ble.sh) 2>/dev/null
#             ;;
#         eval)
#             eval "$(cat ~/.local/share/blesh/ble.sh)" 2>/dev/null
#             ;;
#     esac
#     
#     # Check if loading was successful
#     if type -t ble-bind &>/dev/null; then
#         echo "BLE.sh loaded successfully using $method method"
#         return 0
#     fi
#     return 1
# }
# 
# # Make the function available to other scripts
# export -f _sentinel_load_attempt
# 
# # Ensure cache directory exists with proper permissions
# mkdir -p ~/.cache/blesh 2>/dev/null
# chmod 755 ~/.cache/blesh 2>/dev/null
# 
# # Clean up any lock files that might cause issues
# find ~/.cache/blesh -name "*.lock" -delete 2>/dev/null
# find ~/.cache/blesh -name "*.part" -delete 2>/dev/null
# 
# # Check if ble.sh exists
# if [[ -f ~/.local/share/blesh/ble.sh ]]; then
#     # Try each loading method in sequence until one works
#     if _sentinel_load_attempt "direct" ||
#        _sentinel_load_attempt "cat" ||
#        _sentinel_load_attempt "eval"; then
#         # Success - initialize key features
#         bleopt complete_auto_delay=100 2>/dev/null
#         bleopt complete_auto_complete=1 2>/dev/null
#         bleopt highlight_auto_completion='fg=242' 2>/dev/null
#     else
#         echo "Warning: All methods to load ble.sh failed. Using basic autocompletion instead."
#         # Load bash standard completion as fallback
#         [[ -f /etc/bash_completion ]] && source /etc/bash_completion
#     fi
# else
#     echo "Warning: ble.sh not found at ~/.local/share/blesh/ble.sh"
#     [[ -f /etc/bash_completion ]] && source /etc/bash_completion
# fi
# EOF
# 
# chmod +x ~/.sentinel/blesh_loader.sh

# Add the BLE.sh loader to your postcustom file
# cat >> ~/Documents/GitHub/SENTINEL/bashrc.postcustom << 'EOF'
# 
# # Load BLE.sh if available
# if [[ -f ~/.sentinel/blesh_loader.sh ]]; then
#     source ~/.sentinel/blesh_loader.sh
# fi
# 
# # Lazy loading for development tools
# if [[ "${CONFIG[LAZY_LOAD]}" == "1" || "$U_LAZY_LOAD" == "1" ]]; then
#     # Lazy load pyenv
#     function pyenv() {
#         unset -f pyenv
#         if [[ -d "$HOME/.pyenv" ]]; then
#             export PYENV_ROOT="$HOME/.pyenv"
#             export PATH="$PYENV_ROOT/bin:$PATH"
#             eval "$(command pyenv init -)"
#             eval "$(command pyenv virtualenv-init -)"
#             pyenv "$@"
#         else
#             echo "pyenv is not installed"
#             return 1
#         fi
#     }
#     
#     # Lazy load NVM
#     function nvm() {
#         unset -f nvm
#         if [[ -d "$HOME/.nvm" ]]; then
#             export NVM_DIR="$HOME/.nvm"
#             [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
#             [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
#             nvm "$@"
#         else
#             echo "nvm is not installed"
#             return 1
#         fi
#     }
#     
#     # Add these for common commands to trigger the lazy loading
#     function node() {
#         unset -f node
#         nvm >/dev/null 2>&1
#         node "$@"
#     }
#     
#     function npm() {
#         unset -f npm
#         nvm >/dev/null 2>&1
#         npm "$@"
#     }
#     
#     function python() {
#         unset -f python
#         pyenv >/dev/null 2>&1
#         python "$@"
#     }
#     
#     function pip() {
#         unset -f pip
#         pyenv >/dev/null 2>&1
#         pip "$@"
#     }
# fi
# EOF

# Source the BLE.sh loader directly
# source ~/.sentinel/blesh_loader.sh

# source ~/.bashrc

# type _sentinel_load_attempt

# Add the following line at the end of your .bashrc file
# echo '[ -f ~/.sentinel/blesh_loader.sh ] && source ~/.sentinel/blesh_loader.sh' >> ~/.bashrc

# Ensure BLE.sh files are executable
# chmod -R +x ~/.local/share/blesh

# Check for pyenv
# ls -la ~/.pyenv

# Check for NVM
# ls -la ~/.nvm

# Install pyenv
# curl https://pyenv.run | bash

# Install NVM
# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

# echo 'export U_LAZY_LOAD=1' >> ~/Documents/GitHub/SENTINEL/bashrc.postcustom

# Source the loader to make it available immediately
# source ~/.sentinel/blesh_loader.sh

# Source bashrc to pick up all changes
# source ~/.bashrc

# Verify the function is available
# type _sentinel_load_attempt

# Add after copying config_helper in install.sh (around line 207)

# Fix configuration file duplication
# echo -e "${BLUE}Setting up centralized configuration...${NC}"
# CONFIG_DIR="${HOME}/.sentinel"
# MAIN_CONFIG="${CONFIG_DIR}/sentinel_config.sh"
# SECONDARY_CONFIG="${SCRIPT_DIR}/bash_modules.d/suggestions/sentinel_config.sh"

# Create the main config if it doesn't exist
# if [[ ! -f "$MAIN_CONFIG" ]]; then
#     # Source config_loader to create default config
#     if [[ -f "${SCRIPT_DIR}/bash_modules.d/suggestions/config_loader.module" ]]; then
#         source "${SCRIPT_DIR}/bash_modules.d/suggestions/config_loader.module"
#         echo -e "${GREEN}✓ Created default configuration file${NC}"
#     else
#         echo -e "${RED}× Failed to create configuration file (config_loader.module not found)${NC}"
#     fi
# fi

# Always ensure config has lazy loading enabled
# if [[ -f "$MAIN_CONFIG" ]]; then
#     # Enable lazy loading explicitly
#     if grep -q "U_LAZY_LOAD=" "$MAIN_CONFIG"; then
#         sed -i 's/U_LAZY_LOAD=0/U_LAZY_LOAD=1/g' "$MAIN_CONFIG"
#     else
#         echo 'export U_LAZY_LOAD=1' >> "$MAIN_CONFIG"
#     fi
#     echo -e "${GREEN}✓ Lazy loading enabled in configuration${NC}"
# fi

# Handle the secondary config
# if [[ -f "$SECONDARY_CONFIG" ]]; then
#     echo -e "${YELLOW}⚠ Secondary configuration file detected${NC}"
#     echo -e "${GREEN}→${NC} Creating symlink for centralized configuration"
#     
#     # Backup the secondary config
#     cp "$SECONDARY_CONFIG" "${SECONDARY_CONFIG}.bak.$(date +%Y%m%d%H%M%S)"
#     
#     # Remove the file and create a symlink
#     rm -f "$SECONDARY_CONFIG"
#     ln -sf "$MAIN_CONFIG" "$SECONDARY_CONFIG"
#     echo -e "${GREEN}✓ Created symlink: ${SECONDARY_CONFIG} -> ${MAIN_CONFIG}${NC}"
# fi

# Set up BLE.sh
# echo -e "${BLUE}Setting up BLE.sh...${NC}"
# BLE_LOADER="${CONFIG_DIR}/blesh_loader.sh"

# Create the loader with updated function exports
# cat > "$BLE_LOADER" << 'EOL'
# #!/usr/bin/env bash
# # SENTINEL ble.sh integration loader
# 
# # Helper function for ble.sh loading attempts
# function _sentinel_load_attempt() {
#     local method="$1"
#     
#     case "$method" in
#         direct)
#             source ~/.local/share/blesh/ble.sh 2>/dev/null
#             ;;
#         cat)
#             source <(cat ~/.local/share/blesh/ble.sh) 2>/dev/null
#             ;;
#         eval)
#             eval "$(cat ~/.local/share/blesh/ble.sh)" 2>/dev/null
#             ;;
#     esac
#     
#     # Check if loading was successful
#     if type -t ble-bind &>/dev/null; then
#         return 0
#     fi
#     return 1
# }
# 
# # Ensure the function is available to other scripts
# export -f _sentinel_load_attempt 2>/dev/null || true
# 
# # Ensure cache directory exists
# mkdir -p ~/.cache/blesh 2>/dev/null
# chmod 755 ~/.cache/blesh 2>/dev/null
# 
# # Check if ble.sh exists
# if [[ -f ~/.local/share/blesh/ble.sh ]]; then
#     # Try each loading method in sequence
#     if _sentinel_load_attempt "direct" ||
#        _sentinel_load_attempt "cat" ||
#        _sentinel_load_attempt "eval"; then
#         # Success - initialize key features
#         bleopt complete_auto_delay=100 2>/dev/null
#         bleopt complete_auto_complete=1 2>/dev/null
#     else
#         echo "Warning: Failed to load BLE.sh. Using basic completion."
#         [[ -f /etc/bash_completion ]] && source /etc/bash_completion
#     fi
# else
#     # Offer to install BLE.sh
#     if command -v git &>/dev/null && [[ "${SENTINEL_BLE_AUTO_INSTALL:-1}" == "1" ]]; then
#         mkdir -p ~/.local/share
#         git clone --recursive --depth 1 https://github.com/akinomyoga/ble.sh.git /tmp/blesh
#         if [[ -d "/tmp/blesh" ]]; then
#             (cd /tmp/blesh && make install PREFIX=~/.local)
#             rm -rf /tmp/blesh
#             echo "BLE.sh installed successfully. Restart your shell to use it."
#         else
#             echo "Failed to install BLE.sh."
#         fi
#     else
#         echo "BLE.sh not found. Install with: git clone --recursive https://github.com/akinomyoga/ble.sh.git"
#     fi
# fi
# EOL
# 
# chmod +x "$BLE_LOADER"
# echo -e "${GREEN}✓ BLE.sh loader created${NC}"
# 
# # Add loader to bashrc.postcustom
# if ! grep -q "source.*blesh_loader.sh" "${SCRIPT_DIR}/bashrc.postcustom"; then
#     cat >> "${SCRIPT_DIR}/bashrc.postcustom" << EOL
# 
# # Load BLE.sh if available
# if [[ -f \$HOME/.sentinel/blesh_loader.sh ]]; then
#     source \$HOME/.sentinel/blesh_loader.sh
# fi
# EOL
#     echo -e "${GREEN}✓ Added BLE.sh loader to bashrc.postcustom${NC}"
# fi
# 
# # Add development environment lazy loading
# echo -e "${BLUE}Setting up lazy loading for development environments...${NC}"
# if ! grep -q "lazy loading for development tools" "${SCRIPT_DIR}/bashrc.postcustom"; then
#     cat >> "${SCRIPT_DIR}/bashrc.postcustom" << 'EOL'
# 
# # Lazy loading for development tools
# if [[ "${CONFIG[LAZY_LOAD]}" == "1" || "$U_LAZY_LOAD" == "1" ]]; then
#     # Lazy load pyenv if installed or installable
#     function pyenv() {
#         unset -f pyenv
#         if [[ -d "$HOME/.pyenv" ]]; then
#             export PYENV_ROOT="$HOME/.pyenv"
#             export PATH="$PYENV_ROOT/bin:$PATH"
#             eval "$(command pyenv init -)"
#             eval "$(command pyenv virtualenv-init -)"
#             pyenv "$@"
#         elif command -v git &>/dev/null; then
#             echo "pyenv not found. Installing..."
#             git clone https://github.com/pyenv/pyenv.git ~/.pyenv
#             export PYENV_ROOT="$HOME/.pyenv"
#             export PATH="$PYENV_ROOT/bin:$PATH"
#             eval "$(pyenv init -)"
#             echo "pyenv installed. Please run the command again."
#             return 0
#         else
#             echo "pyenv is not installed and git is not available to install it"
#             return 1
#         fi
#     }
#     
#     # Lazy load NVM if installed or installable
#     function nvm() {
#         unset -f nvm
#         if [[ -d "$HOME/.nvm" ]]; then
#             export NVM_DIR="$HOME/.nvm"
#             [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
#             [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
#             nvm "$@"
#         elif command -v curl &>/dev/null; then
#             echo "nvm not found. Installing..."
#             curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
#             export NVM_DIR="$HOME/.nvm"
#             [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
#             echo "nvm installed. Please run the command again."
#             return 0
#         else
#             echo "nvm is not installed and curl is not available to install it"
#             return 1
#         fi
#     }
#     
#     # Convenience wrappers for common commands
#     function node() { unset -f node; nvm >/dev/null 2>&1; node "$@"; }
#     function npm() { unset -f npm; nvm >/dev/null 2>&1; npm "$@"; }
#     function python() { unset -f python; pyenv >/dev/null 2>&1; python "$@"; }
#     function pip() { unset -f pip; pyenv >/dev/null 2>&1; pip "$@"; }
# fi
# EOL
#     echo -e "${GREEN}✓ Added development environment lazy loading to bashrc.postcustom${NC}"
# fi 