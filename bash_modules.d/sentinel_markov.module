#!/usr/bin/env bash
# SENTINEL Markov Module
# Integrates a Markov chain text generator for automated text generation,
# command suggestions, and documentation creation capabilities.

# Module metadata for dependency resolution
SENTINEL_MODULE_DESCRIPTION="Markov text generation module"
SENTINEL_MODULE_VERSION="1.0.0"
SENTINEL_MODULE_DEPENDENCIES="logging config_cache"

# Exit if Python is not available
if ! command -v python3 &>/dev/null; then
    echo "Warning: Python 3 not found. SENTINEL Markov features disabled."
    return 1
fi

# HMAC security verification when loader available
if declare -F sentinel_verify_hmac >/dev/null; then
    if ! sentinel_verify_hmac "${BASH_SOURCE[0]}"; then
        echo "ERROR: HMAC verification failed for ${BASH_SOURCE[0]}"
        echo "Security breach detected. Refusing to load module."
        return 1
    fi
fi

# Log module loading if logging available
if declare -F sentinel_log >/dev/null; then
    sentinel_log "Loading Markov module..."
fi

# Define paths
SENTINEL_MARKOV_DIR="${HOME}/.sentinel/markov"
SENTINEL_MARKOV_SCRIPT="${PROJECT_ROOT:-$HOME/Documents/GitHub/SENTINEL}/markov_generator.py"
SENTINEL_MARKOV_CORPUS="${SENTINEL_MARKOV_DIR}/corpus"
SENTINEL_MARKOV_CONFIG="${SENTINEL_MARKOV_DIR}/config.json"
SENTINEL_MARKOV_CACHE="${SENTINEL_MARKOV_DIR}/cache"
SENTINEL_MARKOV_OUTPUT="${SENTINEL_MARKOV_DIR}/output"

# Ensure the directory structure exists
function __sentinel_markov_ensure_dirs() {
    mkdir -p "${SENTINEL_MARKOV_DIR}/"{corpus,cache,output}
    chmod 700 "${SENTINEL_MARKOV_DIR}"
    chmod 700 "${SENTINEL_MARKOV_DIR}/"{corpus,cache,output}
}

# Initialize the environment
function __sentinel_markov_init() {
    __sentinel_markov_ensure_dirs
    
    # Check if markov generator script exists
    if [[ ! -f "${SENTINEL_MARKOV_SCRIPT}" ]]; then
        if declare -F sentinel_log >/dev/null; then
            sentinel_log "ERROR: Markov generator script not found at ${SENTINEL_MARKOV_SCRIPT}"
        else
            echo "ERROR: Markov generator script not found at ${SENTINEL_MARKOV_SCRIPT}"
        fi
        return 1
    fi
    
    # Ensure the script is executable
    chmod +x "${SENTINEL_MARKOV_SCRIPT}"
    
    # Check required Python packages
    if ! python3 -c "import importlib.util; print(all(importlib.util.find_spec(pkg) is not None for pkg in ['markovify', 'numpy', 'tqdm', 'unidecode']))" 2>/dev/null | grep -q "True"; then
        if declare -F sentinel_log >/dev/null; then
            sentinel_log "WARNING: Required Python packages not installed for Markov generator"
            sentinel_log "Run: pip install markovify numpy tqdm unidecode"
        else
            echo "WARNING: Required Python packages not installed for Markov generator"
            echo "Run: pip install markovify numpy tqdm unidecode"
        fi
    fi
    
    # Create initial config if it doesn't exist
    if [[ ! -f "${SENTINEL_MARKOV_CONFIG}" ]]; then
        cat > "${SENTINEL_MARKOV_CONFIG}" <<EOF
{
    "state_size": 2,
    "default_count": 5,
    "max_length": 280,
    "retention_ratio": 1.0,
    "extensions": [".txt", ".md", ".rst"],
    "security": {
        "max_file_size": 10485760,
        "validate_input": true,
        "log_level": "info"
    }
}
EOF
        chmod 600 "${SENTINEL_MARKOV_CONFIG}"
    fi
    
    return 0
}

# Main function to generate text
function sentinel_markov() {
    local subcommand="${1:-help}"
    shift 2>/dev/null
    
    # Initialize the environment
    __sentinel_markov_init || return 1
    
    case "${subcommand}" in
        generate|gen)
            local input_file=""
            local output_file=""
            local state_size="2"
            local count="5"
            local max_length="280"
            
            # Parse options
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -i|--input)
                        input_file="$2"
                        shift 2
                        ;;
                    -o|--output)
                        output_file="$2"
                        shift 2
                        ;;
                    -s|--state-size)
                        state_size="$2"
                        shift 2
                        ;;
                    -c|--count)
                        count="$2"
                        shift 2
                        ;;
                    -l|--max-length)
                        max_length="$2"
                        shift 2
                        ;;
                    *)
                        echo "Unknown option: $1"
                        return 1
                        ;;
                esac
            done
            
            # Validate input
            if [[ -z "${input_file}" ]]; then
                echo "Error: Input file is required"
                echo "Usage: sentinel_markov generate -i input_file [-o output_file] [-s state_size] [-c count] [-l max_length]"
                return 1
            fi
            
            # Generate text
            if [[ -z "${output_file}" ]]; then
                output_file="${SENTINEL_MARKOV_OUTPUT}/$(basename "${input_file}" | cut -d. -f1)_$(date +%Y%m%d_%H%M%S).txt"
            fi
            
            echo "Generating text from ${input_file} with state size ${state_size}, count ${count}, max length ${max_length}"
            echo "Output will be written to ${output_file}"
            
            python3 "${SENTINEL_MARKOV_SCRIPT}" --input "${input_file}" --output "${output_file}" \
                --state-size "${state_size}" --count "${count}" --max-length "${max_length}"
            
            if [[ $? -eq 0 ]]; then
                echo "Text generation complete. Output saved to ${output_file}"
                echo "---"
                cat "${output_file}"
                echo "---"
            else
                echo "Error generating text. Check logs for details."
                return 1
            fi
            ;;
            
        corpus|add)
            local file="$1"
            
            if [[ -z "${file}" ]]; then
                echo "Error: File path is required"
                echo "Usage: sentinel_markov corpus file_path"
                return 1
            fi
            
            # Check if file exists
            if [[ ! -f "${file}" ]]; then
                echo "Error: File not found: ${file}"
                return 1
            fi
            
            # Copy to corpus directory
            local dest="${SENTINEL_MARKOV_CORPUS}/$(basename "${file}")"
            cp "${file}" "${dest}"
            chmod 600 "${dest}"
            
            echo "Added ${file} to Markov corpus"
            echo "Total corpus files: $(find "${SENTINEL_MARKOV_CORPUS}" -type f | wc -l)"
            ;;
            
        list)
            echo "Corpus files:"
            find "${SENTINEL_MARKOV_CORPUS}" -type f -name "*.txt" | sort | while read -r f; do
                local size=$(du -h "$f" | cut -f1)
                local lines=$(wc -l < "$f")
                echo "- $(basename "$f") (${size}, ${lines} lines)"
            done
            ;;
            
        clean)
            echo "Cleaning Markov cache and outputs..."
            rm -f "${SENTINEL_MARKOV_CACHE}"/* "${SENTINEL_MARKOV_OUTPUT}"/*
            echo "Cache and outputs cleaned"
            ;;
            
        corpus-stats)
            echo "Corpus statistics:"
            local total_files=$(find "${SENTINEL_MARKOV_CORPUS}" -type f | wc -l)
            local total_size=$(du -sh "${SENTINEL_MARKOV_CORPUS}" | cut -f1)
            local total_lines=$(find "${SENTINEL_MARKOV_CORPUS}" -type f -exec cat {} \; | wc -l)
            local total_words=$(find "${SENTINEL_MARKOV_CORPUS}" -type f -exec cat {} \; | wc -w)
            
            echo "Files: ${total_files}"
            echo "Total size: ${total_size}"
            echo "Lines: ${total_lines}"
            echo "Words: ${total_words}"
            ;;
            
        help|*)
            echo "SENTINEL Markov Text Generator"
            echo ""
            echo "Usage: sentinel_markov <command> [options]"
            echo ""
            echo "Commands:"
            echo "  generate, gen      Generate text from input file"
            echo "  corpus, add        Add a file to the corpus"
            echo "  list               List corpus files"
            echo "  clean              Clean cache and output files"
            echo "  corpus-stats       Show corpus statistics"
            echo "  help               Show this help message"
            echo ""
            echo "Generate Options:"
            echo "  -i, --input        Input file path"
            echo "  -o, --output       Output file path"
            echo "  -s, --state-size   Markov chain state size (default: 2)"
            echo "  -c, --count        Number of sentences to generate (default: 5)"
            echo "  -l, --max-length   Maximum sentence length (default: 280)"
            echo ""
            echo "Examples:"
            echo "  sentinel_markov generate -i myfile.txt -s 3 -c 10"
            echo "  sentinel_markov corpus ~/Documents/sample.txt"
            echo "  sentinel_markov list"
            ;;
    esac
    
    return 0
}

# Integration with SENTINEL command prediction (if available)
if declare -F sentinel_predict >/dev/null; then
    function __sentinel_markov_predict() {
        local current_command="$1"
        local corpus_file="${SENTINEL_MARKOV_CORPUS}/commands.txt"
        
        # Ensure the command corpus exists
        if [[ ! -f "${corpus_file}" ]]; then
            # Create initial commands corpus from history
            HISTTIMEFORMAT= history | cut -c 8- | grep -v "^sentinel_markov" > "${corpus_file}"
            chmod 600 "${corpus_file}"
        fi
        
        # Generate suggestions
        local suggestions=$(python3 "${SENTINEL_MARKOV_SCRIPT}" --input "${corpus_file}" \
            --state-size 1 --count 3 --max-length 80 2>/dev/null)
        
        if [[ -n "${suggestions}" ]]; then
            echo "Markov suggestions:"
            echo "${suggestions}" | while read -r line; do
                echo "  ${line}"
            done
        fi
    }
    
    # Register with prediction system
    sentinel_predict_register_handler "__sentinel_markov_predict"
fi

# Export the main function
export -f sentinel_markov

# Add completion if available
if declare -F __sentinel_complete >/dev/null; then
    __sentinel_complete sentinel_markov "generate gen corpus add list clean corpus-stats help"
fi

# Log successful load
if declare -F sentinel_log >/dev/null; then
    sentinel_log "Markov module loaded successfully"
fi 