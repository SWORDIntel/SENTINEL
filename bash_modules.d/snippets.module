#!/usr/bin/env bash
# SENTINEL - Snippet Management Module
# Version: 2.0.0
# Description: Provides secure, HMAC-verified snippet expansion functionality
# Dependencies: ble.sh (optional, enhances functionality), hmac.module
# Maintainer: SENTINEL Team

# Prevent double loading
[[ -n "${_SENTINEL_SNIPPETS_LOADED}" ]] && return 0
export _SENTINEL_SNIPPETS_LOADED=1

# Set strict error handling
set -o pipefail

# FEATURE: Custom Snippet Expansion with HMAC security
# Enables secure command snippet storage and expansion with cryptographic verification

# Register all available snippets
_sentinel_register_snippets() {
    local snippets_dir=~/.sentinel/autocomplete/snippets
    
    # Create snippets directory if it doesn't exist
    mkdir -p "$snippets_dir"
    
    # Default snippets if none exist
    if [[ $(find "$snippets_dir" -type f -name "*.snippet" | wc -l) -eq 0 ]]; then
        # Create some default secure snippets
        cat > "$snippets_dir/secure_curl.snippet" << 'EOF'
curl --tlsv1.2 --proto =https --location --silent --show-error -H "Authorization: Bearer $(sentinel_generate_secure_token)" "$1"
EOF
        
        cat > "$snippets_dir/secure_ssh.snippet" << 'EOF'
ssh -o HostKeyAlgorithms=ssh-ed25519 -o KexAlgorithms=curve25519-sha256 -o MACs=hmac-sha2-512 "$@"
EOF
        
        cat > "$snippets_dir/secure_rsync.snippet" << 'EOF'
rsync -avz --progress -e "ssh -o HostKeyAlgorithms=ssh-ed25519 -o KexAlgorithms=curve25519-sha256" "$@"
EOF

        # Create additional security-focused snippets
        cat > "$snippets_dir/secure_wget.snippet" << 'EOF'
wget --secure-protocol=TLSv1_2 --https-only --no-check-certificate "$1"
EOF

        cat > "$snippets_dir/secure_mount.snippet" << 'EOF'
mount -o nosuid,noexec,nodev "$1" "$2"
EOF

        cat > "$snippets_dir/secure_grep.snippet" << 'EOF'
grep -E --color=auto -I "$1" "${@:2}"
EOF

        # Compute and save HMAC for default snippets
        for file in "$snippets_dir"/*.snippet; do
            local content=$(<"$file")
            local hash=$(sentinel_generate_hmac "$content")
            echo "$hash" > "${file%.snippet}.hash"
        done
    fi
    
    # Register all snippets
    for snippet in "$snippets_dir"/*.snippet; do
        [[ -f "$snippet" ]] || continue
        
        local snippet_name=$(basename "$snippet" .snippet)
        local snippet_content=$(<"$snippet")
        
        # Don't register if BLE.sh is not available
        if ! type -t ble-sabbrev &>/dev/null; then
            _snippets_log_warning "BLE.sh not available - snippet registration skipped: $snippet_name"
            continue
        fi
        
        # Register snippet with HMAC verification
        ble-sabbrev "snippet:$snippet_name=# HMAC-verified snippet: $snippet_name
if _sentinel_verify_snippet \"$snippet_name\"; then
  $snippet_content
else
  echo \"Snippet verification failed: $snippet_name\"
  return 1
fi"
    done
}

# Verify snippet hasn't been tampered with
_sentinel_verify_snippet() {
    local snippet_name="$1"
    local snippet_file=~/.sentinel/autocomplete/snippets/$snippet_name.snippet
    
    if [[ ! -f "$snippet_file" ]]; then
        return 1
    fi
    
    # Get content and verify using the HMAC module
    local content=$(<"$snippet_file")
    local hash_file=~/.sentinel/autocomplete/snippets/$snippet_name.hash
    
    if [[ -f "$hash_file" ]]; then
        local stored_hash=$(<"$hash_file")
        if sentinel_verify_hmac "$content" "$stored_hash"; then
            return 0
        fi
        _snippets_log_error "Snippet verification failed (hash mismatch): $snippet_name"
        return 1
    else
        # No hash file, create one
        local new_hash=$(sentinel_generate_hmac "$content")
        echo "$new_hash" > "$hash_file"
        return 0
    fi
}

# Register snippet command for users to create new snippets
_sentinel_snippet_add() {
    local name="$1"
    local content="$2"
    
    if [[ -z "$name" || -z "$content" ]]; then
        echo "Usage: sentinel_snippet_add <name> <command>"
        return 1
    fi
    
    # Validate name (alphanumeric and underscores only)
    if [[ ! "$name" =~ ^[a-zA-Z0-9_]+$ ]]; then
        echo "Error: Snippet name must contain only letters, numbers, and underscores"
        return 1
    fi
    
    # Prevent path traversal
    if [[ "$name" == *"/"* || "$name" == *".."* ]]; then
        echo "Error: Invalid snippet name"
        _snippets_log_error "Attempted path traversal in snippet name: $name"
        return 1
    }
    
    # Create snippets directory if needed
    local snippets_dir=~/.sentinel/autocomplete/snippets
    mkdir -p "$snippets_dir"
    
    # Save snippet
    echo "$content" > "$snippets_dir/$name.snippet"
    
    # Compute and save HMAC using the HMAC module
    local hash=$(sentinel_generate_hmac "$content")
    echo "$hash" > "$snippets_dir/$name.hash"
    
    # Re-register snippets
    _sentinel_register_snippets
    
    echo "Snippet '$name' created and registered."
    echo "Use it by typing: snippet:$name"
}

# Delete an existing snippet
_sentinel_snippet_delete() {
    local name="$1"
    
    if [[ -z "$name" ]]; then
        echo "Usage: sentinel_snippet_delete <name>"
        return 1
    }
    
    # Prevent path traversal
    if [[ "$name" == *"/"* || "$name" == *".."* ]]; then
        echo "Error: Invalid snippet name"
        _snippets_log_error "Attempted path traversal in snippet deletion: $name"
        return 1
    }
    
    local snippets_dir=~/.sentinel/autocomplete/snippets
    local snippet_file="$snippets_dir/$name.snippet"
    local hash_file="$snippets_dir/$name.hash"
    
    # Check if snippet exists
    if [[ ! -f "$snippet_file" ]]; then
        echo "Error: Snippet '$name' not found"
        return 1
    }
    
    # Delete snippet and hash files
    rm -f "$snippet_file" "$hash_file"
    
    # If using ble.sh, remove the abbreviation
    if type -t ble-sabbrev &>/dev/null; then
        ble-sabbrev -r "snippet:$name" 2>/dev/null || true
    fi
    
    echo "Snippet '$name' deleted."
}

# List available snippets
_sentinel_snippet_list() {
    local snippets_dir=~/.sentinel/autocomplete/snippets
    
    if [[ ! -d "$snippets_dir" ]]; then
        echo "No snippets found."
        return 0
    }
    
    local snippets=($(find "$snippets_dir" -name "*.snippet" -type f | sort))
    
    if [[ ${#snippets[@]} -eq 0 ]]; then
        echo "No snippets found."
        return 0
    }
    
    echo -e "\033[1;32mAvailable Snippets:\033[0m"
    echo ""
    
    for snippet in "${snippets[@]}"; do
        local name=$(basename "$snippet" .snippet)
        local content=$(head -1 "$snippet" | cut -c 1-60)
        
        # Check verification status
        if _sentinel_verify_snippet "$name" &>/dev/null; then
            echo -e "\033[1;34msnippet:$name\033[0m \033[1;32m✓\033[0m"
        else
            echo -e "\033[1;34msnippet:$name\033[0m \033[1;31m✗\033[0m (verification failed)"
        fi
        
        # Show snippet content with ellipsis if needed
        if [[ ${#content} -gt 57 ]]; then
            echo "  ${content:0:57}..."
        else
            echo "  $content"
        fi
        echo ""
    done
    
    echo -e "Use snippets by typing the name shown above (e.g., \033[1;34msnippet:secure_curl\033[0m)"
    echo -e "Add new snippets with: \033[1;34msentinel_snippet_add\033[0m <name> <command>"
    echo -e "Delete snippets with: \033[1;34msentinel_snippet_delete\033[0m <name>"
}

# Show details of a specific snippet
_sentinel_snippet_show() {
    local name="$1"
    
    if [[ -z "$name" ]]; then
        echo "Usage: sentinel_snippet_show <name>"
        return 1
    }
    
    # Prevent path traversal
    if [[ "$name" == *"/"* || "$name" == *".."* ]]; then
        echo "Error: Invalid snippet name"
        _snippets_log_error "Attempted path traversal in snippet show: $name"
        return 1
    }
    
    local snippets_dir=~/.sentinel/autocomplete/snippets
    local snippet_file="$snippets_dir/$name.snippet"
    
    # Check if snippet exists
    if [[ ! -f "$snippet_file" ]]; then
        echo "Error: Snippet '$name' not found"
        return 1
    }
    
    # Check verification status
    local verification_status
    if _sentinel_verify_snippet "$name" &>/dev/null; then
        verification_status="\033[1;32mVerified ✓\033[0m"
    else
        verification_status="\033[1;31mVERIFICATION FAILED ✗\033[0m"
    fi
    
    # Display snippet details
    echo -e "\033[1;34mSnippet: $name\033[0m  $verification_status"
    echo -e "\033[1;33mContent:\033[0m"
    echo -e "------------------------------------"
    cat "$snippet_file"
    echo -e "------------------------------------"
    echo -e "Use with: \033[1;34msnippet:$name\033[0m"
}

# Logging functions
_snippets_log_error() {
    local msg="$1"
    mkdir -p ~/.sentinel/logs
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $msg" >> ~/.sentinel/logs/errors-$(date +%Y%m%d).log
}

_snippets_log_warning() {
    local msg="$1"
    mkdir -p ~/.sentinel/logs
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $msg" >> ~/.sentinel/logs/warnings-$(date +%Y%m%d).log
}

# Initialize the snippet management system
sentinel_init_snippets() {
    # Skip if not in interactive shell
    [[ $- != *i* ]] && return 0
    
    # Set up error handling
    set -o pipefail
    
    # Create required directories
    mkdir -p ~/.sentinel/autocomplete/snippets
    
    # Register available snippets
    _sentinel_register_snippets
    
    # Register the user commands
    alias sentinel_snippet_add=_sentinel_snippet_add
    alias sentinel_snippet_delete=_sentinel_snippet_delete
    alias sentinel_snippet_list=_sentinel_snippet_list
    alias sentinel_snippet_show=_sentinel_snippet_show
    
    # Log startup
    _snippets_log_warning "Snippet management system initialized"
    
    return 0
}

# Run initialization
sentinel_init_snippets 