#!/usr/bin/env bash
# SENTINEL OSINT Intelligence Module
# Suggests OSINT tools based on usage patterns and provides a TUI for OSINT workflows

# Check dependencies
SENTINEL_OSINT_ENABLED=0
if command -v python3 &>/dev/null; then
    # Check for required Python packages
    if python3 -c "import numpy, scipy, sklearn, requests, tqdm, npyscreen" &>/dev/null; then
        SENTINEL_OSINT_ENABLED=1
    else
        echo "Warning: Missing Python packages for SENTINEL OSINT."
        echo "Install with: pip install numpy scipy scikit-learn requests tqdm npyscreen"
    fi
else
    echo "Warning: python3 not found. SENTINEL OSINT capabilities disabled."
fi

# Check for LLM availability (reuse from sentinel_ml)
SENTINEL_LLM_AVAILABLE=0
if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
    if python3 -c "import llama_cpp" &>/dev/null; then
        SENTINEL_LLM_AVAILABLE=1
        echo "LLM capabilities available for OSINT module."
    else
        echo "Warning: llama-cpp-python not installed. Install for advanced tool suggestions."
        echo "Install with: pip install llama-cpp-python"
    fi
fi

# Path to OSINT scripts
SENTINEL_OSINT_DIR="$(dirname "$(dirname "${BASH_SOURCE[0]}")")/contrib"
OSINT_DATA_DIR="$HOME/.sentinel/osint"

# Create required directories
mkdir -p "$OSINT_DATA_DIR/repos" 2>/dev/null
mkdir -p "$OSINT_DATA_DIR/models" 2>/dev/null
mkdir -p "$OSINT_DATA_DIR/cache" 2>/dev/null
mkdir -p "$OSINT_DATA_DIR/history" 2>/dev/null

# Track OSINT tool usage
function __sentinel_osint_track() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        local cmd="$1"
        local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        echo "$timestamp|$cmd|$PWD" >> "$OSINT_DATA_DIR/history/usage.log"
    fi
}

# Setup shell hooks to track command usage
function sentinel_osint_init_tracking() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        # List of OSINT tools to track
        local osint_tools=("theHarvester" "sherlock" "spiderfoot" "maltego" "recon-ng" "osrframework" 
                          "metagoofil" "exiftool" "shodan" "fierce" "amass" "subfinder" "gobuster"
                          "wfuzz" "whisper" "recon-all" "emailharvester" "datasploit" "dnsrecon"
                          "osintgram" "twint" "phoneinfoga" "whatweb" "jtr" "hashcat" "sublist3r"
                          "findomain" "holehe" "maigret" "reconftw" "finalrecon")
        
        # Create precmd function to track usage
        for tool in "${osint_tools[@]}"; do
            # Create alias for each tool to track usage
            if command -v "$tool" &>/dev/null; then
                alias "$tool"="__sentinel_osint_track '$tool'; command $tool"
                echo "Tracking OSINT tool: $tool"
            fi
        done
        
        echo "OSINT tool tracking activated."
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Get suggestions based on recent usage
function sentinel_osint_suggest() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            # No argument, suggest based on recent usage
            python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --suggest
        else
            # Suggest tools for a specific task
            echo "Finding OSINT tools for: $1"
            python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --suggest "$1"
        fi
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Search for OSINT tools by data type
function sentinel_osint_search() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            echo "Usage: sentinel_osint_search <data_type>"
            echo "Examples of data types: email, domain, ip, username, phone, social, image"
            return 1
        fi
        
        echo "Searching for OSINT tools that handle: $1"
        python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --search "$1"
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Build OSINT tool database
function sentinel_osint_build() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        echo "Building OSINT tool database..."
        python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --build
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Show statistics about OSINT tool usage
function sentinel_osint_stats() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        echo "OSINT tool usage statistics:"
        python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --stats
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Generate OSINT workflow for a specific investigation
function sentinel_osint_workflow() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            echo "Usage: sentinel_osint_workflow <investigation_type>"
            echo "Example: sentinel_osint_workflow 'person investigation'"
            return 1
        fi
        
        echo "Generating OSINT workflow for: $1"
        python3 "$SENTINEL_OSINT_DIR/sentinel_osint.py" --workflow "$1"
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
    fi
}

# Install dependencies
function sentinel_osint_install_deps() {
    echo "Installing dependencies for SENTINEL OSINT..."
    pip install numpy scipy scikit-learn requests tqdm npyscreen
    
    # Check if installation was successful
    if python3 -c "import numpy, scipy, sklearn, requests, tqdm, npyscreen" &>/dev/null; then
        echo "Core dependencies installed successfully."
        echo "Installing llama-cpp-python for advanced features..."
        pip install llama-cpp-python
        SENTINEL_OSINT_ENABLED=1
    else
        echo "Failed to install some dependencies. Please check pip output for errors."
    fi
}

# Launch TUI interface
function sentinel_osint_tui() {
    if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
        # Check for npyscreen specifically
        if ! python3 -c "import npyscreen" &>/dev/null; then
            echo "TUI dependency 'npyscreen' not found."
            echo "Run 'sentinel_osint_install_deps' to install all dependencies."
            return 1
        fi
        
        echo "Launching OSINT Intelligence TUI..."
        python3 "$SENTINEL_OSINT_DIR/sentinel_osint_tui.py"
    else
        echo "SENTINEL OSINT disabled. Install dependencies first."
        echo "Run 'sentinel_osint_install_deps' to install all dependencies."
    fi
}

# Alias for easier access
alias osint='sentinel_osint_tui'
alias osint-suggest='sentinel_osint_suggest'
alias osint-search='sentinel_osint_search'
alias osint-stats='sentinel_osint_stats'
alias osint-flow='sentinel_osint_workflow'
alias osint-deps='sentinel_osint_install_deps'

# Check if module can be enabled
if [ $SENTINEL_OSINT_ENABLED -eq 1 ]; then
    echo "SENTINEL OSINT module loaded successfully."
    echo "Run 'sentinel_osint_init_tracking' to activate tool tracking."
    if [ $SENTINEL_LLM_AVAILABLE -eq 0 ]; then
        echo "Note: Install llama-cpp-python for advanced suggestion features."
    fi
else
    echo "SENTINEL OSINT module is disabled. Install required dependencies."
fi 