#!/usr/bin/env bash
# SENTINEL Machine Learning Module
# Provides ML-powered command suggestions and autolearning

# Check dependencies
SENTINEL_ML_ENABLED=0
if command -v python3 &>/dev/null; then
    if python3 -c "import markovify" &>/dev/null; then
        SENTINEL_ML_ENABLED=1
    else
        echo "Warning: markovify not installed. Install with: pip install markovify"
        echo "To enable SENTINEL ML capabilities, install required packages."
    fi
else
    echo "Warning: python3 not found. SENTINEL ML capabilities disabled."
fi

# Check for OpenVINO
SENTINEL_OPENVINO_AVAILABLE=0
if [ $SENTINEL_ML_ENABLED -eq 1 ]; then
    if python3 -c "import openvino" &>/dev/null; then
        SENTINEL_OPENVINO_AVAILABLE=1
        echo "OpenVINO detected! Hardware acceleration enabled for SENTINEL ML."
    fi
fi

# Ensure the .sentinel directory exists
if [ ! -d "${HOME}/.sentinel" ]; then
    mkdir -p "${HOME}/.sentinel"
    echo "Created ${HOME}/.sentinel directory"
fi

# Path to ML scripts - use installed script if available
CONTRIB_ML_DIR="$(dirname "$(dirname "${BASH_SOURCE[0]}")")/contrib"
INSTALLED_ML_DIR="${HOME}/.sentinel"

# Check for installed version first
if [ -f "${INSTALLED_ML_DIR}/sentinel_autolearn.py" ]; then
    SENTINEL_ML_DIR="${INSTALLED_ML_DIR}"
else
    SENTINEL_ML_DIR="${CONTRIB_ML_DIR}"
fi

# Initial setup and training
function sentinel_ml_setup() {
    if [ $SENTINEL_ML_ENABLED -eq 1 ]; then
        # Check if script exists
        if [ ! -f "$SENTINEL_ML_DIR/sentinel_autolearn.py" ]; then
            echo "Error: sentinel_autolearn.py not found at $SENTINEL_ML_DIR"
            echo "Please run the SENTINEL installer to set up the ML module."
            return 1
        fi
        
        # Initial training from bash history
        python3 "$SENTINEL_ML_DIR/sentinel_autolearn.py" --learn-history --train
        
        # Source the bash hook
        eval "$(python3 "$SENTINEL_ML_DIR/sentinel_autolearn.py" --setup)"
        
        echo "SENTINEL ML suggestions activated with auto-learning capability."
        if [ $SENTINEL_OPENVINO_AVAILABLE -eq 1 ]; then
            echo "Using hardware acceleration for faster suggestions."
        fi
    else
        echo "SENTINEL ML disabled due to missing dependencies."
        echo "Install markovify with: pip install markovify"
    fi
}

# Manually trigger training
function sentinel_ml_train() {
    if [ $SENTINEL_ML_ENABLED -eq 1 ]; then
        # Check if script exists
        if [ ! -f "$SENTINEL_ML_DIR/sentinel_autolearn.py" ]; then
            echo "Error: sentinel_autolearn.py not found at $SENTINEL_ML_DIR"
            echo "Please run the SENTINEL installer to set up the ML module."
            return 1
        fi
        
        python3 "$SENTINEL_ML_DIR/sentinel_autolearn.py" --train
        echo "SENTINEL ML model retrained with latest command history."
    else
        echo "SENTINEL ML disabled. Install dependencies first."
    fi
}

# Show ML stats
function sentinel_ml_stats() {
    if [ $SENTINEL_ML_ENABLED -eq 1 ]; then
        if [ -f ~/.sentinel_stats.json ]; then
            echo "SENTINEL ML command frequency statistics:"
            python3 -c "
import json
with open('$HOME/.sentinel_stats.json') as f:
    stats = json.load(f)
sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
for cmd, count in sorted_stats[:20]:
    print(f'{cmd:20} {count:5}')
"
        else
            echo "No statistics available yet. Use more commands to generate data."
        fi
    else
        echo "SENTINEL ML disabled. Install dependencies first."
    fi
}

# Register completion for relevant functions
for cmd in findlarge find_big_dirs find_recent find_by_ext; do
    if [ $SENTINEL_ML_ENABLED -eq 1 ]; then
        # Check if autolearn script exists before setting up completion
        if [ -f "$SENTINEL_ML_DIR/sentinel_autolearn.py" ]; then
            complete -C "python3 $SENTINEL_ML_DIR/sentinel_autolearn.py --suggest" $cmd
        fi
    fi
done

# Auto-setup when module loads
sentinel_ml_setup 