#!/usr/bin/env bash
# SENTINEL - Command Chain Prediction Module
# Version: 2.0.0
# Description: Predicts commands likely to be executed next based on usage patterns
# Dependencies: ble.sh (optional, enhances functionality), hmac.module
# Maintainer: SENTINEL Team

# Module dependencies
SENTINEL_MODULE_DEPENDENCIES="logging"

[ -n "$BASH_VERSION" ] || { echo "This script requires bash"; return 0; }
if [ -n "${_SENTINEL_COMMAND_CHAINS_LOADED}" ]; then
    echo "DEBUG: command_chains already loaded"; return 0;
fi
export _SENTINEL_COMMAND_CHAINS_LOADED=1

# Ensure logging is available
if ! type -t sentinel_log_info &>/dev/null; then
    source "${BASH_SOURCE%/*}/logging.module" 2>/dev/null || true
fi
if ! type -t sentinel_log_info &>/dev/null; then
    echo "ERROR: sentinel_log_info not loaded in command_chains";
else
    echo "DEBUG: sentinel_log_info loaded in command_chains";
fi

# Set strict error handling
set -o pipefail

# FEATURE: Command Chain Predictions
# Predicts what commands are likely to be executed next based on usage history
_sentinel_command_chain_predictor() {
    # Directory for storing chain data
    local chain_dir=~/.sentinel/autocomplete/chains
    mkdir -p "$chain_dir"
    
    # Main database file for command chains
    local chain_db="$chain_dir/command_chains.db"
    
    # Create DB if it doesn't exist
    if [[ ! -f "$chain_db" ]]; then
        touch "$chain_db"
    fi
    
    # Get latest commands from history
    _sentinel_update_chain_database() {
        # Read the last 1000 commands from history
        local cmds=$(HISTTIMEFORMAT="" history 1000 | awk '{$1=""; print substr($0,2)}')
        
        # Create/update chain database
        local prev_cmd=""
        echo "$cmds" | while read -r cmd; do
            # Skip empty commands
            [[ -z "$cmd" ]] && continue
            
            # Skip cd commands to prevent noise
            [[ "$cmd" == cd* ]] && { prev_cmd="$cmd"; continue; }
            
            # If we have a previous command, record the chain
            if [[ -n "$prev_cmd" && "$prev_cmd" != "$cmd" ]]; then
                # Extract base commands (first word only)
                local prev_base=$(echo "$prev_cmd" | awk '{print $1}')
                local curr_base=$(echo "$cmd" | awk '{print $1}')
                
                # Skip if either command is a shell builtin or control operator
                if [[ ! "$prev_base" =~ ^(if|for|while|until|case|function|source|\.|exec|eval)$ && 
                      ! "$curr_base" =~ ^(if|for|while|until|case|function|source|\.|exec|eval)$ ]]; then
                    # Record the sequence
                    echo "$prev_cmd -> $cmd" >> "$chain_db.tmp"
                fi
            fi
            prev_cmd="$cmd"
        done
        
        # Merge new chains with existing ones and remove duplicates
        if [[ -f "$chain_db.tmp" ]]; then
            cat "$chain_db" "$chain_db.tmp" | sort | uniq > "$chain_db.new"
            mv "$chain_db.new" "$chain_db"
            rm -f "$chain_db.tmp"
        fi
    }
    
    # Get suggestions for the current command
    _sentinel_suggest_next_command() {
        local current_cmd="$1"
        
        # Skip empty commands
        [[ -z "$current_cmd" ]] && return
        
        # Get base command
        local base_cmd=$(echo "$current_cmd" | awk '{print $1}')
        
        # Search chain database for matches
        local matches=$(grep -E "^$base_cmd($| )" "$chain_db" | 
                       sort | uniq -c | sort -nr | head -5)
        
        # Process matches
        if [[ -n "$matches" ]]; then
            # Create command chain suggestions
            echo "$matches" | while read -r count chain; do
                # Extract the next command in the chain
                local next_cmd=$(echo "$chain" | awk -F ' -> ' '{print $2}')
                
                # Create a chain abbreviation if command appears multiple times
                if [[ $count -gt 1 && -n "$next_cmd" ]]; then
                    local next_base=$(echo "$next_cmd" | awk '{print $1}')
                    
                    # Check if ble.sh is available for sabbrev
                    if type -t ble-sabbrev &>/dev/null; then
                        # Create a chain suggestion using verification
                        # Generate HMAC-verified description with the HMAC module
                        local verified_desc="$next_cmd # After: $current_cmd"
                        ble-sabbrev "chain:$base_cmd-$next_base=$verified_desc"
                    fi
                fi
            done
            
            # Find most common next command for this command
            local top_next=$(echo "$matches" | head -1 | awk -F ' -> ' '{print $2}')
            if [[ -n "$top_next" ]]; then
                # Register a special chain command
                if type -t ble-sabbrev &>/dev/null; then
                    ble-sabbrev "!!:next=sentinel_run_verified_command '$top_next' # Most likely next command after $current_cmd"
                else
                    # Fallback for when ble.sh is not available
                    alias "!!:next"="sentinel_run_verified_command '$top_next' # Most likely next command after $current_cmd"
                fi
                echo -e "\033[0;90mTip: Type '!!:next' to run the next likely command: $top_next\033[0m" > ~/.sentinel/autocomplete/chain_suggestion
            fi
        fi
    }
    
    # Register command chain hook to run after a command completes
    _sentinel_register_chain_hook() {
        if [[ "$PROMPT_COMMAND" != *"_sentinel_command_chain_hook"* ]]; then
            PROMPT_COMMAND="_sentinel_command_chain_hook;${PROMPT_COMMAND:-:}"
        fi
    }
    
    # Command chain hook executed when prompt displays
    _sentinel_command_chain_hook() {
        # Periodically update the chain database (every ~20 commands)
        local random=$((RANDOM % 20))
        if [[ $random -eq 0 ]]; then
            _sentinel_update_chain_database >/dev/null 2>&1 &
        fi
        
        # Get the last executed command
        local last_cmd=$(HISTTIMEFORMAT= history 1 | sed 's/^[ 0-9]\+[ ]\+//')
        
        # Suggest next command if last command was successful
        if [[ $? -eq 0 && -n "$last_cmd" ]]; then
            _sentinel_suggest_next_command "$last_cmd" >/dev/null 2>&1
            
            # Display suggestion if file exists and terminal is interactive
            if [[ -f ~/.sentinel/autocomplete/chain_suggestion && -t 1 ]]; then
                cat ~/.sentinel/autocomplete/chain_suggestion
                rm ~/.sentinel/autocomplete/chain_suggestion
            fi
        fi
    }
    
    # Initialize the command chain system
    _sentinel_initialize_command_chains() {
        # Ensure database directory exists
        mkdir -p "$chain_dir"
        
        # Register the hook
        _sentinel_register_chain_hook
        
        # Do initial analysis in background
        (_sentinel_update_chain_database >/dev/null 2>&1 &)
    }
    
    # Start the system
    _sentinel_initialize_command_chains
}

# Logging functions
_chains_log_error() {
    local msg="$1"
    mkdir -p ~/.sentinel/logs
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $msg" >> ~/.sentinel/logs/errors-$(date +%Y%m%d).log
}

_chains_log_warning() {
    local msg="$1"
    mkdir -p ~/.sentinel/logs
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $msg" >> ~/.sentinel/logs/warnings-$(date +%Y%m%d).log
}

# Initialize the command chain prediction system
sentinel_init_command_chains() {
    # Skip if not in interactive shell
    [[ $- != *i* ]] && return 0
    
    # Set up error handling
    set -o pipefail
    
    # Create required directories
    mkdir -p ~/.sentinel/autocomplete/chains
    
    # Initialize the command chain predictor
    _sentinel_command_chain_predictor
    
    # Log startup
    _chains_log_warning "Command chain prediction system initialized"
    
    return 0
}

# Run initialization
sentinel_init_command_chains 

# Helper function to safely bind keys only if widget exists
_sentinel_safe_ble_bind() {
    local mode="$1"
    local key="$2"
    local widget="$3"
    if ble-bind -l | grep -q "^$widget$"; then
        ble-bind -m "$mode" -f "$key" "$widget" 2>/dev/null || true
    else
        sentinel_log_warning "command_chains" "BLE.sh widget not found: $widget (skipping keybind for $key in $mode)"
    fi
}

# After creating or moving any db/log file or directory:
chmod 600 "$chain_db" "$chain_db.new" "$chain_db.tmp" 2>/dev/null || true
chmod 700 "$chain_dir" 2>/dev/null || true
# Add comment about race conditions and log sensitivity
# SECURITY NOTE: There is a minor risk of race conditions with concurrent shells updating the same file. For high-security environments, use flock or similar locking. Log files may contain sensitive data; rotate and protect accordingly.

# Add syslog fallback for logging if logging.module is not available
if ! type -t sentinel_log_info &>/dev/null; then
    sentinel_log_info() { logger -t SENTINEL "[INFO] $*"; }
    sentinel_log_warning() { logger -t SENTINEL "[WARN] $*"; }
    sentinel_log_error() { logger -t SENTINEL "[ERROR] $*"; }
fi 