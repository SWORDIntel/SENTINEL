#!/usr/bin/env bash
#-----------------------------------------------------------------------------
# SENTINEL  âŸ©  autocomplete.module (Unified Manager & Core)
# Unified autocomplete manager, BLE.sh integration, and snippet engine
# Version : 3.0.0          (2025-05-16)
# Author  : SENTINEL Team
# License : MIT
#-----------------------------------------------------------------------------
set -euo pipefail

###############################################################################
# 0.  Metadata
###############################################################################
SENTINEL_AUTOCOMPLETE_VERSION="3.0.0"
SENTINEL_AUTOCOMPLETE_DESCRIPTION="Unified autocomplete manager, BLE.sh, and snippet engine"
SENTINEL_AUTOCOMPLETE_AUTHOR="SENTINEL Team"

###############################################################################
# 1.  Logging (secure, robust)
###############################################################################
SENTINEL_LOG_DIR="${HOME}/logs"
mkdir -p "$SENTINEL_LOG_DIR"
_sentinel_log() {
    local level="$1"; shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $level: $*" >> "$SENTINEL_LOG_DIR/autocomplete-$(date +%Y%m%d).log"
}
_sentinel_log_info()    { _sentinel_log "INFO"    "$@"; }
_sentinel_log_warning() { _sentinel_log "WARNING" "$@"; }
_sentinel_log_error()   { _sentinel_log "ERROR"   "$@"; }

###############################################################################
# 2.  Module Registry
###############################################################################
declare -A SENTINEL_AUTOCOMPLETE_MODULES
declare -A SENTINEL_AUTOCOMPLETE_MODULE_PATHS

sentinel_autocomplete_register_module() {
    local module_name="$1" module_version="$2" module_path="$3"
    SENTINEL_AUTOCOMPLETE_MODULES["$module_name"]="$module_version"
    SENTINEL_AUTOCOMPLETE_MODULE_PATHS["$module_name"]="$module_path"
    _sentinel_log_info "Registered module: $module_name v$module_version at $module_path"
}

###############################################################################
# 3.  BLE.sh Integration
###############################################################################
SENTINEL_BLESH_LOADER="${HOME}/blesh_loader.sh"
sentinel_check_blesh() {
    # Check if BLE.sh is already loaded
    if type -t bleopt &>/dev/null; then
        _sentinel_log_info "BLE.sh already loaded" 2>/dev/null || true
        return 0
    fi
    
    # Check if loader exists
    if [[ ! -f $SENTINEL_BLESH_LOADER ]]; then
        # Create a simplified loader on-the-fly if it doesn't exist
        cat > "$SENTINEL_BLESH_LOADER" <<'EOF'
#!/bin/bash
# Auto-generated BLE.sh loader
[[ -n ${SENTINEL_BLESH_LOADED:-} ]] && return 0
export SENTINEL_BLESH_LOADED=1
BLESH_MAIN="${HOME}/.local/share/blesh/ble.sh"
if [[ -f "${BLESH_MAIN}" ]]; then
  # Fix for 'unrecognized attach method' error
  export BLESH_ATTACH_METHOD="attach"
  source "${BLESH_MAIN}" --attach=attach 2>/dev/null || true
fi
EOF
        chmod 644 "$SENTINEL_BLESH_LOADER" 2>/dev/null || true
        _sentinel_log_info "Created minimal BLE.sh loader" 2>/dev/null || true
    fi
    
    # Try to source the loader with proper error handling
    export BLESH_ATTACH_METHOD="attach"  # Set this before sourcing the loader
    source "$SENTINEL_BLESH_LOADER" 2>/dev/null || {
        # Silent failure - don't crash the terminal
        _sentinel_log_error "Failed to source BLE.sh loader" 2>/dev/null || true
        return 0  # Return success anyway to prevent terminal crashes
    }
    
    # Check if BLE.sh was successfully loaded
    if type -t bleopt &>/dev/null; then
        _sentinel_log_info "BLE.sh successfully loaded" 2>/dev/null || true
        # Show a success message if this was an explicit action
        [[ "${SENTINEL_VERBOSE:-0}" == "1" ]] && echo "BLE.sh successfully loaded"
        return 0
    else
        # Silent failure with minimal output
        _sentinel_log_warning "BLE.sh loading skipped" 2>/dev/null || true
        return 0  # Return success to prevent terminal crashes
    fi
}
sentinel_blesh_status() {
    if type -t bleopt &>/dev/null; then
        echo "BLE.sh       : LOADED (v$(bleopt --version 2>/dev/null || echo 'unknown'))"
    else
        echo "BLE.sh       : NOT loaded"
    fi
}

###############################################################################
# 4.  Snippet Engine
###############################################################################
SENTINEL_SNIPPET_DIR="${HOME}/autocomplete/snippets"
_sentinel_snippet_import_all() {
    [[ -d $SENTINEL_SNIPPET_DIR ]] || return 0
    sentinel_check_blesh || return 0
    for f in "$SENTINEL_SNIPPET_DIR"/*.snippet; do
        [[ -f $f ]] || continue
        local name="${f##*/}"; name="${name%.snippet}"
        local cmd; cmd="$(sed ':a;N;$!ba;s/\n/\\n/g' "$f")"
        ble-sabbrev -m "$name=$cmd"
    done
}
sentinel_snippet_add() {
    local name="$1" cmd="$2"
    [[ -z $name || -z $cmd ]] && { echo "Usage: sentinel_snippet_add <n> <command...>" >&2; return 1; }
    mkdir -p "$SENTINEL_SNIPPET_DIR"
    printf '%s\n' "$cmd" > "$SENTINEL_SNIPPET_DIR/$name.snippet"
    _sentinel_log_info "snippet $name added"
    _sentinel_snippet_import_all
}
sentinel_snippet_list() {
    [[ -d $SENTINEL_SNIPPET_DIR ]] || { echo "No snippets."; return; }
    for f in "$SENTINEL_SNIPPET_DIR"/*.snippet; do
        [[ -f $f ]] || continue
        printf '%-20s %s\n' "${f##*/}" "$(head -n1 "$f")"
    done | column -t
}

###############################################################################
# 5.  Command Routing & User Interface
###############################################################################
@autocomplete() { sentinel_autocomplete_command "$@"; }
sentinel_autocomplete_command() {
    local cmd="${1:-}"; shift || true
    case "$cmd" in
        help|--help|-h|"") sentinel_autocomplete_help ;;
        status|--status|-s) sentinel_autocomplete_status ;;
        fix|--fix|-f) sentinel_autocomplete_fix ;;
        reload|--reload|-r) sentinel_autocomplete_reload ;;
        install|--install|-i) sentinel_autocomplete_install ;;
        modules|--modules|-m) sentinel_autocomplete_list_modules ;;
        *)
            if [[ "$cmd" == *":"* ]]; then
                local module_name="${cmd%%:*}"
                local module_cmd="${cmd#*:}"
                local module_func="sentinel_${module_name}_${module_cmd}"
                if type -t "$module_func" &>/dev/null; then
                    "$module_func" "$@"
                else
                    echo "Unknown module command: $cmd"
                    echo "Available modules: $(sentinel_autocomplete_list_modules_names)"
                fi
            else
                echo "Unknown command: $cmd"
                echo "Available commands: help, status, fix, reload, install, modules"
                echo "Or use module:command format for module-specific commands"
            fi
            ;;
    esac
}
sentinel_autocomplete_help() {
    echo -e "\033[1;32mSENTINEL Autocomplete Commands:\033[0m"
    echo -e "  \033[1;34m@autocomplete\033[0m                   - Show this help"
    echo -e "  \033[1;34m@autocomplete status\033[0m            - Check autocomplete status"
    echo -e "  \033[1;34m@autocomplete fix\033[0m               - Fix common issues"
    echo -e "  \033[1;34m@autocomplete reload\033[0m            - Reload autocomplete system"
    echo -e "  \033[1;34m@autocomplete install\033[0m           - Force reinstall"
    echo -e "  \033[1;34m@autocomplete modules\033[0m           - List loaded modules"
    echo -e "\nSnippets: sentinel_snippet_add <n> <command>"
    echo -e "\n\033[1;32mUsage:\033[0m"
    echo -e "  - Press \033[1;34mTab\033[0m to see suggestions"
    echo -e "  - Press \033[1;34mRight Arrow\033[0m to accept suggestion"
    echo -e "\n\033[1;32mTroubleshooting:\033[0m"
    echo -e "  If autocomplete isn't working, try:"
    echo -e "  1. Run '@autocomplete fix'"
    echo -e "  2. Close and reopen your terminal"
    echo -e "  3. If still not working, run '@autocomplete install'"
}
sentinel_autocomplete_status() {
    echo -e "\033[1;32mSENTINEL Autocomplete Status:\033[0m"
    _sentinel_log_info "Checking autocomplete status"
    echo -e "\n\033[1;32mLoaded Modules:\033[0m"
    for module in "${!SENTINEL_AUTOCOMPLETE_MODULES[@]}"; do
        local version="${SENTINEL_AUTOCOMPLETE_MODULES[$module]}"
        echo -e "  \033[1;34m$module\033[0m v$version"
    done
    if type -t sentinel_blesh_status &>/dev/null; then
        echo -e "\n\033[1;32mBLE.sh Status:\033[0m"
        sentinel_blesh_status | sed 's/^/  /'
    else
        echo -e "\n\033[1;31mBLE.sh module not loaded\033[0m"
    fi
    echo -e "\n\033[1;32mDirectories:\033[0m"
    for dir in ${HOME}/autocomplete ${HOME}/logs ~/.cache/blesh; do
        echo -n "  $dir: "
        [[ -d "$dir" ]] && echo -e "\033[1;32mExists\033[0m" || echo -e "\033[1;31mMissing\033[0m"
    done
    _sentinel_log_info "Autocomplete status check completed"
}
sentinel_autocomplete_fix() {
    echo "Fixing autocomplete issues..."
    _sentinel_log_info "Running autocomplete fix procedure" 2>/dev/null || true
    
    # Create required directories with correct permissions, with error handling
    mkdir -p ${HOME}/autocomplete/{snippets,context,projects,params} ${HOME}/logs 2>/dev/null || {
        echo "Creating autocomplete directories manually..."
        mkdir -p "${HOME}/autocomplete" 2>/dev/null || true
        mkdir -p "${HOME}/autocomplete/snippets" 2>/dev/null || true
        mkdir -p "${HOME}/autocomplete/context" 2>/dev/null || true
        mkdir -p "${HOME}/autocomplete/projects" 2>/dev/null || true
        mkdir -p "${HOME}/autocomplete/params" 2>/dev/null || true
        mkdir -p "${HOME}/logs" 2>/dev/null || true
    }
    
    # Ensure directories have correct permissions
    chmod 755 "${HOME}/autocomplete" 2>/dev/null || true
    chmod 755 "${HOME}/logs" 2>/dev/null || true
    find "${HOME}/autocomplete" -type d -exec chmod 755 {} \; 2>/dev/null || true
    
    echo "Checking BLE.sh installation..."
    
    # Ensure cache directory exists with proper permissions
    mkdir -p "${HOME}/.cache/blesh" 2>/dev/null || true
    chmod 700 "${HOME}/.cache/blesh" 2>/dev/null || true
    
    # Create or update the BLE.sh loader
    echo "Updating BLE.sh loader..."
    cat > "${HOME}/blesh_loader.sh" <<'EOF'
#!/bin/bash
# Auto-generated by SENTINEL autocomplete fix
# Simplified loader with proper error handling

# Skip if already loaded
[[ -n ${SENTINEL_BLESH_LOADED:-} ]] && return 0
export SENTINEL_BLESH_LOADED=1

# Set correct attach method before loading
export BLESH_ATTACH_METHOD="attach"

# Try to load BLE.sh with proper error handling
BLESH_MAIN="${HOME}/.local/share/blesh/ble.sh"
if [[ -f "${BLESH_MAIN}" ]]; then
  source "${BLESH_MAIN}" --attach=attach 2>/dev/null || true
fi
EOF
    chmod 644 "${HOME}/blesh_loader.sh" 2>/dev/null || true
    
    # Always return success to prevent terminal crashes
    echo -e "\nRepair completed. Please \033[1;32mclose and reopen your terminal\033[0m for changes to take full effect."
    return 0
}
sentinel_autocomplete_reload() {
    echo "Reloading autocomplete system..."
    _sentinel_log_info "Reloading autocomplete system"
    _sentinel_snippet_import_all
    echo "Autocomplete system reloaded."
    _sentinel_log_info "Autocomplete system reload completed"
}
sentinel_autocomplete_install() {
    echo "Installing autocomplete system..."
    _sentinel_log_info "Installing autocomplete system"
    sentinel_check_blesh
    echo "Autocomplete system installation complete. Please restart your terminal."
    _sentinel_log_info "Autocomplete system installation completed"
}
sentinel_autocomplete_list_modules() {
    echo -e "\033[1;32mLoaded Autocomplete Modules:\033[0m"
    for module in "${!SENTINEL_AUTOCOMPLETE_MODULES[@]}"; do
        echo -e "  \033[1;34m$module\033[0m v${SENTINEL_AUTOCOMPLETE_MODULES[$module]}"
    done
}
sentinel_autocomplete_list_modules_names() {
    local names=""
    for module in "${!SENTINEL_AUTOCOMPLETE_MODULES[@]}"; do
        names+=" $module"
    done
    echo "$names"
}

###############################################################################
# 6.  Initialization
###############################################################################
sentinel_autocomplete_init() {
    [[ $- != *i* ]] && return 0
    _sentinel_log_info "Initializing autocomplete system"
    sentinel_autocomplete_register_module "manager" "$SENTINEL_AUTOCOMPLETE_VERSION" "${BASH_SOURCE[0]}"
    _sentinel_snippet_import_all
    echo "SENTINEL Autocomplete v${SENTINEL_AUTOCOMPLETE_VERSION} loaded"
}
sentinel_autocomplete_init

###############################################################################
# 7.  Export for shell use
###############################################################################
export -f sentinel_autocomplete_command
export -f @autocomplete
export -f sentinel_snippet_add
export -f sentinel_snippet_list

# Optionally, add a shell alias for user convenience:
alias @autocomplete='sentinel_autocomplete_command'
