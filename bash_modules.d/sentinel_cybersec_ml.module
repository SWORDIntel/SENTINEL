#!/usr/bin/env bash
# SENTINEL Cybersecurity ML Module
# Advanced machine learning module for cybersecurity analysis

# Check dependencies
SENTINEL_CYBERSEC_ENABLED=0
if command -v python3 &>/dev/null; then
    # Check for required Python packages
    if python3 -c "import requests, numpy, tqdm, joblib, sklearn" &>/dev/null; then
        SENTINEL_CYBERSEC_ENABLED=1
    else
        echo "Warning: Missing Python packages for SENTINEL Cybersec ML."
        echo "Install with: pip install requests numpy tqdm joblib scikit-learn"
    fi
else
    echo "Warning: python3 not found. SENTINEL Cybersec ML capabilities disabled."
fi

# Check for advanced ML capabilities
SENTINEL_ADV_ML_AVAILABLE=0
if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
    if python3 -c "import tensorflow" &>/dev/null; then
        SENTINEL_ADV_ML_AVAILABLE=1
        echo "Advanced ML capabilities available for Cybersec ML."
    else
        echo "Warning: TensorFlow not installed. Advanced ML features disabled."
        echo "Install with: pip install tensorflow"
    fi
fi

# Check for LLM availability (reuse from other modules)
SENTINEL_LLM_AVAILABLE=0
if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
    if python3 -c "import llama_cpp" &>/dev/null; then
        SENTINEL_LLM_AVAILABLE=1
        echo "LLM capabilities available for Cybersec ML."
    else
        echo "Warning: llama-cpp-python not installed. Install for advanced analysis."
        echo "Install with: pip install llama-cpp-python"
    fi
fi

# Path to Cybersec scripts
SENTINEL_CYBERSEC_DIR="$(dirname "$(dirname "${BASH_SOURCE[0]}")")/contrib"
CYBERSEC_DATA_DIR="$HOME/.sentinel/cybersec"

# Create required directories
mkdir -p "$CYBERSEC_DATA_DIR/datasets" 2>/dev/null
mkdir -p "$CYBERSEC_DATA_DIR/models" 2>/dev/null
mkdir -p "$CYBERSEC_DATA_DIR/scan_results" 2>/dev/null

# Scan a codebase for security vulnerabilities
function sentinel_cybersec_scan() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            echo "Usage: sentinel_cybersec_scan <directory> [--recursive] [--include=py,js,php]"
            return 1
        fi
        
        local target_dir="$1"
        shift
        
        echo "Scanning codebase for security vulnerabilities: $target_dir"
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --scan "$target_dir" "$@"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
    fi
}

# Update vulnerability database
function sentinel_cybersec_update_db() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        echo "Updating vulnerability database..."
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --update-db "$@"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
    fi
}

# Train machine learning models
function sentinel_cybersec_train() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        echo "Training cybersecurity machine learning models..."
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --train "$@"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
    fi
}

# Generate training data
function sentinel_cybersec_gendata() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        if [ $SENTINEL_LLM_AVAILABLE -eq 0 ]; then
            echo "LLM capabilities required for generating training data."
            echo "Install with: pip install llama-cpp-python"
            return 1
        fi
        
        echo "Generating training data for cybersecurity models..."
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --generate-data "$@"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
    fi
}

# Analyze GitHub repositories for security issues
function sentinel_cybersec_github() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            echo "Usage: sentinel_cybersec_github <github_username>"
            return 1
        fi
        
        echo "Analyzing GitHub repositories for security issues: $1"
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --analyze-github "$1" "$@"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
    fi
}

# Install dependencies
function sentinel_cybersec_install_deps() {
    echo "Installing dependencies for SENTINEL Cybersec ML..."
    pip install requests numpy tqdm joblib scikit-learn scipy npyscreen
    
    read -p "Install TensorFlow for advanced ML capabilities? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        pip install tensorflow
    fi
    
    read -p "Install llama-cpp-python for LLM analysis? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        pip install llama-cpp-python
    fi
    
    # Check if installation was successful
    if python3 -c "import requests, numpy, tqdm, joblib, sklearn" &>/dev/null; then
        echo "Core dependencies installed successfully."
        SENTINEL_CYBERSEC_ENABLED=1
    else
        echo "Failed to install some core dependencies. Please check pip output for errors."
    fi
}

# One-liner codebase security check that generates plaintext report
function scan_security() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        if [ -z "$1" ]; then
            dir="."
        else
            dir="$1"
        fi
        
        echo "Running quick security scan on $dir..."
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_ml.py" --scan "$dir" --recursive --format text
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
        echo "Run 'sentinel_cybersec_install_deps' to install requirements."
    fi
}

# Launch TUI interface (if added in the future)
function sentinel_cybersec_tui() {
    if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
        # Check for npyscreen specifically
        if ! python3 -c "import npyscreen" &>/dev/null; then
            echo "TUI dependency 'npyscreen' not found."
            echo "Run 'sentinel_cybersec_install_deps' to install all dependencies."
            return 1
        fi
        
        echo "Launching Cybersecurity ML Analyzer TUI..."
        python3 "$SENTINEL_CYBERSEC_DIR/sentinel_cybersec_tui.py"
    else
        echo "SENTINEL Cybersec ML disabled. Install dependencies first."
        echo "Run 'sentinel_cybersec_install_deps' to install all dependencies."
    fi
}

# Alias for easier access
alias cyberscan='sentinel_cybersec_scan'
alias cyberupdate='sentinel_cybersec_update_db'
alias cybertrain='sentinel_cybersec_train'
alias cyberdata='sentinel_cybersec_gendata'
alias cybergithub='sentinel_cybersec_github'
alias cyberinstall='sentinel_cybersec_install_deps'
alias cybertui='sentinel_cybersec_tui'
alias securitycheck='scan_security'

# Check if module can be enabled
if [ $SENTINEL_CYBERSEC_ENABLED -eq 1 ]; then
    echo "SENTINEL Cybersecurity ML module loaded successfully."
    if [ $SENTINEL_ADV_ML_AVAILABLE -eq 0 ]; then
        echo "Note: Install TensorFlow for advanced ML capabilities."
    fi
    if [ $SENTINEL_LLM_AVAILABLE -eq 0 ]; then
        echo "Note: Install llama-cpp-python for LLM-powered analysis."
    fi
else
    echo "SENTINEL Cybersecurity ML module is disabled. Install required dependencies."
fi 