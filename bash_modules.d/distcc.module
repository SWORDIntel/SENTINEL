#!/usr/bin/env bash
### BEGIN MODULE INFO
# Name:                  SENTINEL Module: distcc
# Short-Description:     Setup for distributed compilation with Distcc and Ccache
# Description:           This SENTINEL module configures environment variables,
#                        directories, and runtime paths for distributed builds
#                        using Distcc and Ccache. Intended for environments
#                        requiring performance and reproducibility in CI/CD
#                        or large-scale compilation workflows.
# Author:                John

# Prevent multiple loading
[[ -n "${_SENTINEL_DISTCC_LOADED}" ]] && return 0
export _SENTINEL_DISTCC_LOADED=1
# Email:                 intel@swordintelligence.airforce
# URL:                   https://github.com/SWORDIntel/SENTINEL/
# Version:               1.0.0
# Stability:             stable
# Tags:                  compilation, distcc, ccache, distributed, optimization
# Provides:              sentinel_distcc_environment
# Requires:              distcc, ccache
# Conflicts:             restricted_build_envs
### END MODULE INFO

# Module metadata
SENTINEL_MODULE_VERSION="1.0.0"
SENTINEL_MODULE_DESCRIPTION="Configure environment for distributed compilation with Distcc and Ccache"
SENTINEL_MODULE_AUTHOR="John"
SENTINEL_MODULE_DEPENDENCIES=""

# Check if we're being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script is meant to be sourced, not executed directly."
    exit 1
fi

# Configuration
DISTCC_DIR="${DISTCC_DIR:-$HOME/.distcc}"
CCACHE_DIR="${CCACHE_DIR:-$HOME/.ccache}"
DISTCC_HOSTS="${DISTCC_HOSTS:-localhost}"
DISTCC_LOG="${DISTCC_LOG:-$HOME/.distcc/distcc.log}"
DISTCC_VERBOSE="${DISTCC_VERBOSE:-0}"
DISTCC_FALLBACK="${DISTCC_FALLBACK:-1}"
CCACHE_SIZE="${CCACHE_SIZE:-5G}"

# Create necessary directories
mkdir -p "$DISTCC_DIR" 2>/dev/null
mkdir -p "$CCACHE_DIR" 2>/dev/null
mkdir -p "$(dirname "$DISTCC_LOG")" 2>/dev/null

# Function to check for distcc and ccache installations
distcc_check_installation() {
    local missing=""
    
    # Check for distcc
    if ! command -v distcc &>/dev/null; then
        missing+="distcc "
    fi
    
    # Check for ccache
    if ! command -v ccache &>/dev/null; then
        missing+="ccache "
    fi
    
    if [[ -n "$missing" ]]; then
        echo -e "${YELLOW}Warning: The following tools are not installed: ${missing}${NC}"
        echo -e "You can install them with:"
        echo -e "  ${BLUE}sudo apt install $missing${NC}  # Debian/Ubuntu"
        echo -e "  ${BLUE}sudo dnf install $missing${NC}  # Fedora/RHEL"
        echo -e "  ${BLUE}sudo pacman -S $missing${NC}    # Arch Linux"
        
        return 0
    else
        return 0
    fi
}

# Function to setup distcc environment
distcc_setup() {
    # Configure distcc
    export DISTCC_DIR
    export DISTCC_HOSTS
    export DISTCC_LOG
    export DISTCC_VERBOSE
    export DISTCC_FALLBACK
    
    # Configure ccache
    export CCACHE_DIR
    
    # Set ccache size if ccache is available and not already configured
    if command -v ccache &>/dev/null; then
        if ! ccache -s 2>/dev/null | grep -q "max cache size.*$CCACHE_SIZE"; then
            ccache -M "$CCACHE_SIZE" >/dev/null 2>&1
        fi
    fi
    
    # Add distcc and ccache wrapper directories to PATH if they exist
    local distcc_wrapper_paths=(
        "/usr/lib/distcc"
        "/usr/lib64/distcc" 
        "/usr/local/lib/distcc"
        "/opt/local/lib/distcc"
        "/usr/lib/distcc/bin"
        "/usr/lib64/distcc/bin"
        "/usr/local/lib/distcc/bin"
        "/opt/local/lib/distcc/bin"
    )
    
    local ccache_wrapper_paths=(
        "/usr/lib/ccache"
        "/usr/lib64/ccache"
        "/usr/local/lib/ccache"
        "/opt/local/lib/ccache"
        "/usr/lib/ccache/bin"
        "/usr/lib64/ccache/bin"
        "/usr/local/lib/ccache/bin"
        "/opt/local/lib/ccache/bin"
    )
    
    local distcc_found=""
    local ccache_found=""
    
    # Find and add distcc wrapper directory to PATH
    for p in "${distcc_wrapper_paths[@]}"; do
        if [[ -d "$p" && ":$PATH:" != *":$p:"* ]]; then
            # Check if directory contains compiler wrappers
            if ls "$p"/{gcc,g++,cc} &>/dev/null; then
                export PATH="$p:$PATH"
                distcc_found="$p"
                break
            fi
        fi
    done
    
    # Find and add ccache wrapper directory to PATH  
    for p in "${ccache_wrapper_paths[@]}"; do
        if [[ -d "$p" && ":$PATH:" != *":$p:"* ]]; then
            # Check if directory contains compiler wrappers
            if ls "$p"/{gcc,g++,cc} &>/dev/null; then
                export PATH="$p:$PATH"
                ccache_found="$p"
                break
            fi
        fi
    done
    
    # Report results
    if [[ -n "$distcc_found" || -n "$ccache_found" ]]; then
        echo -e "${GREEN}Compiler wrapper directories added to PATH:${NC}"
        [[ -n "$distcc_found" ]] && echo -e "  Distcc wrappers: $distcc_found"
        [[ -n "$ccache_found" ]] && echo -e "  Ccache wrappers: $ccache_found"
    else
        # Check if the tools are available in standard PATH
        local tools_available=""
        command -v distcc &>/dev/null && tools_available+="distcc "
        command -v ccache &>/dev/null && tools_available+="ccache "
        
        if [[ -n "$tools_available" ]]; then
            echo -e "${GREEN}Available in system PATH:${NC} $tools_available"
            echo -e "${CYAN}Note:${NC} No compiler wrapper directories found, but tools are available."
            echo -e "      You can use them directly: CC='distcc gcc' CXX='distcc g++'"
        else
            echo -e "${YELLOW}Warning: No distcc or ccache wrapper directories found${NC}"
            echo -e "         Tools may not be installed or may be in non-standard locations."
        fi
    fi
    
    echo -e "${GREEN}Distcc configured with hosts:${NC} $DISTCC_HOSTS"
}

# Function to configure distcc hosts
distcc_set_hosts() {
    if [[ -z "$1" ]]; then
        echo "Current DISTCC_HOSTS: $DISTCC_HOSTS"
        echo "Usage: distcc_set_hosts <host1> [host2] [host3] ..."
        echo "Examples:"
        echo "  distcc_set_hosts localhost"
        echo "  distcc_set_hosts 192.168.1.100 192.168.1.101"
        echo "  distcc_set_hosts localhost/4 192.168.1.100/8"
        return 0
    fi
    
    # Join all arguments with spaces
    DISTCC_HOSTS="$*"
    export DISTCC_HOSTS
    
    echo -e "${GREEN}DISTCC_HOSTS set to:${NC} $DISTCC_HOSTS"
    
    # Save to configuration
    if [[ -f "$HOME/.bashrc.postcustom" ]]; then
        if grep -q "export DISTCC_HOSTS=" "$HOME/.bashrc.postcustom"; then
            sed -i "s/export DISTCC_HOSTS=.*/export DISTCC_HOSTS=\"$DISTCC_HOSTS\"/" "$HOME/.bashrc.postcustom"
        else
            echo "export DISTCC_HOSTS=\"$DISTCC_HOSTS\"" >> "$HOME/.bashrc.postcustom"
        fi
    fi
}

# Function to check distcc status
distcc_status() {
    echo -e "${BLUE}Distcc Configuration:${NC}"
    echo -e "DISTCC_DIR:      $DISTCC_DIR"
    echo -e "DISTCC_HOSTS:    $DISTCC_HOSTS"
    echo -e "DISTCC_LOG:      $DISTCC_LOG"
    echo -e "DISTCC_VERBOSE:  $DISTCC_VERBOSE"
    echo -e "DISTCC_FALLBACK: $DISTCC_FALLBACK"
    
    echo -e "\n${BLUE}Ccache Configuration:${NC}"
    echo -e "CCACHE_DIR:      $CCACHE_DIR"
    if command -v ccache &>/dev/null; then
        ccache -s
    else
        echo -e "${YELLOW}Ccache not available${NC}"
    fi
    
    echo -e "\n${BLUE}System PATH:${NC}"
    echo "$PATH" | tr ':' '\n' | grep -E 'distcc|ccache'
}

# Function to show compile example
distcc_example() {
    cat << 'EOF'
Distcc and Ccache Usage Examples:
---------------------------------

Basic compilation with distcc:
  $ CC="distcc gcc" ./configure
  $ make -j$(distcc -j)

Automake/Autoconf with distcc:
  $ export CC="distcc gcc"
  $ export CXX="distcc g++"
  $ ./configure
  $ make -j$(distcc -j)

CMake with distcc:
  $ cmake -DCMAKE_C_COMPILER_LAUNCHER=distcc -DCMAKE_CXX_COMPILER_LAUNCHER=distcc ..
  $ make -j$(distcc -j)

Check if distcc is being used:
  $ DISTCC_VERBOSE=1 make -j$(distcc -j)

Monitor distcc activity:
  $ distccmon-text        # Text-based monitor
  $ distccmon-gnome       # GUI monitor (if installed)
EOF
}

# Function to create monitor alias
distcc_monitor() {
    local type="${1:-text}"
    
    case "$type" in
        text)
            if command -v distccmon-text &>/dev/null; then
                distccmon-text 1
            else
                echo "distccmon-text not found. Install distcc-client package."
            fi
            ;;
        gui|gnome)
            if command -v distccmon-gnome &>/dev/null; then
                distccmon-gnome &
            else
                echo "distccmon-gnome not found. Install distcc-client package."
            fi
            ;;
        *)
            echo "Unknown monitor type. Use 'text' or 'gui'."
            ;;
    esac
}

# Function to display help information
distcc_help() {
    cat << EOF
${GREEN}SENTINEL Distcc Module Help${NC}
==============================

${BLUE}Available Commands:${NC}
  distcc_status       - Show distcc and ccache configuration
  distcc_set_hosts    - Configure distcc hosts
  distcc_monitor      - Monitor distcc activity
  distcc_example      - Show usage examples

${BLUE}Configuration Variables:${NC}
  DISTCC_HOSTS        - Space-separated list of compilation hosts
  DISTCC_DIR          - Directory for distcc files
  CCACHE_DIR          - Directory for ccache files
  CCACHE_SIZE         - Maximum size of ccache (default: 5G)
  
${BLUE}Example usage:${NC}
  distcc_set_hosts localhost 192.168.1.100
  distcc_monitor text
  
${BLUE}To use in build systems:${NC}
  export CC="distcc gcc"
  export CXX="distcc g++"
  ./configure && make -j\$(distcc -j)
  
For more information about distcc:
  man distcc
EOF
}

# Function to create automake environment
automake_env() {
    local type="${1:-gnu}"
    
    local configure_flags=""
    local num_jobs=$(distcc -j || echo 4)
    
    case "$type" in
        gnu)
            export CC="distcc gcc"
            export CXX="distcc g++"
            configure_flags="--prefix=/usr/local"
            ;;
        cmake)
            export CMAKE_C_COMPILER_LAUNCHER="distcc"
            export CMAKE_CXX_COMPILER_LAUNCHER="distcc"
            ;;
        *)
            echo "Unknown build type. Use 'gnu' or 'cmake'."
            return 0
            ;;
    esac
    
    echo -e "${GREEN}Automake environment set for $type builds${NC}"
    echo -e "Compilers: CC=$CC CXX=$CXX"
    echo -e "Configure flags: $configure_flags"
    echo -e "Parallel jobs: $num_jobs"
    
    echo -e "\n${BLUE}Build commands:${NC}"
    if [[ "$type" == "gnu" ]]; then
        echo -e "  ./configure $configure_flags"
        echo -e "  make -j$num_jobs"
    else
        echo -e "  mkdir -p build && cd build"
        echo -e "  cmake .."
        echo -e "  make -j$num_jobs"
    fi
}

# Main setup
if distcc_check_installation; then
    distcc_setup
fi

# Create aliases for quick access
alias distcc-status='distcc_status'
alias distcc-monitor='distcc_monitor'
alias distcc-help='distcc_help'
alias distcc-example='distcc_example'
alias automake-distcc='automake_env gnu'
alias cmake-distcc='automake_env cmake'

# Display module loaded message
if [[ "${SENTINEL_QUIET_MODE:-0}" != "1" && "${SENTINEL_SUPPRESS_MODULE_MESSAGES:-0}" != "1" ]]; then
    echo -e "${GREEN}[+]${NC} Distcc/Ccache module loaded. PATH configured for distributed compilation."
    echo -e "    Type ${CYAN}distcc-help${NC} to see available commands."
fi
