#!/usr/bin/env bash
### BEGIN MODULE INFO
# Name:                  example_integrated
# Short-Description:     Example module using Python integration
# Description:           Demonstrates how to use python_integration module
#                        for enhanced functionality in bash modules.
# Author:                Team 5 Agent 1
# URL:                   https://github.com/SWORDIntel/SENTINEL/
# Version:               1.0.0
# Stability:             stable
# Tags:                  example, integration, demo
# Provides:              example_integrated
# Requires:              python_integration
# Conflicts:             none
### END MODULE INFO

# Ensure python_integration is loaded
if ! declare -f sentinel_state_get &>/dev/null; then
    echo "[EXAMPLE] Error: python_integration module must be loaded first"
    return 1
fi

# Example: Complex data processing using Python
process_json_data() {
    local json_input="$1"
    
    # Use Python for JSON processing (much easier than bash)
    sentinel_python_exec -c "
import json
import sys
from sentinel_integration import sentinel

try:
    data = json.loads('$json_input')
    
    # Process data
    result = {
        'keys': list(data.keys()),
        'count': len(data),
        'processed': True
    }
    
    # Store result in state
    sentinel.set_state('json_result', json.dumps(result))
    
    # Also print for immediate use
    print(json.dumps(result, indent=2))
    
except Exception as e:
    print(f'ERROR: {e}', file=sys.stderr)
    sys.exit(1)
"
}

# Example: Background task with progress reporting
long_running_task() {
    local task_name="$1"
    local duration="${2:-10}"
    
    echo "[EXAMPLE] Starting long-running task: $task_name"
    
    # Store task info
    sentinel_state_set "task_${task_name}_status" "running"
    sentinel_state_set "task_${task_name}_progress" "0"
    
    # Run Python task in background with IPC
    (
        sentinel_python_exec -c "
import time
from sentinel_integration import sentinel

task_name = '$task_name'
duration = $duration

# Create IPC channel for progress updates
sentinel.bash_exec(f'sentinel_ipc_create_channel task_{task_name}')

for i in range(duration):
    progress = int((i + 1) / duration * 100)
    
    # Update state
    sentinel.set_state(f'task_{task_name}_progress', str(progress))
    
    # Send IPC message
    sentinel.ipc_send(f'task_{task_name}', f'Progress: {progress}%')
    
    time.sleep(1)

# Task complete
sentinel.set_state(f'task_{task_name}_status', 'completed')
sentinel.ipc_send(f'task_{task_name}', 'Task completed!')
"
    ) &
    
    local task_pid=$!
    echo "[EXAMPLE] Task started with PID: $task_pid"
    
    # Monitor progress
    while [[ $(sentinel_state_get "task_${task_name}_status") == "running" ]]; do
        local progress=$(sentinel_state_get "task_${task_name}_progress")
        echo -ne "\r[EXAMPLE] Progress: ${progress}%"
        sleep 0.5
    done
    
    echo -e "\n[EXAMPLE] Task completed!"
}

# Example: Shared configuration between bash and Python
configure_feature() {
    local feature="$1"
    local value="$2"
    
    # Set configuration
    sentinel_config_set "example.${feature}" "$value"
    
    echo "[EXAMPLE] Configuration set: ${feature} = ${value}"
    
    # Verify from Python side
    sentinel_python_exec -c "
from sentinel_integration import sentinel

feature = '$feature'
value = sentinel.get_config(f'example.{feature}')

print(f'[PYTHON] Confirmed configuration: {feature} = {value}')

# Perform feature-specific setup
if feature == 'logging' and value == 'enabled':
    sentinel.logger.info('Logging has been enabled via bash configuration')
"
}

# Example: Error handling across languages
safe_operation() {
    local operation="$1"
    
    echo "[EXAMPLE] Performing safe operation: $operation"
    
    # Set up error trap
    sentinel_state_set "operation_error" ""
    
    # Execute operation with error handling
    if sentinel_python_exec -c "
from sentinel_integration import sentinel

try:
    # Simulate operation
    if '$operation' == 'divide_by_zero':
        result = 1 / 0
    elif '$operation' == 'file_not_found':
        with open('/nonexistent/file.txt', 'r') as f:
            content = f.read()
    else:
        result = 'Success'
        print(f'Operation {operation} completed successfully')
        
except Exception as e:
    error_msg = str(e)
    sentinel.set_state('operation_error', error_msg)
    sentinel.logger.error(f'Operation failed: {error_msg}')
    raise
"; then
        echo "[EXAMPLE] Operation succeeded"
    else
        local error=$(sentinel_state_get "operation_error")
        echo "[EXAMPLE] Operation failed: $error"
        sentinel_log "error" "Safe operation failed: $error"
    fi
}

# Commands available to user
example_commands() {
    echo "Example Integrated Module Commands:"
    echo "  process_json_data '{\"key\": \"value\"}'  - Process JSON using Python"
    echo "  long_running_task <name> [duration]      - Run background task with progress"
    echo "  configure_feature <feature> <value>      - Set shared configuration"
    echo "  safe_operation <operation>               - Demonstrate error handling"
    echo "  example_commands                         - Show this help"
}

# Show available commands on load
echo "[EXAMPLE] Example Integrated Module loaded"
echo "[EXAMPLE] Type 'example_commands' to see available commands"