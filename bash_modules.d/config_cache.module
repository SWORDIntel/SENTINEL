#!/usr/bin/env bash
# SENTINEL - Configuration Cache Module
# Version: 1.0.0
# Description: Provides advanced configuration caching for faster shell startup
# Dependencies: logging
# Maintainer: SENTINEL Team

# Module metadata for dependency resolution
SENTINEL_MODULE_DESCRIPTION="Advanced configuration caching system"
SENTINEL_MODULE_VERSION="1.0.0"
SENTINEL_MODULE_DEPENDENCIES="logging"

# Prevent double loading
[[ -n "${_SENTINEL_CONFIG_CACHE_LOADED}" ]] && return 0
export _SENTINEL_CONFIG_CACHE_LOADED=1

# Ensure cache directories exist
SENTINEL_CONFIG_CACHE_DIR="${SENTINEL_CACHE_DIR:-$HOME/.sentinel/cache}/config"
mkdir -p "$SENTINEL_CONFIG_CACHE_DIR"

# Set default configuration parameters
: "${SENTINEL_CONFIG_CACHE_ENABLED:=1}"
: "${SENTINEL_CONFIG_FORCE_REFRESH:=0}"
: "${SENTINEL_CONFIG_CACHE_RETENTION_DAYS:=30}"
: "${SENTINEL_CONFIG_VERIFY_HASH:=1}"

# Log initialization
if type sentinel_log_info &>/dev/null; then
    sentinel_log_info "config_cache" "Configuration cache module loaded"
else
    echo "Configuration cache module loaded (logging module not available)"
fi

# Function to create a config key from filepath
# Converts /home/user/config.file to home_user_config_file
config_cache_key() {
    local filepath="$1"
    local key=$(echo "$filepath" | tr '/' '_' | tr '.' '_')
    echo "$key"
}

# Enhanced config cache function
# Usage: config_cache_load <filepath> [options]
config_cache_load() {
    # Skip if caching is disabled
    [[ "$SENTINEL_CONFIG_CACHE_ENABLED" != "1" ]] && source "$1" && return $?
    
    local filepath="$1"
    shift
    local force_refresh="$SENTINEL_CONFIG_FORCE_REFRESH"
    local verify="$SENTINEL_CONFIG_VERIFY_HASH"
    local debug=0
    local selective_vars=""
    
    # Process options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --debug)
                debug=1
                ;;
            --force-refresh)
                force_refresh=1
                ;;
            --no-verify)
                verify=0
                ;;
            --selective=*)
                selective_vars="${1#*=}"
                ;;
            *)
                # Unrecognized option - pass through to loader
                ;;
        esac
        shift
    done
    
    # Generate cache key and paths
    local cache_key=$(config_cache_key "$filepath")
    local cache_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.cache"
    local hash_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.hash"
    local stats_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.stats"
    
    # Debug output
    if [[ $debug -eq 1 ]]; then
        if type sentinel_log_debug &>/dev/null; then
            sentinel_log_debug "config_cache" "Processing config: $filepath (cache: $cache_file)"
        else
            echo "[config_cache] Processing config: $filepath (cache: $cache_file)" >&2
        fi
    fi
    
    # Check if file exists
    if [[ ! -f "$filepath" ]]; then
        if type sentinel_log_error &>/dev/null; then
            sentinel_log_error "config_cache" "Config file not found: $filepath"
        else
            echo "[config_cache] Config file not found: $filepath" >&2
        fi
        return 1
    fi
    
    # Check for forced refresh or verify hash
    if [[ $force_refresh -eq 1 || $verify -eq 1 ]]; then
        if [[ -f "$hash_file" && -f "$cache_file" && $verify -eq 1 ]]; then
            local stored_hash=$(cat "$hash_file")
            local current_hash=$(md5sum "$filepath" | cut -d' ' -f1)
            if [[ "$stored_hash" != "$current_hash" ]]; then
                if [[ $debug -eq 1 ]]; then
                    if type sentinel_log_debug &>/dev/null; then
                        sentinel_log_debug "config_cache" "Hash mismatch, forcing refresh"
                    else
                        echo "[config_cache] Hash mismatch, forcing refresh" >&2
                    fi
                fi
                force_refresh=1
            fi
        else
            force_refresh=1
        fi
    fi

    # Create stats file if it doesn't exist
    if [[ ! -f "$stats_file" ]]; then
        echo "first_load=$(date +%s)" > "$stats_file"
        echo "load_count=0" >> "$stats_file"
    fi
    
    # Use cache if available, newer than config, and no force refresh
    if [[ -f "$cache_file" && "$cache_file" -nt "$filepath" && $force_refresh -eq 0 ]]; then
        # Update stats
        local load_count=$(grep "load_count=" "$stats_file" | cut -d= -f2)
        load_count=$((load_count + 1))
        sed -i "s/load_count=.*/load_count=$load_count/" "$stats_file"
        echo "last_load=$(date +%s)" >> "$stats_file"
        
        # Log cache hit
        if [[ $debug -eq 1 ]]; then
            if type sentinel_log_debug &>/dev/null; then
                sentinel_log_debug "config_cache" "Cache hit for $filepath (load #$load_count)"
            else
                echo "[config_cache] Cache hit for $filepath (load #$load_count)" >&2
            fi
        fi
        
        # Source the cached file
        source "$cache_file"
        return 0
    fi
    
    # Cache miss or force refresh
    if [[ $debug -eq 1 ]]; then
        if type sentinel_log_debug &>/dev/null; then
            sentinel_log_debug "config_cache" "Cache miss for $filepath, generating new cache"
        else
            echo "[config_cache] Cache miss for $filepath, generating new cache" >&2
        fi
    fi
    
    # Source the original file
    source "$filepath"
    
    # Create cache file with smart variable extraction
    echo "# SENTINEL Configuration Cache" > "$cache_file"
    echo "# Original: $filepath" >> "$cache_file"
    echo "# Generated: $(date)" >> "$cache_file"
    echo "" >> "$cache_file"
    
    if [[ -n "$selective_vars" ]]; then
        # Only cache specified variables
        for var in $selective_vars; do
            if [[ -v "$var" ]]; then
                declare -p "$var" >> "$cache_file" 2>/dev/null
            fi
        done
    else
        # Create a temporary file with all variables
        local tmp_env=$(mktemp)
        declare -p > "$tmp_env"
        
        # Filter out system variables and keep only user-defined ones
        grep -v "^declare -[^-]* BASH_[A-Z_]*=" "$tmp_env" | \
        grep -v "^declare -[^-]* COMP_[A-Z_]*=" | \
        grep -v "^declare -[^-]* DIRSTACK=" | \
        grep -v "^declare -[^-]* EUID=" | \
        grep -v "^declare -[^-]* FUNCNAME=" | \
        grep -v "^declare -[^-]* GROUPS=" | \
        grep -v "^declare -[^-]* HISTCMD=" | \
        grep -v "^declare -[^-]* HOSTNAME=" | \
        grep -v "^declare -[^-]* HOSTTYPE=" | \
        grep -v "^declare -[^-]* IFS=" | \
        grep -v "^declare -[^-]* MACHTYPE=" | \
        grep -v "^declare -[^-]* OPTERR=" | \
        grep -v "^declare -[^-]* OPTIND=" | \
        grep -v "^declare -[^-]* OSTYPE=" | \
        grep -v "^declare -[^-]* PIPESTATUS=" | \
        grep -v "^declare -[^-]* PPID=" | \
        grep -v "^declare -[^-]* PWD=" | \
        grep -v "^declare -[^-]* RANDOM=" | \
        grep -v "^declare -[^-]* SECONDS=" | \
        grep -v "^declare -[^-]* SHELLOPTS=" | \
        grep -v "^declare -[^-]* SHLVL=" | \
        grep -v "^declare -[^-]* UID=" | \
        grep -v "^declare -[^-]* _=" >> "$cache_file"
        
        rm -f "$tmp_env"
    fi
    
    # Create hash for future verification
    md5sum "$filepath" | cut -d' ' -f1 > "$hash_file"
    
    # Update stats
    load_count=$(grep "load_count=" "$stats_file" | cut -d= -f2 || echo 0)
    load_count=$((load_count + 1))
    sed -i "s/load_count=.*/load_count=$load_count/" "$stats_file" 2>/dev/null || \
    echo "load_count=$load_count" >> "$stats_file"
    sed -i "/last_load=/d" "$stats_file" 2>/dev/null
    echo "last_load=$(date +%s)" >> "$stats_file"
    echo "last_refresh=$(date +%s)" >> "$stats_file"
    
    # Secure the files
    chmod 600 "$cache_file" "$hash_file" "$stats_file"
    
    # Log success
    if type sentinel_log_info &>/dev/null; then
        sentinel_log_info "config_cache" "Updated cache for $filepath"
    fi
    
    return 0
}

# Clean up old cache files
config_cache_cleanup() {
    local retention_days="${1:-$SENTINEL_CONFIG_CACHE_RETENTION_DAYS}"
    
    if [[ ! -d "$SENTINEL_CONFIG_CACHE_DIR" ]]; then
        if type sentinel_log_warning &>/dev/null; then
            sentinel_log_warning "config_cache" "Cache directory not found, creating it"
        fi
        mkdir -p "$SENTINEL_CONFIG_CACHE_DIR"
        return 0
    fi
    
    # Find and remove old cache files
    find "$SENTINEL_CONFIG_CACHE_DIR" -type f -mtime "+${retention_days}" -delete 2>/dev/null
    
    if type sentinel_log_info &>/dev/null; then
        sentinel_log_info "config_cache" "Cleaned up cache files older than $retention_days days"
    fi
    
    return 0
}

# Show cache statistics
config_cache_stats() {
    local verbose="${1:-0}"
    
    if [[ ! -d "$SENTINEL_CONFIG_CACHE_DIR" ]]; then
        echo "Cache directory not found."
        return 1
    fi
    
    local cache_files=$(find "$SENTINEL_CONFIG_CACHE_DIR" -name "*.cache" | wc -l)
    local total_size=$(du -sh "$SENTINEL_CONFIG_CACHE_DIR" 2>/dev/null | cut -f1)
    
    echo "Configuration Cache Statistics:"
    echo "------------------------------"
    echo "Total cached configurations: $cache_files"
    echo "Total cache size: $total_size"
    
    if [[ "$verbose" == "1" ]]; then
        echo ""
        echo "Most frequently loaded configurations:"
        grep -l "load_count" "$SENTINEL_CONFIG_CACHE_DIR"/*.stats 2>/dev/null | while read stats_file; do
            local cache_key=$(basename "$stats_file" .stats)
            local load_count=$(grep "load_count=" "$stats_file" | cut -d= -f2)
            local last_load=$(grep "last_load=" "$stats_file" | cut -d= -f2)
            local last_load_date=$(date -d @$last_load 2>/dev/null || date -r $last_load 2>/dev/null || echo "unknown")
            
            echo "  $cache_key: $load_count loads (last: $last_load_date)"
        done | sort -t: -k2 -nr | head -5
        
        echo ""
        echo "Recently refreshed configurations:"
        grep -l "last_refresh" "$SENTINEL_CONFIG_CACHE_DIR"/*.stats 2>/dev/null | while read stats_file; do
            local cache_key=$(basename "$stats_file" .stats)
            local last_refresh=$(grep "last_refresh=" "$stats_file" | cut -d= -f2)
            local last_refresh_date=$(date -d @$last_refresh 2>/dev/null || date -r $last_refresh 2>/dev/null || echo "unknown")
            
            echo "  $cache_key: $last_refresh_date"
        done | sort -t: -k2 -nr | head -5
    fi
}

# Override the standard load_cached_config with our enhanced version
load_cached_config() {
    config_cache_load "$@"
    return $?
}

# Run initial cleanup in the background
(config_cache_cleanup >/dev/null 2>&1 &)

# Export functions
export -f config_cache_key
export -f config_cache_load
export -f config_cache_cleanup
export -f config_cache_stats
export -f load_cached_config  # Override the standard function

# Log successful initialization
if type sentinel_log_info &>/dev/null; then
    sentinel_log_info "config_cache" "Configuration cache module initialized"
fi 