#!/usr/bin/env bash
# SENTINEL - Configuration Cache Module
# Version: 1.0.0
# Description: Provides advanced configuration caching for faster shell startup
# Dependencies: logging
# Maintainer: SENTINEL Team

# Module metadata for dependency resolution
SENTINEL_MODULE_DESCRIPTION="Advanced configuration caching system"
SENTINEL_MODULE_VERSION="1.0.0"
SENTINEL_MODULE_DEPENDENCIES="logging"

# Prevent double loading
[[ -n "${_SENTINEL_CONFIG_CACHE_LOADED}" ]] && return 0
export _SENTINEL_CONFIG_CACHE_LOADED=1

# Ensure cache directories exist
SENTINEL_CONFIG_CACHE_DIR="${SENTINEL_CACHE_DIR:-$HOME/.sentinel/cache}/config"
mkdir -p "$SENTINEL_CONFIG_CACHE_DIR"

# Set default configuration parameters
: "${SENTINEL_CONFIG_CACHE_ENABLED:=1}"
: "${SENTINEL_CONFIG_FORCE_REFRESH:=0}"
: "${SENTINEL_CONFIG_CACHE_RETENTION_DAYS:=30}"
: "${SENTINEL_CONFIG_VERIFY_HASH:=1}"

# Log initialization
if type sentinel_log_info &>/dev/null; then
    sentinel_log_info "config_cache" "Configuration cache module loaded"
else
    if [[ "${SENTINEL_QUIET_MODE:-0}" != "1" && "${SENTINEL_SUPPRESS_MODULE_MESSAGES:-0}" != "1" ]]; then
        echo "Configuration cache module loaded (logging module not available)"
    fi
fi

# Function to create a config key from filepath
# Converts /home/user/config.file to home_user_config_file
config_cache_key() {
    local filepath="$1"
    local key=$(echo "$filepath" | tr '/' '_' | tr '.' '_')
    echo "$key"
}

# Enhanced config cache function with error handling to prevent terminal crashes
# Usage: config_cache_load <filepath> [options]
config_cache_load() {
    # Skip if caching is disabled
    if [[ "$SENTINEL_CONFIG_CACHE_ENABLED" != "1" ]]; then 
        source "$1" 2>/dev/null || true
        return 0  # Always return success to prevent terminal crashes
    fi
    
    local filepath="$1"
    shift
    local force_refresh="$SENTINEL_CONFIG_FORCE_REFRESH"
    local verify="$SENTINEL_CONFIG_VERIFY_HASH"
    local debug=0
    local selective_vars=""
    
    # Check if file exists - skip caching with soft error if not
    if [[ ! -f "$filepath" ]]; then
        echo "[config_cache] Config file not found: $filepath" >&2
        return 0  # Return success to prevent terminal crashes
    fi
    
    # Process options with error handling
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --debug)
                debug=1
                ;;
            --force-refresh)
                force_refresh=1
                ;;
            --no-verify)
                verify=0
                ;;
            --selective=*)
                selective_vars="${1#*=}"
                ;;
            *)
                # Unrecognized option - pass through to loader
                ;;
        esac
        shift
    done
    
    # Generate cache key and paths with error handling
    local cache_key=""
    cache_key=$(config_cache_key "$filepath" 2>/dev/null) || cache_key="${filepath//[^a-zA-Z0-9]/_}"
    
    # Ensure cache directory exists
    mkdir -p "$SENTINEL_CONFIG_CACHE_DIR" 2>/dev/null || {
        # If cache directory creation fails, just source directly
        source "$filepath" 2>/dev/null || true
        return 0  # Return success to prevent terminal crashes
    }
    
    local cache_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.cache"
    local hash_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.hash"
    local stats_file="${SENTINEL_CONFIG_CACHE_DIR}/${cache_key}.stats"
    
    # Skip hash verification if md5sum isn't available
    if [[ $verify -eq 1 ]]; then
        if ! command -v md5sum &>/dev/null; then
            verify=0
        fi
    fi
    
    # Check for forced refresh or verify hash with error handling
    if [[ $force_refresh -eq 1 || $verify -eq 1 ]]; then
        if [[ -f "$hash_file" && -f "$cache_file" && $verify -eq 1 ]]; then
            local stored_hash=""
            local current_hash=""
            stored_hash=$(cat "$hash_file" 2>/dev/null) || stored_hash=""
            current_hash=$(md5sum "$filepath" 2>/dev/null | cut -d' ' -f1 2>/dev/null) || current_hash=""
            
            # If either hash operation failed, force a refresh
            if [[ -z "$stored_hash" || -z "$current_hash" || "$stored_hash" != "$current_hash" ]]; then
                force_refresh=1
            fi
        else
            force_refresh=1
        fi
    fi

    # Create stats file if it doesn't exist - with error handling
    if [[ ! -f "$stats_file" ]]; then
        { echo "first_load=$(date +%s 2>/dev/null || echo 0)" > "$stats_file" && \
          echo "load_count=0" >> "$stats_file"; } 2>/dev/null || true
    fi
    
    # Use cache if available, newer than config, and no force refresh - with error handling
    if [[ -f "$cache_file" && -f "$filepath" ]] && [[ "$cache_file" -nt "$filepath" ]] && [[ $force_refresh -eq 0 ]]; then
        # Try to update stats but don't fail if it doesn't work
        {
            if [[ -f "$stats_file" ]]; then
                local load_count=0
                load_count=$(grep "load_count=" "$stats_file" 2>/dev/null | cut -d= -f2 2>/dev/null) || load_count=0
                load_count=$((load_count + 1))
                # Use safer method than sed -i which might not be available
                local stats_content=$(cat "$stats_file" 2>/dev/null)
                echo "${stats_content/load_count=*/load_count=$load_count}" > "$stats_file"
                echo "last_load=$(date +%s 2>/dev/null || echo 0)" >> "$stats_file"
            fi
        } 2>/dev/null || true
        
        # Source the cached file with error handling
        source "$cache_file" 2>/dev/null || {
            # If cache file sourcing fails, try the original file
            source "$filepath" 2>/dev/null || true
        }
        return 0  # Always return success
    fi
    
    # Cache miss or force refresh - with simplified error handling
    # Direct sourcing approach - skip complex caching if any commands might fail
    if ! command -v mktemp &>/dev/null || ! command -v diff &>/dev/null; then
        # If required tools are missing, just source directly
        source "$filepath" 2>/dev/null || true
        return 0  # Always return success
    fi
    
    # Safely create temporary files with error handling
    local temp_env_before=""
    local temp_env_after=""
    local temp_cache=""
    
    # Use safer alternative if mktemp fails
    temp_env_before=$(mktemp 2>/dev/null) || temp_env_before="${SENTINEL_CONFIG_CACHE_DIR}/tmp_before_$$"
    temp_env_after=$(mktemp 2>/dev/null) || temp_env_after="${SENTINEL_CONFIG_CACHE_DIR}/tmp_after_$$"
    temp_cache=$(mktemp 2>/dev/null) || temp_cache="${SENTINEL_CONFIG_CACHE_DIR}/tmp_cache_$$"
    
    # Touch files to ensure they exist
    touch "$temp_env_before" "$temp_env_after" "$temp_cache" 2>/dev/null
    
    # Capture current environment with error handling
    declare -p > "$temp_env_before" 2>/dev/null || true
    
    # Source the actual config file with error handling
    source "$filepath" 2>/dev/null || {
        # Clean up and return on error
        rm -f "$temp_env_before" "$temp_env_after" "$temp_cache" 2>/dev/null || true
        return 0  # Always return success
    }
    
    # Capture environment after sourcing
    declare -p > "$temp_env_after" 2>/dev/null || true
    
    # Generate minimal cache with basic variable extraction and error handling
    { diff -u "$temp_env_before" "$temp_env_after" 2>/dev/null | \
      grep '^+declare' 2>/dev/null | \
      grep -v '^+declare -[^=]*$' 2>/dev/null > "$temp_cache" 2>/dev/null; } || true
    
    # Try to create cache file but don't fail if it doesn't work
    {
        # Copy temporary cache to final location if it exists and has content
        if [[ -s "$temp_cache" ]]; then
            cat "$temp_cache" > "$cache_file" 2>/dev/null
            
            # Try to update hash but don't fail
            if command -v md5sum &>/dev/null; then
                md5sum "$filepath" 2>/dev/null | cut -d' ' -f1 > "$hash_file" 2>/dev/null || true
            fi
            
            # Update stats file safely
            echo "last_refresh=$(date +%s 2>/dev/null || echo 0)" > "$stats_file" 2>/dev/null
            echo "load_count=1" >> "$stats_file" 2>/dev/null
        fi
    } 2>/dev/null || true
    
    # Cleanup temporary files with error handling
    rm -f "$temp_env_before" "$temp_env_after" "$temp_cache" 2>/dev/null || true
    
    # Log success only if debug is enabled and logging available
    if [[ $debug -eq 1 ]]; then
        if type sentinel_log_info &>/dev/null; then
            sentinel_log_info "config_cache" "Updated cache for $filepath" 2>/dev/null || true
        fi
    fi
    
    return 0  # Always return success to prevent terminal crashes
    
    return 0
}

# Clean up old cache files
config_cache_cleanup() {
    local retention_days="${1:-$SENTINEL_CONFIG_CACHE_RETENTION_DAYS}"
    
    if [[ ! -d "$SENTINEL_CONFIG_CACHE_DIR" ]]; then
        if type sentinel_log_warning &>/dev/null; then
            sentinel_log_warning "config_cache" "Cache directory not found, creating it"
        fi
        mkdir -p "$SENTINEL_CONFIG_CACHE_DIR"
        return 0
    fi
    
    # Find and remove old cache files
    find "$SENTINEL_CONFIG_CACHE_DIR" -type f -mtime "+${retention_days}" -delete 2>/dev/null
    
    if type sentinel_log_info &>/dev/null; then
        sentinel_log_info "config_cache" "Cleaned up cache files older than $retention_days days"
    fi
    
    return 0
}

# Show cache statistics
config_cache_stats() {
    local verbose="${1:-0}"
    
    if [[ ! -d "$SENTINEL_CONFIG_CACHE_DIR" ]]; then
        echo "Cache directory not found."
        return 0
    fi
    
    local cache_files=$(find "$SENTINEL_CONFIG_CACHE_DIR" -name "*.cache" | wc -l)
    local total_size=$(du -sh "$SENTINEL_CONFIG_CACHE_DIR" 2>/dev/null | cut -f1)
    
    echo "Configuration Cache Statistics:"
    echo "------------------------------"
    echo "Total cached configurations: $cache_files"
    echo "Total cache size: $total_size"
    
    if [[ "$verbose" == "1" ]]; then
        echo ""
        echo "Most frequently loaded configurations:"
        grep -l "load_count" "$SENTINEL_CONFIG_CACHE_DIR"/*.stats 2>/dev/null | while read stats_file; do
            local cache_key=$(basename "$stats_file" .stats)
            local load_count=$(grep "load_count=" "$stats_file" | cut -d= -f2)
            local last_load=$(grep "last_load=" "$stats_file" | cut -d= -f2)
            local last_load_date=$(date -d @$last_load 2>/dev/null || date -r $last_load 2>/dev/null || echo "unknown")
            
            echo "  $cache_key: $load_count loads (last: $last_load_date)"
        done | sort -t: -k2 -nr | head -5
        
        echo ""
        echo "Recently refreshed configurations:"
        grep -l "last_refresh" "$SENTINEL_CONFIG_CACHE_DIR"/*.stats 2>/dev/null | while read stats_file; do
            local cache_key=$(basename "$stats_file" .stats)
            local last_refresh=$(grep "last_refresh=" "$stats_file" | cut -d= -f2)
            local last_refresh_date=$(date -d @$last_refresh 2>/dev/null || date -r $last_refresh 2>/dev/null || echo "unknown")
            
            echo "  $cache_key: $last_refresh_date"
        done | sort -t: -k2 -nr | head -5
    fi
}

# Override the standard load_cached_config with our enhanced version
load_cached_config() {
    config_cache_load "$@"
    return $?
}

# Run initial cleanup in the background
(config_cache_cleanup >/dev/null 2>&1 &)

# Export functions
export -f config_cache_key
export -f config_cache_load
export -f config_cache_cleanup
export -f config_cache_stats
export -f load_cached_config  # Override the standard function

# Log successful initialization
if type sentinel_log_info &>/dev/null; then
    sentinel_log_info "config_cache" "Configuration cache module initialized"
fi 