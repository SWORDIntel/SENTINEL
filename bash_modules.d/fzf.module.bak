#!/usr/bin/env bash
# SENTINEL - FZF Integration Module
# Version: 1.0.0
# Description: Integrates fzf (Fuzzy Finder) with SENTINEL and BLE.sh for enhanced fuzzy finding and completion
# Dependencies: fzf, ble.sh
# Maintainer: SENTINEL Team

# Make sure we have color variables defined to prevent crashes
RED="\033[0;31m" 2>/dev/null || RED=""
GREEN="\033[0;32m" 2>/dev/null || GREEN=""
YELLOW="\033[0;33m" 2>/dev/null || YELLOW=""
BLUE="\033[0;34m" 2>/dev/null || BLUE=""
NC="\033[0m" 2>/dev/null || NC=""

# --- Module Enable/Disable Guard with error handling ---
if [[ "${SENTINEL_FZF_ENABLED:-0}" != "1" ]]; then
    { # Silently check if module is disabled; } 2>/dev/null || true
    return 0
fi

# --- Security: Ensure only user can read/modify this file ---
{ chmod 600 "${BASH_SOURCE[0]}"; } 2>/dev/null || true

# --- Check for fzf with safe error handling ---
if ! command -v fzf &>/dev/null; then
    { echo "${YELLOW}Warning: fzf not found. FZF integration disabled.${NC}"; } 2>/dev/null || true
    return 0  # Return success even when fzf is missing to prevent terminal crashes
fi

# --- Check for BLE.sh with comprehensive error handling ---
{
    BLESH_MAIN="${HOME}/.local/share/blesh/ble.sh"
    if ! type -t bleopt &>/dev/null && [[ -f "$BLESH_MAIN" ]]; then
        # Fix for 'unrecognized attach method' error with robust protection
        { export BLESH_ATTACH_METHOD="attach"; } 2>/dev/null || true
        
        # Try multiple sourcing methods with full error protection
        {
            # First try with source and parameters
            { source "$BLESH_MAIN" --attach=attach; } 2>/dev/null || {
                # If that fails, try dot operator
                { . "$BLESH_MAIN"; } 2>/dev/null || {
                    # If all sourcing fails, log but continue silently
                    { echo "${YELLOW}[fzf] Warning: Failed to load ble.sh${NC}" >&2; } 2>/dev/null || true
                }
            }
        } 2>/dev/null || true
    fi
    
    # Check loading status but don't crash if it failed
    if ! type -t bleopt &>/dev/null; then
        { echo "${YELLOW}Warning: BLE.sh not loaded. FZF integration will be limited.${NC}"; } 2>/dev/null || true
    fi
} 2>/dev/null || true

# --- FZF Integration Scripts with robust error handling ---
{
    FZF_INIT=~/.local/share/blesh/contrib/integration/fzf-initialize.bash
    if [[ -f "$FZF_INIT" ]]; then
        # Source with comprehensive error handling
        { source "$FZF_INIT"; } 2>/dev/null || {
            # Try alternative sourcing if the first fails
            { . "$FZF_INIT"; } 2>/dev/null || true
        }
        
        # Only show success message if verbose mode is enabled
        [[ "${SENTINEL_VERBOSE:-0}" == "1" ]] && { echo "${GREEN}FZF integration loaded via $FZF_INIT${NC}"; } 2>/dev/null || true
    else
        # Silent warning in normal mode
        [[ "${SENTINEL_VERBOSE:-0}" == "1" ]] && { echo "${YELLOW}Warning: FZF integration script not found at $FZF_INIT${NC}"; } 2>/dev/null || true
    fi
} 2>/dev/null || true

# --- Environment Customization with error protection ---
{
    export FZF_DEFAULT_COMMAND='fd --type f || find . -type f' 2>/dev/null || true
    export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border' 2>/dev/null || true
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND" 2>/dev/null || true
} 2>/dev/null || true

# --- Logging (only if logger is available) ---
{
    if command -v logger &>/dev/null; then
        # Get version info safely
        local fzf_version="$(fzf --version 2>/dev/null || echo 'unknown')"
        local blesh_version="$(type -t bleopt &>/dev/null && { bleopt --version 2>/dev/null || echo 'error'; } || echo 'not loaded')"
        
        # Log only if logger command exists
        { logger -t SENTINEL "[INFO] FZF module loaded (fzf: $fzf_version, ble.sh: $blesh_version)"; } 2>/dev/null || true
    fi
} 2>/dev/null || true

# --- Security Note ---
# Ensure this module and all integration scripts are not world-writable.

# --- End of fzf.module --- 