#!/usr/bin/env bash
# SENTINEL - Configuration Loader Module
# Version: 1.2.0
# Description: Loads the configuration file for all SENTINEL modules
# Dependencies: None (this should be loaded first)
# Maintainer: SENTINEL Team

# Prevent double loading
[[ -n "${_SENTINEL_CONFIG_LOADER_LOADED}" ]] && return 0
export _SENTINEL_CONFIG_LOADER_LOADED=1

# Set strict error handling
set -o pipefail

# Centralized configuration file location
SENTINEL_CONFIG_FILE="${HOME}/.sentinel/sentinel_config.sh"
SENTINEL_CONFIG_DIR="${HOME}/.sentinel"

# Create necessary directories if they don't exist
_sentinel_ensure_dirs() {
    # Main config directory
    if [[ ! -d "$SENTINEL_CONFIG_DIR" ]]; then
        mkdir -p "$SENTINEL_CONFIG_DIR"
        chmod 700 "$SENTINEL_CONFIG_DIR"  # Secure permissions
    fi
    
    # Required subdirectories
    local subdirs=("logs" "cache" "backups" "autocomplete")
    for subdir in "${subdirs[@]}"; do
        if [[ ! -d "$SENTINEL_CONFIG_DIR/$subdir" ]]; then
            mkdir -p "$SENTINEL_CONFIG_DIR/$subdir"
            chmod 700 "$SENTINEL_CONFIG_DIR/$subdir"
        fi
    done
}

# Check configuration file health
_sentinel_check_config() {
    if [[ ! -f "$SENTINEL_CONFIG_FILE" ]]; then
        echo "Warning: Configuration file not found at $SENTINEL_CONFIG_FILE"
        return 1
    elif [[ ! -r "$SENTINEL_CONFIG_FILE" ]]; then
        echo "Warning: Configuration file exists but is not readable."
        return 1
    fi
    
    # Check for syntax errors in config file
    if ! bash -n "$SENTINEL_CONFIG_FILE" 2>/dev/null; then
        echo "Warning: Configuration file contains syntax errors. Using defaults."
        return 1
    fi
    
    return 0
}

# Create default configuration file
_sentinel_create_default_config() {
    # Ensure directory exists
    _sentinel_ensure_dirs
    
    # Generate a random HMAC key
    local random_key
    if command -v openssl &>/dev/null; then
        random_key=$(openssl rand -hex 16)
    else
        random_key=$(head -c 16 /dev/urandom | xxd -p)
    fi
    
    # Create the config file
    cat > "$SENTINEL_CONFIG_FILE" << EOL
#!/usr/bin/env bash
# SENTINEL Centralized Configuration File
# Version: 1.2.0
# Description: Central configuration for all SENTINEL modules and components
# This file will be automatically sourced by SENTINEL modules

# ====================================================================================
# CORE SYSTEM CONFIGURATION
# ====================================================================================

# Module system configuration
export SENTINEL_QUIET_MODULES=1         # 1=Silent mode (default), 0=Verbose mode
export SENTINEL_DEBUG_MODULES=0         # 0=Normal mode (default), 1=Debug mode 
export SENTINEL_VERIFY_MODULES=1        # Enable HMAC verification for modules
export SENTINEL_REQUIRE_HMAC=1          # Require HMAC signatures for all modules
export SENTINEL_CHECK_MODULE_CONTENT=0  # Check modules for suspicious patterns
#export SENTINEL_HMAC_KEY="random_string" # Custom HMAC key (uncomment and set for better security)

# Module path configuration
export SENTINEL_MODULES_PATH="${HOME}/Documents/GitHub/SENTINEL/bash_modules.d"  # Path to modules directory
export SENTINEL_VENV_DIR="${HOME}/.venv"               # Python virtual environment location

# ====================================================================================
# SECURITY CONFIGURATION
# ====================================================================================

# Secure deletion and handling
export SENTINEL_SECURE_RM=1             # Secure file deletion (srm)

# Secure logout configuration
export SENTINEL_SECURE_BASH_HISTORY=0   # Clear bash history on logout
export SENTINEL_SECURE_SSH_KNOWN_HOSTS=0 # Clear SSH known hosts on logout
export SENTINEL_SECURE_CLEAN_CACHE=0     # Clean cache directory on logout
export SENTINEL_SECURE_BROWSER_CACHE=0   # Clear browser cache/cookies
export SENTINEL_SECURE_RECENT=0          # Clear recently used files
export SENTINEL_SECURE_VIM_UNDO=0        # Clear vim undo history
export SENTINEL_SECURE_CLIPBOARD=0       # Clear clipboard contents
export SENTINEL_SECURE_CLEAR_SCREEN=1    # Clear screen on exit
#export SENTINEL_SECURE_DIRS="/path/to/sensitive/files:/another/path"  # Additional directories to clean
export SENTINEL_WORKSPACE_TEMP=""        # Temporary workspace directory to clean

# ====================================================================================
# MODULE ENABLE/DISABLE CONFIGURATION
# ====================================================================================

# Feature modules
export SENTINEL_OBFUSCATE_ENABLED=1     # Enable obfuscation module
export SENTINEL_OSINT_ENABLED=1         # Enable OSINT module
export SENTINEL_ML_ENABLED=1            # Enable machine learning module
export SENTINEL_CYBERSEC_ENABLED=1      # Enable cybersecurity ML module
export SENTINEL_CHAT_ENABLED=1          # Enable SENTINEL chat module
export SENTINEL_GITSTAR_ENABLED=1       # Enable GitHub star analyzer

# Module-specific configurations
export OBFUSCATE_OUTPUT_DIR="${HOME}/secure/obfuscated_files"  # Output directory for obfuscated files
export HASHCAT_BIN="/usr/bin/hashcat"                        # Path to hashcat binary
export HASHCAT_WORDLISTS_DIR="/usr/share/wordlists"          # Path to wordlists directory  
export HASHCAT_OUTPUT_DIR="${HOME}/.hashcat/cracked"         # Output directory for cracked hashes

# Distcc Configuration
export DISTCC_HOSTS="localhost"          # Space-separated list of compilation hosts
export CCACHE_SIZE="5G"                  # Maximum size of ccache

# ====================================================================================
# AUTOCOMPLETE SYSTEM CONFIGURATION
# ====================================================================================

# Logging configuration
export SENTINEL_LOG_DIR="${HOME}/.sentinel/logs"   # Directory for logs
export SENTINEL_LOG_LEVEL=1             # 0=DEBUG, 1=INFO, 2=WARNING, 3=ERROR, 4=CRITICAL
export SENTINEL_LOG_RETENTION_DAYS=30   # Number of days to keep logs
export SENTINEL_LOG_COLORS_ENABLED=true # Enable colored output in logs
export SENTINEL_LOG_ROTATION_SIZE=1024  # Size in KB before log rotation (1MB default)

# HMAC security configuration
export SENTINEL_SECRET_KEY="${random_key}" # HMAC security key

# BLE.sh configuration
export SENTINEL_BLE_AUTO_INSTALL=1      # Auto-install BLE.sh if not found
export SENTINEL_BLE_AUTO_CONFIGURE=1    # Auto-configure BLE.sh options

# Autocomplete features
export SENTINEL_FUZZY_ENABLED=1         # Enable fuzzy command correction
export SENTINEL_CHAINS_ENABLED=1        # Enable command chain predictions
export SENTINEL_SNIPPETS_ENABLED=1      # Enable command snippets
export SENTINEL_PROJECT_ENABLED=1       # Enable project-specific suggestions

# ====================================================================================
# CUSTOM USER CONFIGURATION
# ====================================================================================

# Add your custom configuration below
# This section will not be modified by SENTINEL updates

# [Custom user settings] 
EOL

    # Set secure permissions
    chmod 600 "$SENTINEL_CONFIG_FILE"
    
    echo "Created default configuration at $SENTINEL_CONFIG_FILE"
    return 0
}

# Load the configuration file
sentinel_load_config() {
    # Ensure directories exist
    _sentinel_ensure_dirs
    
    # Check if the config file exists and is valid
    _sentinel_check_config
    local config_status=$?
    
    # Source the configuration file if it exists and is valid
    if [[ $config_status -eq 0 && -f "$SENTINEL_CONFIG_FILE" ]]; then
        source "$SENTINEL_CONFIG_FILE"
        
        # Only show message if debug mode is enabled or we're not in quiet mode
        if [[ "${SENTINEL_DEBUG_MODULES:-0}" == "1" || "${SENTINEL_QUIET_MODULES:-1}" != "1" ]]; then
            echo "Loaded configuration from $SENTINEL_CONFIG_FILE"
        fi
        return 0
    else
        # Create default configuration if it doesn't exist
        if [[ ! -f "$SENTINEL_CONFIG_FILE" ]]; then
            _sentinel_create_default_config
            source "$SENTINEL_CONFIG_FILE"
            return $?
        else
            # Load default values if config file exists but has errors
            SENTINEL_QUIET_MODULES=1
            SENTINEL_DEBUG_MODULES=0
            SENTINEL_OBFUSCATE_ENABLED=1
            SENTINEL_OSINT_ENABLED=1
            SENTINEL_ML_ENABLED=1
            SENTINEL_CYBERSEC_ENABLED=1
            SENTINEL_CHAT_ENABLED=1
            SENTINEL_GITSTAR_ENABLED=1
            SENTINEL_FUZZY_ENABLED=1
            SENTINEL_CHAINS_ENABLED=1
            SENTINEL_SNIPPETS_ENABLED=1
            SENTINEL_PROJECT_ENABLED=1
            SENTINEL_SECURE_RM=1
            SENTINEL_SECURE_BASH_HISTORY=0
            SENTINEL_SECURE_SSH_KNOWN_HOSTS=0
            
            echo "Using default configuration (config file has errors)"
            return 1
        fi
    fi
}

# Function to reload configuration
sentinel_reload_config() {
    if source "$SENTINEL_CONFIG_FILE"; then
        echo "Configuration reloaded."
        return 0
    else
        echo "Failed to reload configuration."
        return 1
    fi
}

# Function to edit configuration
sentinel_edit_config() {
    local editor="${EDITOR:-nano}"
    if command -v nano >/dev/null 2>&1; then
        editor="nano"
    fi
    
    # Create a backup before editing
    mkdir -p "${SENTINEL_CONFIG_DIR}/backups"
    cp "$SENTINEL_CONFIG_FILE" "${SENTINEL_CONFIG_DIR}/backups/sentinel_config.sh.bak.$(date +%Y%m%d%H%M%S)"
    
    # Open the editor
    $editor "$SENTINEL_CONFIG_FILE"
    
    # After editing, check syntax
    if bash -n "$SENTINEL_CONFIG_FILE" 2>/dev/null; then
        echo "Configuration file syntax is valid."
        echo "Run 'sentinel_reload_config' to apply changes."
    else
        echo "Warning: Configuration file contains syntax errors:"
        bash -n "$SENTINEL_CONFIG_FILE"
    fi
}

# Function to print a specific configuration value
sentinel_get_config() {
    local config_key="$1"
    
    if [[ -z "$config_key" ]]; then
        echo "Usage: sentinel_get_config CONFIG_KEY"
        return 1
    fi
    
    # Source the configuration file if it's not already loaded
    if [[ -z "${SENTINEL_QUIET_MODULES+x}" ]]; then
        sentinel_load_config >/dev/null
    fi
    
    # Return the value
    eval echo "\$${config_key}"
}

# Function to set a specific configuration value
sentinel_set_config() {
    local config_key="$1"
    local config_value="$2"
    
    if [[ -z "$config_key" || -z "$config_value" ]]; then
        echo "Usage: sentinel_set_config CONFIG_KEY CONFIG_VALUE"
        return 1
    fi
    
    # Check if the key exists in the config file
    if grep -q "^export ${config_key}=" "$SENTINEL_CONFIG_FILE"; then
        # Update existing key
        sed -i "s|^export ${config_key}=.*|export ${config_key}=\"${config_value}\"|" "$SENTINEL_CONFIG_FILE"
    else
        # Add new key in the custom section
        sed -i "/# \[Custom user settings\]/a export ${config_key}=\"${config_value}\"" "$SENTINEL_CONFIG_FILE"
    fi
    
    # Set the value in the current environment
    eval "export ${config_key}=\"${config_value}\""
    
    echo "Configuration updated: ${config_key}=${config_value}"
    return 0
}

# Export functions
export -f sentinel_load_config
export -f sentinel_reload_config
export -f sentinel_edit_config
export -f sentinel_get_config
export -f sentinel_set_config
export -f _sentinel_ensure_dirs

# Create convenience commands for use in interactive shells
alias sentinel_config='sentinel_edit_config'
alias sentinel_config_reload='sentinel_reload_config'
alias sentinel_config_get='sentinel_get_config'
alias sentinel_config_set='sentinel_set_config'

# Load configuration automatically when this module is loaded
sentinel_load_config 