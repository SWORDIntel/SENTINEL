#!/usr/bin/env bash
# SENTINEL - Logging Module
# Version: 1.1.0
# Description: Provides centralized logging functionality for all SENTINEL modules
# Dependencies: config_loader (for centralized configuration)
# Maintainer: SENTINEL Team

# Prevent double loading
[[ -n "${_SENTINEL_LOGGING_LOADED}" ]] && return 0
export _SENTINEL_LOGGING_LOADED=1

# Log directory location
SENTINEL_LOG_DIR=~/.sentinel/logs

# Define log levels
SENTINEL_LOG_LEVEL_DEBUG=0
SENTINEL_LOG_LEVEL_INFO=1
SENTINEL_LOG_LEVEL_WARNING=2
SENTINEL_LOG_LEVEL_ERROR=3
SENTINEL_LOG_LEVEL_CRITICAL=4

# Use centralized config, or fall back to defaults if not available/loaded
if [[ -n "$SENTINEL_CONFIG_FILE" && -f "$SENTINEL_CONFIG_FILE" ]]; then
    # Config already loaded, use existing values (do nothing)
    :
else
    # Default values if config_loader wasn't loaded first
    : "${SENTINEL_LOG_LEVEL:=1}"  # Default to INFO
    : "${SENTINEL_LOG_RETENTION_DAYS:=30}"
    : "${SENTINEL_LOG_COLORS_ENABLED:=true}"
    : "${SENTINEL_LOG_ROTATION_SIZE:=1024}"  # 1MB
fi

# Main logging function
sentinel_log() {
    local level=$1
    local component=$2
    local message=$3
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local log_file="$SENTINEL_LOG_DIR/${component}-$(date +%Y%m%d).log"
    local exit_code=${4:-0}
    
    # Early return if log level is below configured level
    # Example: If SENTINEL_LOG_LEVEL=2 (WARNING), DEBUG(0) and INFO(1) are skipped
    [[ $level -lt $SENTINEL_LOG_LEVEL ]] && return 0
    
    # Ensure log directory exists
    mkdir -p "$SENTINEL_LOG_DIR"
    
    # Convert level to text
    local level_text
    case $level in
        $SENTINEL_LOG_LEVEL_DEBUG)
            level_text="DEBUG"
            ;;
        $SENTINEL_LOG_LEVEL_INFO)
            level_text="INFO"
            ;;
        $SENTINEL_LOG_LEVEL_WARNING)
            level_text="WARNING"
            ;;
        $SENTINEL_LOG_LEVEL_ERROR)
            level_text="ERROR"
            ;;
        $SENTINEL_LOG_LEVEL_CRITICAL)
            level_text="CRITICAL"
            ;;
        *)
            level_text="UNKNOWN"
            ;;
    esac
    
    # Format: [TIMESTAMP] [LEVEL] [COMPONENT] Message
    local log_entry="[$timestamp] [$level_text] [$component] $message"
    
    # Write to log file
    echo "$log_entry" >> "$log_file"
    
    # For errors and critical messages, also output to stderr if we're in a terminal
    if [[ $level -ge $SENTINEL_LOG_LEVEL_ERROR && -t 1 ]]; then
        if [[ "$SENTINEL_LOG_COLORS_ENABLED" == "true" ]]; then
            # Color coding for terminal output
            local color
            if [[ $level -eq $SENTINEL_LOG_LEVEL_ERROR ]]; then
                color="\033[1;31m" # Red
            else
                color="\033[1;35m" # Purple for critical
            fi
            echo -e "${color}$log_entry\033[0m" >&2
        else
            echo "$log_entry" >&2
        fi
    fi
    
    # Check log file size and rotate if needed
    local file_size=$(stat -c %s "$log_file" 2>/dev/null || echo "0")
    if [[ $file_size -gt $SENTINEL_LOG_ROTATION_SIZE ]]; then
        # Convert to KB for comparison
        file_size=$(( file_size / 1024 ))
        if [[ $file_size -gt $SENTINEL_LOG_ROTATION_SIZE ]]; then
            # Rotate log file
            mv "$log_file" "${log_file}.1"
            sentinel_log $SENTINEL_LOG_LEVEL_INFO "logging" "Rotated log file $log_file ($file_size KB)"
        fi
    fi
    
    return $exit_code
}

# Specific logging functions for each level
sentinel_log_debug() {
    local component=$1
    local message=$2
    sentinel_log $SENTINEL_LOG_LEVEL_DEBUG "$component" "$message"
}

sentinel_log_info() {
    local component=$1
    local message=$2
    sentinel_log $SENTINEL_LOG_LEVEL_INFO "$component" "$message"
}

sentinel_log_warning() {
    local component=$1
    local message=$2
    sentinel_log $SENTINEL_LOG_LEVEL_WARNING "$component" "$message"
}

sentinel_log_error() {
    local component=$1
    local message=$2
    sentinel_log $SENTINEL_LOG_LEVEL_ERROR "$component" "$message"
}

sentinel_log_critical() {
    local component=$1
    local message=$2
    sentinel_log $SENTINEL_LOG_LEVEL_CRITICAL "$component" "$message"
}

# Function to clean up old log files
sentinel_log_cleanup() {
    # Allow override of default retention period
    local retention_days="${1:-$SENTINEL_LOG_RETENTION_DAYS}"
    
    # Ensure log directory exists
    if [[ ! -d "$SENTINEL_LOG_DIR" ]]; then
        mkdir -p "$SENTINEL_LOG_DIR"
    fi
    
    # Remove logs older than retention_days
    find "$SENTINEL_LOG_DIR" -type f -name "*.log*" -mtime "+${retention_days}" -delete 2>/dev/null
    
    # Log the cleanup action
    sentinel_log_info "logging" "Cleaned up log files older than $retention_days days"
}

# Function to display recent logs
# Usage: sentinel_show_logs [component] [lines=20]
sentinel_show_logs() {
    local component="${1:-all}"
    local lines="${2:-20}"
    
    local log_pattern="$SENTINEL_LOG_DIR/${component}-*.log"
    
    if [[ ! -d "$SENTINEL_LOG_DIR" ]]; then
        echo "Log directory not found. No logs to display."
        return 1
    fi
    
    if [[ "$component" == "all" ]]; then
        log_pattern="$SENTINEL_LOG_DIR/*.log"
    fi
    
    if ! ls $log_pattern 1>/dev/null 2>&1; then
        echo "No logs found for component: $component"
        return 1
    fi
    
    # Display the most recent logs
    echo "=== Recent logs for $component (last $lines lines) ==="
    
    # Use colors if enabled and we're in a terminal
    if [[ "$SENTINEL_LOG_COLORS_ENABLED" == "true" && -t 1 ]]; then
        # More sophisticated colorization
        ls -t $log_pattern | head -1 | xargs tail -n $lines | 
        sed -E 's/\[(DEBUG)\]/[\\033[1;34m\1\\033[0m]/g' | 
        sed -E 's/\[(INFO)\]/[\\033[1;32m\1\\033[0m]/g' | 
        sed -E 's/\[(WARNING)\]/[\\033[1;33m\1\\033[0m]/g' | 
        sed -E 's/\[(ERROR)\]/[\\033[1;31m\1\\033[0m]/g' | 
        sed -E 's/\[(CRITICAL)\]/[\\033[1;35m\1\\033[0m]/g' |
        sed 's/\\033/\x1B/g'
    else
        ls -t $log_pattern | head -1 | xargs tail -n $lines
    fi
    
    echo "=== End of logs ==="
}

# Usage: sentinel_log_exception <component> <message> [exit_code]
sentinel_log_exception() {
    local component=$1
    local message=$2
    local exit_code=${3:-1}
    
    # Get stack trace
    local i=0
    local stack_trace=""
    while caller $i > /dev/null; do
        local j=$i
        ((i++))
        caller $j >> /dev/null || break
        local frame=$(caller $j)
        stack_trace="$stack_trace\n    at ${frame}"
    done
    
    # Format the exception message
    local exception_msg="Exception: $message$stack_trace"
    
    # Log the exception
    sentinel_log_error "$component" "$exception_msg"
    
    return $exit_code
}

# Initialize the logging system
sentinel_init_logging() {
    # Create log directory if it doesn't exist
    mkdir -p "$SENTINEL_LOG_DIR"
    
    # Schedule log cleanup in background to avoid slowing down shell startup
    (sentinel_log_cleanup >/dev/null 2>&1 &)
    
    # Log that the logging system is initialized
    sentinel_log_info "logging" "Logging system initialized (level=${SENTINEL_LOG_LEVEL})"
    
    return 0
}

# Export functions
export -f sentinel_log
export -f sentinel_log_debug
export -f sentinel_log_info
export -f sentinel_log_warning
export -f sentinel_log_error
export -f sentinel_log_critical
export -f sentinel_log_cleanup
export -f sentinel_show_logs
export -f sentinel_log_exception

# Initialize logging system
sentinel_init_logging 