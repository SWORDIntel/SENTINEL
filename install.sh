#!/usr/bin/env bash
###############################################################################
# SENTINEL – Framework installer
# -----------------------------------------------
# Hardened edition  •  v2.1.0  •  2025-05-16
# Installs/repairs  ~/.sentinel  and patches the
# user’s Bash startup chain in an idempotent way.
###############################################################################
# Coding standards
#   • Strict mode:  set -euo pipefail
#   • All paths quoted, no implicit cd
#   • No eval; never rely on $IFS splitting
#   • Verbose log + coloured status lines
#   • Resumable: skips steps already done
###############################################################################

set -euo pipefail

# --------- 1. Globals & helpers ---------------------------------------------
PROJECT_ROOT="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
SENTINEL_HOME="${HOME}/.sentinel"
LOG_DIR="${SENTINEL_HOME}/logs"
STATE_FILE="${SENTINEL_HOME}/install.state"
BLESH_DIR="${HOME}/.local/share/blesh"
BLESH_LOADER="${SENTINEL_HOME}/blesh_loader.sh"

# Colour helpers
c_red=$'\033[1;31m'; c_green=$'\033[1;32m'; c_yellow=$'\033[1;33m'; c_blue=$'\033[1;34m'; c_reset=$'\033[0m'

log() { printf '[%(%F %T)T] %b\n' -1 "$*" | tee -a "${LOG_DIR}/install.log"; }
step() { log "${c_blue}==>${c_reset} $*"; }
ok()   { log "${c_green}✔${c_reset}  $*"; }
warn() { log "${c_yellow}⚠${c_reset}  $*"; }
fail() { log "${c_red}✖${c_reset}  $*"; exit 1; }

trap 'fail "Installer aborted on line $LINENO; see ${LOG_DIR}/install.log"' ERR

mkdir -p "${LOG_DIR}"

# --------- 2. Minimal dependency check  -------------------------------------
REQUIRED_CMDS=(git make awk sed)
MISSING=()
for cmd in "${REQUIRED_CMDS[@]}"; do
  command -v "${cmd}" &>/dev/null || MISSING+=("${cmd}")
done
if ((${#MISSING[@]})); then
  fail "Missing system packages: ${MISSING[*]}.  Install them and re-run."
fi
ok "All required CLI tools present"

# --------- 3. Idempotent state helper ---------------------------------------
mark_done()  { echo "$1" >> "${STATE_FILE}"; }
is_done()    { grep -qxF "$1" "${STATE_FILE:-/dev/null}"; }

# --------- 4. Create ~/.sentinel skeleton -----------------------------------
if ! is_done "DIRS_CREATED"; then
  step "Creating directory tree under ${SENTINEL_HOME}"
  mkdir -p \
    "${SENTINEL_HOME}"/{autocomplete/{snippets,context,projects,params},logs} \
    "${HOME}/.cache/blesh"
  chmod 700 "${SENTINEL_HOME}" "${LOG_DIR}"
  mark_done "DIRS_CREATED"
  ok "Directory tree ready"
fi

# --------- 5. Install / update BLE.sh ---------------------------------------
install_blesh() {
  step "Installing BLE.sh to ${BLESH_DIR}"
  git clone --depth=1 https://github.com/akinomyoga/ble.sh.git "${BLESH_DIR}"
  make -C "${BLESH_DIR}" install PREFIX="${HOME}/.local" \
       >/dev/null
  ok "BLE.sh installed"
}

if ! is_done "BLESH_INSTALLED"; then
  if [[ -f "${BLESH_DIR}/ble.sh" ]]; then
    ok "BLE.sh already present – skipping clone"
  else
    install_blesh
  fi
  mark_done "BLESH_INSTALLED"
fi

# --------- 6. Drop BLE loader ------------------------------------------------
if ! is_done "BLESH_LOADER_DROPPED"; then
  step "Writing BLE.sh loader ${BLESH_LOADER}"
  cat > "${BLESH_LOADER}" <<'EOF'
# Auto-generated by SENTINEL installer
# shellcheck shell=bash
if [[ -n ${SENTINEL_BLESH_LOADED:-} ]]; then return; fi
export SENTINEL_BLESH_LOADED=1
BLESH_MAIN="${HOME}/.local/share/blesh/ble.sh"
if [[ -f ${BLESH_MAIN} ]]; then
  source "${BLESH_MAIN}" --attach=overhead
fi
EOF
  chmod 644 "${BLESH_LOADER}"
  mark_done "BLESH_LOADER_DROPPED"
  ok "BLE.sh loader ready"
fi

# --------- 7. Patch user’s Bash start-up chain ------------------------------
patch_bashrc() {
  local rc="$1"
  local needle='### SENTINEL BOOTSTRAP ###'
  grep -qxF "${needle}" "${rc}" 2>/dev/null && return 0   # already patched
  step "Patching ${rc}"
  cat >> "${rc}" <<EOF

${needle}
if [[ -f "${SENTINEL_HOME}/bashrc.postcustom" ]]; then
  source "${SENTINEL_HOME}/bashrc.postcustom"
fi
### END SENTINEL BOOTSTRAP ###
EOF
  ok "${rc} patched"
}

if ! is_done "BASHRC_PATCHED"; then
  patch_bashrc "${HOME}/.bashrc"
  mark_done "BASHRC_PATCHED"
fi

# --------- 8. Copy post-custom bootstrap ------------------------------------
if ! is_done "POSTCUSTOM_READY"; then
  step "Deploying bashrc.postcustom"
  install -m 644 "${PROJECT_ROOT}/bashrc.postcustom" "${SENTINEL_HOME}/bashrc.postcustom"
  ok "bashrc.postcustom in place"
  mark_done "POSTCUSTOM_READY"
fi

# --------- 9. Install core modules ------------------------------------------
if ! is_done "CORE_MODULES_INSTALLED"; then
  step "Copying core bash modules"
  rsync -a --delete \
    "${PROJECT_ROOT}/bash_modules/" "${SENTINEL_HOME}/bash_modules/"
  ok "Modules synced"
  mark_done "CORE_MODULES_INSTALLED"
fi

# ---------10. Final summary --------------------------------------------------
echo
ok "Installation completed successfully!"
echo "• Open a new terminal OR run:  source '${SENTINEL_HOME}/bashrc.postcustom'"
echo "• Verify with:                @autocomplete status"
echo "• Logs:                       ${LOG_DIR}/install.log"
