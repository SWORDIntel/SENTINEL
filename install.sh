#!/usr/bin/env bash
###############################################################################
# SENTINEL – Framework installer
# -----------------------------------------------
# Hardened edition  •  v2.2.0  •  2025-05-16
# Installs/repairs  ~/.sentinel  and patches the
# user's Bash startup chain in an idempotent way.
###############################################################################
# Coding standards
#   • Strict mode:  set -euo pipefail
#   • All paths quoted, no implicit cd
#   • No eval; never rely on $IFS splitting
#   • Verbose log + coloured status lines
#   • Resumable: skips steps already done
###############################################################################

set -euo pipefail

# --------- 1. Globals & helpers ---------------------------------------------
PROJECT_ROOT="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
SENTINEL_HOME="${HOME}/.sentinel"
LOG_DIR="${SENTINEL_HOME}/logs"
STATE_FILE="${SENTINEL_HOME}/install.state"
BLESH_DIR="${HOME}/.local/share/blesh"
BLESH_LOADER="${SENTINEL_HOME}/blesh_loader.sh"

# Colour helpers
c_red=$'\033[1;31m'; c_green=$'\033[1;32m'; c_yellow=$'\033[1;33m'; c_blue=$'\033[1;34m'; c_reset=$'\033[0m'

log() { printf '[%(%F %T)T] %b\n' -1 "$*" | tee -a "${LOG_DIR}/install.log"; }
step() { log "${c_blue}==>${c_reset} $*"; }
ok()   { log "${c_green}✔${c_reset}  $*"; }
warn() { log "${c_yellow}⚠${c_reset}  $*"; }
fail() { log "${c_red}✖${c_reset}  $*"; exit 1; }

trap 'fail "Installer aborted on line $LINENO; see ${LOG_DIR}/install.log"' ERR

mkdir -p "${LOG_DIR}"

# --------- 2. Minimal dependency check  -------------------------------------
REQUIRED_CMDS=(git make awk sed rsync)
MISSING=()
for cmd in "${REQUIRED_CMDS[@]}"; do
  command -v "${cmd}" &>/dev/null || MISSING+=("${cmd}")
done
if ((${#MISSING[@]})); then
  fail "Missing system packages: ${MISSING[*]}.  Install them and re-run."
fi
ok "All required CLI tools present"

# --------- 3. Idempotent state helper ---------------------------------------
mark_done()  { echo "$1" >> "${STATE_FILE}"; }
is_done()    { grep -qxF "$1" "${STATE_FILE:-/dev/null}" 2>/dev/null; }

# --------- 4. Create ~/.sentinel skeleton -----------------------------------
if ! is_done "DIRS_CREATED"; then
  step "Creating directory tree under ${SENTINEL_HOME}"
  mkdir -p \
    "${SENTINEL_HOME}"/{autocomplete/{snippets,context,projects,params},logs} \
    "${HOME}/.cache/blesh"
  chmod 700 "${SENTINEL_HOME}" "${LOG_DIR}"
  mark_done "DIRS_CREATED"
  ok "Directory tree ready"
fi

# --------- 5. Install / update BLE.sh ---------------------------------------
install_blesh() {
  step "Installing BLE.sh to ${BLESH_DIR}"
  git clone --depth=1 https://github.com/akinomyoga/ble.sh.git "${BLESH_DIR}"
  make -C "${BLESH_DIR}" install PREFIX="${HOME}/.local" >/dev/null
  ok "BLE.sh installed"
}

if ! is_done "BLESH_INSTALLED"; then
  if [[ -f "${BLESH_DIR}/ble.sh" ]]; then
    ok "BLE.sh already present – skipping clone"
  else
    install_blesh
  fi
  mark_done "BLESH_INSTALLED"
fi

# --------- 6. Drop BLE loader ------------------------------------------------
if ! is_done "BLESH_LOADER_DROPPED"; then
  step "Writing BLE.sh loader ${BLESH_LOADER}"
  cat > "${BLESH_LOADER}" <<'EOF'
# Auto-generated by SENTINEL installer
# shellcheck shell=bash
if [[ -n ${SENTINEL_BLESH_LOADED:-} ]]; then return; fi
export SENTINEL_BLESH_LOADED=1
BLESH_MAIN="${HOME}/.local/share/blesh/ble.sh"
if [[ -f ${BLESH_MAIN} ]]; then
  source "${BLESH_MAIN}" --attach=overhead
fi
EOF
  chmod 644 "${BLESH_LOADER}"
  mark_done "BLESH_LOADER_DROPPED"
  ok "BLE.sh loader ready"
fi

# --------- 7. Patch user's Bash start-up chain ------------------------------
patch_bashrc() {
  local rc="$1"
  local sentinel_bashrc="${PROJECT_ROOT}/bashrc"
  if [[ -f "$rc" ]]; then
    cp "$rc" "$rc.sentinel.bak"
    ok "Backed up $rc to $rc.sentinel.bak"
  fi
  step "Prompting for full replacement of $rc with SENTINEL bashrc"
  read -p "Replace your $rc with SENTINEL's secure version? [y/N]: " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    if [[ -f "$sentinel_bashrc" ]]; then
      cp "$sentinel_bashrc" "$rc.tmp" && mv "$rc.tmp" "$rc"
      ok "SENTINEL bashrc installed as $rc"
      log "Replaced $rc with SENTINEL bashrc at $(date)"
    else
      warn "SENTINEL bashrc not found at $sentinel_bashrc; skipping replacement."
    fi
  else
    warn "User declined SENTINEL bashrc replacement for $rc. Skipping."
  fi
}

if ! is_done "BASHRC_PATCHED"; then
  patch_bashrc "${HOME}/.bashrc"
  mark_done "BASHRC_PATCHED"
fi

# --------- 8. Copy post-custom bootstrap ------------------------------------
if ! is_done "POSTCUSTOM_READY"; then
  step "Deploying bashrc.postcustom"
  install -m 644 "${PROJECT_ROOT}/bashrc.postcustom" "${SENTINEL_HOME}/bashrc.postcustom"
  ok "bashrc.postcustom in place"
  mark_done "POSTCUSTOM_READY"
fi

# --------- 9. Install core modules  (bash_modules or bash.modules.d) ---------
if ! is_done "CORE_MODULES_INSTALLED"; then
  MODULE_SRC=""
  MODULE_DST=""
  for cand in "bash_modules" "bash.modules.d"; do
    if [[ -d "${PROJECT_ROOT}/${cand}" ]]; then
      MODULE_SRC="${PROJECT_ROOT}/${cand}"
      MODULE_DST="${SENTINEL_HOME}/${cand}"
      break
    fi
  done

  if [[ -n ${MODULE_SRC} ]]; then
    step "Copying core bash modules from '${cand}/'"
    rsync -a --delete "${MODULE_SRC}/" "${MODULE_DST}/"
    ok "Modules synced → ${MODULE_DST}"

    # Provide stable autocomplete path when using bash.modules.d layout
    if [[ ${cand} == "bash.modules.d" && ! -e "${SENTINEL_HOME}/autocomplete" ]]; then
      ln -s "${MODULE_DST}/autocomplete" "${SENTINEL_HOME}/autocomplete"
      ok "Symlink ~/.sentinel/autocomplete → bash.modules.d/autocomplete created"
    fi

    # Automatically run install-autocomplete.sh if present
    local AUTOCOMPLETE_INSTALLER="${MODULE_SRC}/install-autocomplete.sh"
    if [[ -f "$AUTOCOMPLETE_INSTALLER" ]]; then
      step "Running modular autocomplete installer: $AUTOCOMPLETE_INSTALLER"
      bash "$AUTOCOMPLETE_INSTALLER" || warn "install-autocomplete.sh failed; check logs."
      ok "Modular autocomplete installer completed"
    else
      warn "install-autocomplete.sh not found in $MODULE_SRC; autocomplete modules may not be fully installed."
    fi
  else
    warn "No bash_modules/ or bash.modules.d/ directory found – skipping module sync"
  fi

  mark_done "CORE_MODULES_INSTALLED"
fi

# --------- 9a. Enable FZF module if fzf is present ---------
FZF_BIN="$(command -v fzf 2>/dev/null || true)"
POSTCUSTOM_FILE="${SENTINEL_HOME}/bashrc.postcustom"
if [[ -n "$FZF_BIN" ]]; then
  step "fzf detected at $FZF_BIN; enabling SENTINEL FZF module in bashrc.postcustom"
  if ! grep -q '^export SENTINEL_FZF_ENABLED=1' "$POSTCUSTOM_FILE"; then
    echo 'export SENTINEL_FZF_ENABLED=1' >> "$POSTCUSTOM_FILE"
    ok "Enabled SENTINEL FZF module in $POSTCUSTOM_FILE"
  fi
else
  warn "fzf not found; SENTINEL FZF module not enabled by default. Install fzf and set export SENTINEL_FZF_ENABLED=1 in $POSTCUSTOM_FILE to enable."
fi

# --------- 10. Final summary --------------------------------------------------
echo
ok "Installation completed successfully!"
echo "• Open a new terminal OR run:  source '${SENTINEL_HOME}/bashrc.postcustom'"
echo "• Verify with:                @autocomplete status"
echo "• Logs:                       ${LOG_DIR}/install.log"

# --------- 11. Secure permissions on all SENTINEL files and modules ---------
if ! is_done "PERMISSIONS_SECURED"; then
  step "Securing permissions on all SENTINEL files and modules"
  # Secure all directories
  find "${SENTINEL_HOME}" -type d -exec chmod 700 {} +
  # Secure all .module, .sh, .py, .postcustom, loader, and .bashrc files
  find "${SENTINEL_HOME}" \( -name "*.module" -o -name "*.sh" -o -name "*.py" -o -name "*.postcustom" -o -name "bashrc" -o -name "blesh_loader.sh" \) -exec chmod 600 {} +
  # Secure .bashrc in home
  if [[ -f "$HOME/.bashrc" ]]; then chmod 600 "$HOME/.bashrc"; fi
  # Secure .blerc if present
  if [[ -f "$HOME/.blerc" ]]; then chmod 600 "$HOME/.blerc"; fi
  # Secure .cache/blesh directory if present
  if [[ -d "$HOME/.cache/blesh" ]]; then chmod 700 "$HOME/.cache/blesh"; fi
  ok "Permissions set: 700 for directories, 600 for files"
  mark_done "PERMISSIONS_SECURED"
fi
