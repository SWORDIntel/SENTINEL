#!/usr/bin/env bash
# ~/bashrc.postcustom
#
# This file is included very last after running bashrc. 
# You can use this to change things like environment variables set
# without needing to edit the distributed version

#========================================================================
#========================================================================

# Module System Behavior - Global Settings
# ----------------------------------------
# These settings control how the module system operates

# Module Security Configuration
# ----------------------------
# These settings control module security verification

#========================================================================
# MODULE-SPECIFIC CONFIGURATIONS
#========================================================================

# Obfuscation Module
# ------------------
export SENTINEL_OBFUSCATE_ENABLED=1
export OBFUSCATE_OUTPUT_DIR="${HOME}/secure/obfuscated_files"
# Optional: set a custom temp directory for obfuscation
# export OBFUSCATE_TEMP_DIR="/tmp/obfuscate_temp"

# OSINT Module
# ------------
export SENTINEL_OSINT_ENABLED=1

# ML Modules
# ----------
export SENTINEL_ML_ENABLED=1

# Chat Module
# -----------
export SENTINEL_CHAT_ENABLED=1

# GitHub Star Analyzer
# -------------------
export SENTINEL_GITSTAR_ENABLED=1

# Hashcat Configuration
# --------------------
export HASHCAT_BIN="/usr/bin/hashcat"
export HASHCAT_WORDLISTS_DIR="/usr/share/wordlists"
export HASHCAT_OUTPUT_DIR="${HOME}/.hashcat/cracked"

# Secure Logout Configuration
# --------------------------
export SENTINEL_CYBERSEC_ENABLED=1

# Distcc Configuration
# -------------------
export DISTCC_HOSTS="localhost"          # Space-separated list of compilation hosts
export CCACHE_SIZE="5G"                  # Maximum size of ccache

#========================================================================
# CUSTOM PROMPT CONFIGURATION (OPTIONAL)
#========================================================================
# Uncomment to override the default prompt
# export PS1=

#========================================================================
# USER CUSTOMIZATIONS
#========================================================================
# Add your custom configurations, aliases, and functions below

# Source centralized configuration

# =============================
# =============================

# =============================
# =============================
# SAFER module loading with ultra-robust error handling
# This completely prevents terminal crashes even if modules are broken
{ 
    # Only attempt module loading if the file exists
    if [[ -f "${HOME}/.bash_modules" ]]; then
        # Read modules in a protected way that can't crash the terminal
        { 
            while IFS= read -r module || [[ -n "$module" ]]; do
                # Skip empty lines and comments with proper quoting
                [[ -z "$module" || "$module" =~ ^[[:space:]]*# ]] && continue
                
                # Extremely safe module loading with multiple layers of protection
                {
                    # Try module_enable if it exists
                    if type module_enable &>/dev/null; then
                        { module_enable "$module"; } 2>/dev/null || true
                    else
                        # Direct loading with ultimate fallback protection
                        if [[ -f "${HOME}/.bash_modules.d/${module}.module" ]]; then
                            { source "${HOME}/.bash_modules.d/${module}.module"; } 2>/dev/null || true
                        elif [[ -f "${HOME}/.bash_modules.d/${module}.sh" ]]; then
                            { source "${HOME}/.bash_modules.d/${module}.sh"; } 2>/dev/null || true
                        fi
                    fi
                } 2>/dev/null || true
            done < "${HOME}/.bash_modules"
        } 2>/dev/null || true
    fi
} 2>/dev/null || true

# ========================================================================
# Performance Configuration
# ========================================================================
# heavy components. This can significantly reduce shell startup time.
#
# By default, lazy loading is enabled (CONFIG[LAZY_LOAD]=1)
# You can disable it by uncommenting the following line:
# export U_LAZY_LOAD=0
#
# Development environments that are lazy loaded:
# - Pyenv (Python version management)
# - NVM (Node.js version management)
# - RVM (Ruby version management)
# - Cargo (Rust tools)
#
# To lazy load additional tools, use the lazy_load function:
# lazy_load <command> <load_function>
#
# Example:
# function __load_custom_tool() {
#    source /path/to/custom/tool/setup.sh
# }
# lazy_load custom_tool __load_custom_tool
#
# See bash_functions for more predefined loader functions
# ========================================================================

# Add your customizations below this line

# =============================
# Lazy loading for development tools
# =============================
if [[ "${CONFIG[LAZY_LOAD]}" == "1" || "$U_LAZY_LOAD" == "1" ]]; then
    function pyenv() {
        { unset -f pyenv; } 2>/dev/null || true
        if [[ -d "$HOME/.pyenv" ]]; then
            { export PYENV_ROOT="$HOME/.pyenv"; } 2>/dev/null || true
            { export PATH="$PYENV_ROOT/bin:$PATH"; } 2>/dev/null || true
            { eval "$(command pyenv init - 2>/dev/null)"; } 2>/dev/null || true
            { eval "$(command pyenv virtualenv-init - 2>/dev/null)"; } 2>/dev/null || true
            { pyenv "$@"; } 2>/dev/null || return 0
        else
            { echo "pyenv is not installed"; } 2>/dev/null || true
            return 0
        fi
    }
    function nvm() {
        { unset -f nvm; } 2>/dev/null || true
        if [[ -d "$HOME/.nvm" ]]; then
            { export NVM_DIR="$HOME/.nvm"; } 2>/dev/null || true
            { [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; } 2>/dev/null || true
            { [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"; } 2>/dev/null || true
            { nvm "$@"; } 2>/dev/null || return 0
        else
            { echo "nvm is not installed"; } 2>/dev/null || true
            return 0
        fi
    }
    function node() {
        { unset -f node; } 2>/dev/null || true
        { nvm >/dev/null 2>&1; } 2>/dev/null || true
        { node "$@"; } 2>/dev/null || return 0
    }
    function npm() {
        { unset -f npm; } 2>/dev/null || true
        { nvm >/dev/null 2>&1; } 2>/dev/null || true
        { npm "$@"; } 2>/dev/null || return 0
    }
    function python() {
        { unset -f python; } 2>/dev/null || true
        { pyenv >/dev/null 2>&1; } 2>/dev/null || true
        { python "$@"; } 2>/dev/null || return 0
    }
    function pip() {
        { unset -f pip; } 2>/dev/null || true
        { pyenv >/dev/null 2>&1; } 2>/dev/null || true
        { pip "$@"; } 2>/dev/null || return 0
    }
fi

export U_LAZY_LOAD=1

# =============================
# End of bashrc.postcustom
# =============================

# Load BLE.sh if available - with ultra-robust error handling
{
    if [[ -f "${HOME}/blesh_loader.sh" ]]; then
        # Fix for 'unrecognized attach method' error
        { export BLESH_ATTACH_METHOD="attach"; } 2>/dev/null || true
        
        # Super-safe source with multiple layers of protection
        {
            # Try to source with explicit error handling
            { source "${HOME}/blesh_loader.sh"; } 2>/dev/null || {
                # If that fails, try the dot operator
                { . "${HOME}/blesh_loader.sh"; } 2>/dev/null || true
            }
        } 2>/dev/null || true
    fi
} 2>/dev/null || true

# =============================
# SENTINEL Feature Module Toggles
# =============================
# Uncomment to enable/disable specific SENTINEL feature modules:
export SENTINEL_OBFUSCATE_ENABLED=1
export SENTINEL_FZF_ENABLED=1
export SENTINEL_ML_ENABLED=1
export SENTINEL_OSINT_ENABLED=1
export SENTINEL_CYBERSEC_ENABLED=1
export SENTINEL_GITSTAR_ENABLED=1
export SENTINEL_CHAT_ENABLED=1
# =============================

# Configuration Caching System
# ------------------------
# Controls how configuration files are cached for faster shell startup
export SENTINEL_CONFIG_CACHE_ENABLED=1
export SENTINEL_CONFIG_FORCE_REFRESH=0
export SENTINEL_CONFIG_CACHE_RETENTION_DAYS=30
export SENTINEL_CONFIG_VERIFY_HASH=1

# Module System Optimization
# -------------------------
# Controls module dependency resolution and loading behavior
export SENTINEL_MODULE_DEBUG=0
export SENTINEL_MODULE_AUTOLOAD=1
export SENTINEL_MODULE_CACHE_ENABLED=1
export SENTINEL_MODULE_VERIFY=1

# Add your customizations below this line
