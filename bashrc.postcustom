#!/usr/bin/env bash
# ~/bashrc.postcustom
#
# This file is included very last after running bashrc. 
# You can use this to change things like environment variables set
# without needing to edit the distributed version

#========================================================================
#========================================================================

# Module System Behavior - Global Settings
# ----------------------------------------
# These settings control how the module system operates

# Module Security Configuration
# ----------------------------
# These settings control module security verification

#========================================================================
# MODULE-SPECIFIC CONFIGURATIONS
#========================================================================

# Obfuscation Module
# ------------------
export SENTINEL_OBFUSCATE_ENABLED=1
export OBFUSCATE_OUTPUT_DIR="${HOME}/secure/obfuscated_files"
# Optional: set a custom temp directory for obfuscation
# export OBFUSCATE_TEMP_DIR="/tmp/obfuscate_temp"

# OSINT Module
# ------------
export SENTINEL_OSINT_ENABLED=1

# ML Modules
# ----------
export SENTINEL_ML_ENABLED=1

# Chat Module
# -----------
export SENTINEL_CHAT_ENABLED=1

# GitHub Star Analyzer
# -------------------
export SENTINEL_GITSTAR_ENABLED=1

# Hashcat Configuration
# --------------------
export HASHCAT_BIN="/usr/bin/hashcat"
export HASHCAT_WORDLISTS_DIR="/usr/share/wordlists"
export HASHCAT_OUTPUT_DIR="${HOME}/.hashcat/cracked"

# Secure Logout Configuration
# --------------------------
export SENTINEL_CYBERSEC_ENABLED=1

# Distcc Configuration
# -------------------
export DISTCC_HOSTS="localhost"          # Space-separated list of compilation hosts
export CCACHE_SIZE="5G"                  # Maximum size of ccache

#========================================================================
# CUSTOM PROMPT CONFIGURATION (OPTIONAL)
#========================================================================
# Uncomment to override the default prompt
# export PS1=

#========================================================================
# USER CUSTOMIZATIONS
#========================================================================
# Add your custom configurations, aliases, and functions below

# Source centralized configuration

# =============================
# =============================

# =============================
# =============================
# Safe module loading with error handling
if [[ -f "${HOME}/.bash_modules" ]]; then
    while IFS= read -r module; do
        # Skip empty lines and comments
        [[ -z "$module" || "$module" =~ ^# ]] && continue
        
        # Check if module_enable function exists
        if type module_enable &>/dev/null; then
            # Safely load module with error redirection
            module_enable "$module" 2>/dev/null || true
        else
            # Direct loading fallback if module_enable isn't available
            if [[ -f "${HOME}/.bash_modules.d/${module}.module" ]]; then
                source "${HOME}/.bash_modules.d/${module}.module" 2>/dev/null || true
            elif [[ -f "${HOME}/.bash_modules.d/${module}.sh" ]]; then
                source "${HOME}/.bash_modules.d/${module}.sh" 2>/dev/null || true
            fi
        fi
    done < "${HOME}/.bash_modules"
fi

# ========================================================================
# Performance Configuration
# ========================================================================
# heavy components. This can significantly reduce shell startup time.
#
# By default, lazy loading is enabled (CONFIG[LAZY_LOAD]=1)
# You can disable it by uncommenting the following line:
# export U_LAZY_LOAD=0
#
# Development environments that are lazy loaded:
# - Pyenv (Python version management)
# - NVM (Node.js version management)
# - RVM (Ruby version management)
# - Cargo (Rust tools)
#
# To lazy load additional tools, use the lazy_load function:
# lazy_load <command> <load_function>
#
# Example:
# function __load_custom_tool() {
#    source /path/to/custom/tool/setup.sh
# }
# lazy_load custom_tool __load_custom_tool
#
# See bash_functions for more predefined loader functions
# ========================================================================

# Add your customizations below this line

# =============================
# Lazy loading for development tools
# =============================
if [[ "${CONFIG[LAZY_LOAD]}" == "1" || "$U_LAZY_LOAD" == "1" ]]; then
    function pyenv() {
        unset -f pyenv
        if [[ -d "$HOME/.pyenv" ]]; then
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(command pyenv init -)"
            eval "$(command pyenv virtualenv-init -)"
            pyenv "$@"
        else
            echo "pyenv is not installed"
            return 1
        fi
    }
    function nvm() {
        unset -f nvm
        if [[ -d "$HOME/.nvm" ]]; then
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
            nvm "$@"
        else
            echo "nvm is not installed"
            return 1
        fi
    }
    function node() {
        unset -f node
        nvm >/dev/null 2>&1
        node "$@"
    }
    function npm() {
        unset -f npm
        nvm >/dev/null 2>&1
        npm "$@"
    }
    function python() {
        unset -f python
        pyenv >/dev/null 2>&1
        python "$@"
    }
    function pip() {
        unset -f pip
        pyenv >/dev/null 2>&1
        pip "$@"
    }
fi

export U_LAZY_LOAD=1

# =============================
# End of bashrc.postcustom
# =============================

# Load BLE.sh if available - with proper error handling
if [[ -f "${HOME}/blesh_loader.sh" ]]; then
    # Fix for 'unrecognized attach method' error
    export BLESH_ATTACH_METHOD="attach"
    source "${HOME}/blesh_loader.sh" 2>/dev/null || true
fi

# =============================
# SENTINEL Feature Module Toggles
# =============================
# Uncomment to enable/disable specific SENTINEL feature modules:
export SENTINEL_OBFUSCATE_ENABLED=1
export SENTINEL_FZF_ENABLED=1
export SENTINEL_ML_ENABLED=1
export SENTINEL_OSINT_ENABLED=1
export SENTINEL_CYBERSEC_ENABLED=1
export SENTINEL_GITSTAR_ENABLED=1
export SENTINEL_CHAT_ENABLED=1
# =============================

# Configuration Caching System
# ------------------------
# Controls how configuration files are cached for faster shell startup
export SENTINEL_CONFIG_CACHE_ENABLED=1
export SENTINEL_CONFIG_FORCE_REFRESH=0
export SENTINEL_CONFIG_CACHE_RETENTION_DAYS=30
export SENTINEL_CONFIG_VERIFY_HASH=1

# Module System Optimization
# -------------------------
# Controls module dependency resolution and loading behavior
export SENTINEL_MODULE_DEBUG=0
export SENTINEL_MODULE_AUTOLOAD=1
export SENTINEL_MODULE_CACHE_ENABLED=1
export SENTINEL_MODULE_VERIFY=1

# Add your customizations below this line
