# nmap bash completion file
# Original by Daniel Miller
# Extended by durandal and iadnah
# Further enhanced for SENTINEL (2023)
#
# Last Update: 2023-08-14
##
#!/usr/bin/env bash
# Helper function to escape special characters in completions
_escape_compreply() {
    local IFS=$'\n'
    local i=0
    local entry
    for entry in ${COMPREPLY[*]}
    do
        if [[ "${cur:0:1}" == "'" ]]; then
            COMPREPLY[$i]="${entry//\'/\'\\\'\'}"
        elif [[ "${cur:0:1}" == '"' ]]; then
            entry="${entry//\\/\\\\}"
            COMPREPLY[$i]="${entry//\"/\\\"}" #"comment
        else
            entry="${entry//\\/\\\\}"
            entry="${entry//\'/\'}"
            entry="${entry//\"/\\\"}"
            COMPREPLY[$i]="${entry// /\\ }"
        fi
        (( i++ ))
    done
}

# Find the line in /proc/net/dev for the interface
_available_interfaces() {
    # Use ip command if available, fallback to ifconfig
    if command -v ip >/dev/null 2>&1; then
        COMPREPLY=( $(compgen -W "$(ip -o link show | awk -F': ' '{print $2}')" -- "$cur") )
    elif command -v ifconfig >/dev/null 2>&1; then
        COMPREPLY=( $(compgen -W "$(ifconfig -a | grep -E '^[a-zA-Z0-9]+:' | cut -d: -f1)" -- "$cur") )
    else
        # Fallback to parsing /proc/net/dev
        local interfaces=$(sed -ne 's|^\s*\([^:]\+\):.*$|\1|p' /proc/net/dev)
        COMPREPLY=( $(compgen -W "$interfaces" -- "$cur") )
    fi
}

# Function to detect nmap installation directory
_find_nmap_dir() {
    [ -z "$NMAPDIR" ] || return 0
    
    local candidates="/usr/share/nmap /usr/local/share/nmap /opt/share/nmap"
    for dir in $candidates; do
        if [ -d "$dir" ]; then
            NMAPDIR="$dir"
            return 0
        fi
    done
    
    # Check if nmap is in PATH and try to determine share directory
    if command -v nmap >/dev/null 2>&1; then
        local nmap_path=$(command -v nmap)
        local bin_dir=$(dirname "$nmap_path")
        local prefix=$(dirname "$bin_dir")
        local share_dir="$prefix/share/nmap"
        
        if [ -d "$share_dir" ]; then
            NMAPDIR="$share_dir"
            return 0
        fi
    fi
    
    return 1
}

# Main nmap completion function
_nmap() {
    COMPREPLY=()
    local cur prev words cword
    _init_completion || return
    
    # Make sure NMAPDIR is set
    _find_nmap_dir || return 1
    
    # Common options (frequently used)
    local common_options="-b -D -f -g -M -r -R -S -V
-6 (IPv6 scan)
-A (-O -sV -sC --traceroute)
-d[LEVEL] (debug mode)
-e <iface> (Use specified interface)
-F (Scan top 100 ports)
--help (Print help and exit)
-i[INPUT_TARGETS] (Alternative target specification)
-n (No DNS resolution)
-O (OS detection)
-o[OUTPUT_TYPE] (Output to file)
--open (Show open ports only)
-P[PING_TYPE] (Host discovery type)
-p[PORTS] (Ports to scan)
--reason (Show why port is open/closed)
--script <NSE scripts> (run these scripts)
-s[SCAN_TECHNIQUES] (Scan type to use)
--top-ports <number> (Scan <number> most common ports)
--traceroute (Do traceroute on targets)
-T[TIMING] (Timing templates)
-v (Be verbose)
--version (Show version and exit)"

    # Ping types for host discovery
    local ping_types="-PN (skip host discovery)
-PS[portlist] (TCP SYN)
-PA[portlist] (TCP ACK)
-PU[portlist] (UDP)
-PY[portlist] (SCTP)
-PE (ICMP echo)
-PP (ICMP timestamp)
-PM (ICMP netmask)
-PO[protocol list] (IP Protocol)
-PR (ARP scan)"

    # Scan types
    local scan_types="-sL (List only)
-sS (TCP SYN)
-sT (TCP Connect)
-sA (TCP ACK)
-sW (TCP Window)
-sM (TCP Maimon)
-sU (UDP)
-sN (TCP Null)
-sF (TCP FIN)
-sX (TCP Xmas)
-sI <zombie host[:probeport]> (Idle scan)
-sY (SCTP INIT)
-sZ (SCTP COOKIE-ECHO)
-sO (IP Protocol)
-sV (Version scan)
-sC (--script=default)
-sn (skip port scan)"

    # Input types
    local input_types="-iL <inputfilename> (Input from list of hosts/networks)
-iR <num hosts> (Choose random targets)"

    # Output types
    local output_types="-oA <basename> (Normal, XML, and Grepable, auto-add extension)
-oN <file> (Normal output)
-oX <file> (XML output)
-oS <file> (s|<rIpt kIddi3)
-oG <file> (Grepable output)
-oJ <file> (JSON output)"

    # All options
    local all_options="-6 -A --adler32 --allports --append-output -b --badsum -d -D --datadir --data-length --debug --defeat-rst-ratelimit --dns-servers -e --exclude --exclude-ports -f --ff -F -g --help --iflist --ip-options -iR --log-errors -M --max-hostgroup --max-os-tries --max-parallelism --max-rate --max-retries --max-rtt-timeout --min-hostgroup --min-parallelism --min-rate --min-rtt-timeout --mtu -n --nogcc --no-stylesheet --nsock-engine -O -oA -oG -oJ -oN --open -oS --osscan-guess --osscan-limit -oX -p -PA --packet-trace -PE -PM -Pn -PO --port-ratio -PP -p --privileged -PR -PS -PU -PY -r -R --randomize-hosts --reason --release-memory -S -sA -sC --scanflags --script --script-args --script-help --script-trace --script-updatedb --send-eth --send-ip -sF -sI -sL -sM -sn -sN -sO --source-port --spoof-mac -sR -sS -sT -sU -sV -sW -sX -sY --system-dns -sZ -T --timing --top-ports --traceroute --ttl --unprivileged -V -v --verbose --version --version-all --version-intensity --version-light --version-trace --webxml --resolve-all --proxies --proxy --proxy-auth --proxy-creds --servicedb --versiondb --noninteractive --stats-every"

    # Options that take a file path as argument
    local file_opts="-iL --excludefile --resume --stylesheet --servicedb --versiondb --script-args-file"

    # Options that take a time value as argument
    local time_opts="--min-rtt-timeout --max-rtt-timeout --initial-rtt-timeout --host-timeout --scan-delay --max-scan-delay --stats-every"

    # Options that might have preferences saved
    local pref_opts="-oA -oG -oN -oX -oS -oJ --datadir --servicedb --versiondb --max-os-tries --max-parallelism -M --min-parallelism --max-rtt-timeout --min-rtt-timeout --initial-rtt-timeout --excludefile --exclude --exclude-ports --max-hostgroup --min-hostgroup --scanflags --host-timeout --scan-delay --max-scan-delay --max-retries -iL -iR -sI --source-port -g --data-length --stylesheet --mtu --spoof-mac --ttl --dns-servers --port-ratio --top-ports --script --script-args --script-args-file --ip-options --min-rate --max-rate --stats-every"

    # Check for proxy options
    local proxy_opts="--proxies --proxy --proxy-auth --proxy-creds"

    # Handle special completion for certain options
    if [[ "$cur" == - ]]; then
        # Don't overwhelm the casual user - only show common options
        local IFS=$'\n'
        COMPREPLY=( $( compgen -W "$common_options" -- "$cur" ) )
    elif [[ "$cur" == -P ]]; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -W "$ping_types" -- "$cur" ) )
    elif [[ "$cur" == -P@(S|Y|A|U|O|R) ]]; then
        # Cannot have space between these pings and port list
        COMPREPLY=( $( compgen -P "$cur" -- "" ) )
    elif [[ "$cur" == -s ]]; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -W "$scan_types" -- "$cur" ) )
    elif [[ "$cur" == -i ]]; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -W "$input_types" -- "$cur" ) )
    elif [[ "$cur" == -o ]]; then
        local IFS=$'\n'
        COMPREPLY=( $( compgen -W "$output_types" -- "$cur" ) )
    elif [[ "$cur" == -* ]]; then
        # Complete general options
        COMPREPLY=( $( compgen -W "$all_options $file_opts $time_opts" -- "$cur" ) )
    else
        # Handle option-specific completions
        case "$prev" in
            -T)
                COMPREPLY=( $( compgen -W "0 1 2 3 4 5 paranoid sneaky polite normal aggressive insane" -- "$cur" ) )
                ;;
            --nsock-engine)
                COMPREPLY=( $( compgen -W "epoll select" -- "$cur" ) )
                ;;
            --version-intensity)
                COMPREPLY=( $( compgen -W "0 1 2 3 4 5 6 7 8 9" -- "$cur" ) )
                ;;
            -e)
                _available_interfaces
                ;;
            -p|--ports|--top-ports)
                # If we're typing a range or comma-separated list, don't complete
                if [[ "$cur" == *,* || "$cur" == *-* ]]; then
                    return 0
                fi
                # Complete with some common port numbers
                COMPREPLY=( $( compgen -W "21 22 23 25 53 80 110 123 139 143 161 443 445 465 514 587 993 995 1080 1433 1521 3128 3306 3389 5432 5900 5901 6667 8000 8080 8443 8888" -- "$cur" ) )
                ;;
            --stats-every)
                COMPREPLY=( $( compgen -W "1s 5s 10s 30s 1m 5m" -- "$cur" ) )
                ;;
            --script-help|--script)
                [ -z "$NMAPDIR" ] && return 1
                local categories="auth broadcast default discovery dos exploit external fuzzer intrusive malware safe version vuln"
                
                if [[ "$cur" == *,* ]]; then
                    # Completing a comma-separated list of scripts
                    local realcur=${cur##*,}
                    local prefix=${cur%,*}
                    
                    # Combine script names from system directory and user directory
                    local scripts=()
                    if [ -d "$NMAPDIR/scripts/" ]; then
                        # Get script names from system directory
                        scripts+=( $(cd "$NMAPDIR/scripts/" 2>/dev/null && 
                                     find . -name "*.nse" -type f -printf "%f\n" | 
                                     sed 's/\.nse$//' | sort) )
                    fi
                    
                    if [ -d ~/.nmap/scripts/ ]; then
                        # Get script names from user directory
                        scripts+=( $(cd ~/.nmap/scripts/ 2>/dev/null && 
                                    find . -name "*.nse" -type f -printf "%f\n" | 
                                    sed 's/\.nse$//' | sort) )
                    fi
                    
                    # Add script categories
                    scripts+=( $categories )
                    
                    # Complete with the prefix retained
                    COMPREPLY=( $( compgen -W "${scripts[*]} all" -X "!$realcur*" -P "$prefix," -- "$realcur" ) )
                else
                    # Completing the first script
                    local scripts=()
                    
                    if [ -d "$NMAPDIR/scripts/" ]; then
                        # Get script names from system directory
                        scripts+=( $(cd "$NMAPDIR/scripts/" 2>/dev/null && 
                                     find . -name "*.nse" -type f -printf "%f\n" | 
                                     sed 's/\.nse$//' | sort) )
                    fi
                    
                    if [ -d ~/.nmap/scripts/ ]; then
                        # Get script names from user directory
                        scripts+=( $(cd ~/.nmap/scripts/ 2>/dev/null && 
                                    find . -name "*.nse" -type f -printf "%f\n" | 
                                    sed 's/\.nse$//' | sort) )
                    fi
                    
                    # Add script categories
                    scripts+=( $categories )
                    
                    # Complete
                    COMPREPLY=( $( compgen -W "${scripts[*]} all" -- "$cur" ) )
                fi
                ;;
            --script-args|--script-args-file)
                # Attempt to complete NSE script arguments if the script is identified
                local script_name=""
                for word in "${words[@]}"; do
                    if [[ "$word" == --script=* || "$word" == -script=* ]]; then
                        script_name="${word#*=}"
                        break
                    fi
                done
                
                if [[ -n "$script_name" && ! "$script_name" =~ "," && -f "$NMAPDIR/scripts/$script_name.nse" ]]; then
                    # Try to extract argument names from the script
                    local args=$(grep -oP 'stdnse\.parse_arguments\(\s*\)\s*\n.*?local\s+\K[a-zA-Z0-9_]+(?=\s*=)' "$NMAPDIR/scripts/$script_name.nse" || true)
                    if [[ -n "$args" ]]; then
                        if [[ "$cur" == *=* ]]; then
                            # We're completing an argument value
                            return 0
                        else
                            # We're completing an argument name
                            COMPREPLY=( $( compgen -W "$args" -P "" -S "=" -- "${cur%%=*}" ) )
                        fi
                    fi
                fi
                ;;
            --spoof-mac)
                [ -z "$NMAPDIR" ] && return 1
                
                if [[ "$cur" == "" || "$cur" == [0-9A-Fa-f][0-9A-Fa-f]:* ]]; then
                    # Complete with MAC address
                    return 0
                else
                    # Try to complete with vendor name
                    local realcur=${cur#[\'\"]}
                    # Check if nmap-mac-prefixes exists
                    if [[ -f "$NMAPDIR/nmap-mac-prefixes" ]]; then
                        local IFS=$'\n'
                        COMPREPLY=( $( grep -i "^[^#]..... $realcur" "$NMAPDIR/nmap-mac-prefixes" | 
                                      cut -d' ' -f2- | 
                                      awk -v cur="$realcur" '$0 ~ "^" cur { print $0 }' ) )
                        _escape_compreply
                    fi
                fi
                ;;
            --proxy|--proxies)
                # Complete with common proxy types
                if [[ "$cur" == "" || "$cur" == http://* || "$cur" == socks4://* || "$cur" == socks5://* ]]; then
                    COMPREPLY=( $( compgen -W "http:// socks4:// socks5://" -- "$cur" ) )
                fi
                ;;
        esac
        
        # Handle file/directory option completions
        case "$prev" in
            # Options that take a file path
            -iL|--excludefile|--resume|--stylesheet|--servicedb|--versiondb|--script-args-file)
                _filedir
                ;;
            # Options that take a directory path
            --datadir)
                _filedir -d
                ;;
        esac
        
        # Handle time options
        if [[ " $time_opts " =~ " $prev " ]]; then
            local digits=${cur%%+([msh])}
            COMPREPLY=( $( compgen -W "${digits}ms ${digits}s ${digits}m ${digits}h $digits" -- "$cur" ) )
        fi
        
        # Handle saved preferences
        if [[ " $pref_opts " =~ " $prev " ]] && [ -f ~/.nmap/prefs ]; then
            local -a prefs=()
            eval "prefs=( $( awk "/^$prev /{\$1=\"\"; print}" ~/.nmap/prefs ) ) "
            local IFS=$'\n'
            COMPREPLY+=( $( compgen -W "${prefs[*]}" -- "$cur" ) )
            _escape_compreply
        fi
    fi
    
    return 0
}

# Zenmap completion function
_zenmap() {
    COMPREPLY=()
    local cur prev words cword
    _init_completion || return
    
    local short_opts long_opts
    short_opts="-f -h -n -p -t -v"
    long_opts="--file --help --nmap --profile --target --verbose"
    
    # Check if we're in the nmap section of the command
    local offset i
    offset=0
    for (( i=1; i <= cword; i++ )); do
        if [[ "${words[i]}" == --nmap ]]; then
            offset=$i
            break
        fi
    done
    
    if [[ $offset -gt 0 ]]; then
        # If we're after --nmap, use nmap completion
        if [[ ${#words[@]} -ge $(( 2 + offset )) ]]; then
            _nmap
        else
            _nmap
        fi
        return 0
    else
        # Otherwise do zenmap completion
        if [[ "$cur" == - ]]; then
            COMPREPLY=( $( compgen -W "$short_opts" -- "$cur" ) )
        elif [[ "$cur" == -* ]]; then
            COMPREPLY=( $( compgen -W "$short_opts $long_opts" -- "$cur" ) )
        else
            case "$prev" in
                -f|--file)
                    _filedir
                    return 0
                    ;;
                -p|--profile)
                    # Complete with profiles from user's zenmap config
                    if [[ -f ~/.zenmap/scan_profile.usp ]]; then
                        local IFS=$'\n'
                        COMPREPLY=( $( compgen -W \
                            "$( awk -F'[][]' '/^\[/{print $2}' ~/.zenmap/scan_profile.usp )" \
                            -- "$cur" ) )
                        _escape_compreply
                    fi
                    return 0
                    ;;
                -t|--target)
                    # Offer previous targets if available in history
                    if [[ -f ~/.zenmap/target_list.txt ]]; then
                        local IFS=$'\n'
                        COMPREPLY=( $( compgen -W \
                            "$( head -20 ~/.zenmap/target_list.txt )" \
                            -- "$cur" ) )
                        _escape_compreply
                    fi
                    return 0
                    ;;
            esac
        fi
    fi
}

# Register completions
complete -F _nmap -o default nmap
complete -F _zenmap -o default zenmap
# vi:ft=sh
